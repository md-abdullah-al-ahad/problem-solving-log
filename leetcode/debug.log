2025-07-04 16:20:19,305 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, folder='.', problem_folder_name='${question_id}-${title_slug}', no_problem_statement=False, problem_statement_filename='${question_id}-${title_slug}.md', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', only_accepted=True, only_last_submission=False, language_unprocessed=None, verbose=False, extra_verbose=False, language=None)
2025-07-04 16:20:19,305 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-04 16:20:36,316 [DEBUG] connectionpool.py:1049 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-04 16:20:37,046 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-04 16:20:37,050 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1685023939,"question_id":878,"lang":"cpp","lang_name":"C++","time":"21 hours, 39 minutes","timestamp":1751546470,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1685023939/","is_pending":"Not Pending","title":"Shifting Letters","memory":"71.6 MB","code":"class Solution {\npublic:\n    string shiftingLetters(string s, vector<int>& shifts) {\n        int n = shifts.size();\n        for(int i = 0;i<n;i++){\n            shifts[i]= shifts[i]%26;\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            shifts[i] += shifts[i + 1];\n            shifts[i] = shifts[i]%26;\n        }\n        for (int i = 0; i < n; i++) {\n            int val = s[i] - 'a';\n            val += shifts[i];\n            val = val % 26;\n            s[i] = 'a' + val;\n        }\n        return s;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"shifting-letters","has_notes":false,"flag_type":1,"frontend_id":347}],"has_next":true,"last_key":""}
2025-07-04 16:20:38,051 [DEBUG] leetcode.py:112 - User is logged in
2025-07-04 16:20:38,051 [INFO] leetcode.py:95 - Cookie set successful
2025-07-04 16:20:38,052 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-04 16:20:38,729 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-04 16:20:38,759 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1685023939,"question_id":878,"lang":"cpp","lang_name":"C++","time":"21\xc2\xa0hours, 39\xc2\xa0minutes","timestamp":1751546470,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1685023939/","is_pending":"Not Pending","title":"Shifting Letters","memory":"71.6 MB","code":"class Solution {\\npublic:\\n    string shiftingLetters(string s, vector<int>& shifts) {\\n        int n = shifts.size();\\n        for(int i = 0;i<n;i++){\\n            shifts[i]= shifts[i]%26;\\n        }\\n        for (int i = n - 2; i >= 0; i--) {\\n            shifts[i] += shifts[i + 1];\\n            shifts[i] = shifts[i]%26;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            int val = s[i] - \'a\';\\n            val += shifts[i];\\n            val = val % 26;\\n            s[i] = \'a\' + val;\\n        }\\n        return s;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"shifting-letters","has_notes":false,"flag_type":1,"frontend_id":347},{"id":1685022062,"question_id":878,"lang":"cpp","lang_name":"C++","time":"21\xc2\xa0hours, 41\xc2\xa0minutes","timestamp":1751546356,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1685022062/","is_pending":"Not Pending","title":"Shifting Letters","memory":"N/A","code":"class Solution {\\npublic:\\n    string shiftingLetters(string s, vector<int>& shifts) {\\n        int n = shifts.size();\\n        for (int i = n - 2; i >= 0; i--) {\\n            shifts[i] += shifts[i + 1];\\n        }\\n        for (int i = 0; i < n; i++) {\\n            int val = s[i] - \'a\';\\n            val += shifts[i];\\n            val = val % 26;\\n            s[i] = \'a\' + val;\\n        }\\n        return s;\\n    }\\n};","compare_result":"11111111111111111111111111000000000000000000000000000","title_slug":"shifting-letters","has_notes":false,"flag_type":1,"frontend_id":346},{"id":1684962187,"question_id":3600,"lang":"cpp","lang_name":"C++","time":"22\xc2\xa0hours, 56\xc2\xa0minutes","timestamp":1751541870,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1684962187/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"11.1 MB","code":"class Solution {\\npublic:\\n    char kthCharacter(int k) {\\n        vector<int>v;\\n        v.push_back(1);\\n        for(int i = 1;i<=9;i++){\\n            int j = 0;\\n            int n = v.size();\\n            for(int k = 1;k<=n;k++){\\n                v.push_back(v[j]+1);\\n                j++;\\n            }\\n        }\\n        return \'a\' + v[k-1] - 1;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":345},{"id":1679064786,"question_id":540,"lang":"cpp","lang_name":"C++","time":"6\xc2\xa0days, 2\xc2\xa0hours","timestamp":1751097868,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1679064786/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"26.1 MB","code":"class Solution {\\npublic:\\n    int singleNonDuplicate(vector<int>& nums) {\\n        int n = nums.size();\\n        if (n == 1)\\n            return nums[0];\\n        if (nums[0] != nums[1])\\n            return nums[0];\\n        if (nums[n - 1] != nums[n - 2])\\n            return nums[n - 1];\\n        int low = 1;\\n        int high = n - 2;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1])\\n                return nums[mid];\\n            if(mid%2==0 && nums[mid+1]==nums[mid] || mid%2==1 && nums[mid]==nums[mid-1]){\\n                low = mid + 1;\\n            }\\n            else{\\n                high = mid - 1;\\n            }\\n        }\\n        return -1;\\n    }\\n};","compare_result":"1111111111111111","title_slug":"single-element-in-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":344},{"id":1678740411,"question_id":154,"lang":"cpp","lang_name":"C++","time":"6\xc2\xa0days, 11\xc2\xa0hours","timestamp":1751064218,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1678740411/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array II","memory":"16.1 MB","code":"class Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        int low = 0;\\n        int high = nums.size()-1;\\n        int ans = INT_MAX;\\n        while(low<=high){\\n            int mid = low + (high-low)/2;\\n            ans = min(ans,nums[mid]);\\n            if(nums[low]==nums[mid] && nums[mid]==nums[high]){\\n                low++;\\n                high--;\\n                continue;\\n            }\\n            if(nums[low]<=nums[mid]){\\n                ans = min(ans,nums[low]);\\n                low = mid + 1;\\n            }\\n            else{\\n                ans = min(ans,nums[mid]);\\n                high = mid - 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":343},{"id":1678739457,"question_id":154,"lang":"cpp","lang_name":"C++","time":"6\xc2\xa0days, 11\xc2\xa0hours","timestamp":1751064047,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1678739457/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array II","memory":"16.2 MB","code":"class Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        int low = 0;\\n        int high = nums.size()-1;\\n        int ans = INT_MAX;\\n        while(low<=high){\\n            int mid = low + (high-mid)/2;\\n            ans = min(ans,nums[mid]);\\n            if(nums[low]==nums[mid] && nums[mid]==nums[high]){\\n                low++;\\n                high--;\\n                continue;\\n            }\\n            if(nums[low]<=nums[mid]){\\n                ans = min(ans,nums[low]);\\n                low = mid + 1;\\n            }\\n            else{\\n                ans = min(ans,nums[mid]);\\n                high = mid - 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":342},{"id":1678738833,"question_id":154,"lang":"cpp","lang_name":"C++","time":"6\xc2\xa0days, 11\xc2\xa0hours","timestamp":1751063947,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1678738833/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array II","memory":"N/A","code":"class Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        int low = 0;\\n        int high = nums.size()-1;\\n        int ans = INT_MAX;\\n        while(low<=high){\\n            int mid = low + (high-mid)/2;\\n            if(nums[low]==nums[mid] && nums[mid]==nums[high]){\\n                low++;\\n                high--;\\n                continue;\\n            }\\n            if(nums[low]<=nums[mid]){\\n                ans = min(ans,nums[low]);\\n                low = mid + 1;\\n            }\\n            else{\\n                ans = min(ans,nums[mid]);\\n                high = mid - 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1100100111111001011111101011101111111101110111111011101111111111111111111111011111111110011110011111111111011111111101101111111111001101111111101110111110101111111101101011111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":341},{"id":1678731295,"question_id":153,"lang":"cpp","lang_name":"C++","time":"6\xc2\xa0days, 12\xc2\xa0hours","timestamp":1751062638,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1678731295/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array","memory":"14.1 MB","code":"class Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        int low = 0;\\n        int high = nums.size()-1;\\n        int ans = INT_MAX;\\n        while(low<=high){\\n            int mid = low + (high-low)/2;\\n            if(nums[low]<=nums[mid]){\\n                ans = min(ans,nums[low]);\\n                low = mid + 1;\\n            }\\n            else{\\n                ans = min(ans,nums[mid]);\\n                high = mid - 1;\\n            }\\n\\n        }\\n        return ans;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":340},{"id":1677817561,"question_id":81,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week","timestamp":1750993091,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1677817561/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array II","memory":"17.9 MB","code":"class Solution {\\npublic:\\n    bool search(vector<int>& nums, int target) {\\n        int low = 0;\\n        int high = nums.size() - 1;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] == target)\\n                return true;\\n            if (nums[low] == nums[mid] && nums[mid] == nums[high]) {\\n                low++;\\n                high--;\\n                continue;\\n            }\\n            if (nums[low] <= nums[mid]) {\\n                if (nums[low] <= target && target <= nums[mid]) {\\n                    high = mid - 1;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                if (nums[mid] <= target && target <= nums[high]) {\\n                    low = mid + 1;\\n                } else {\\n                    high = mid - 1;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":339},{"id":1676868938,"question_id":33,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750919819,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1676868938/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"15.3 MB","code":"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int n = nums.size();\\n        int low = 0;\\n        int high = n - 1;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] == target)\\n                return mid;\\n            if (nums[low] <= nums[mid]) {\\n                if (nums[low] <= target && target <= nums[mid]) {\\n                    high = mid - 1;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                if (nums[mid] <= target && target <= nums[high]) {\\n                    low = mid + 1;\\n                } else {\\n                    high = mid - 1;\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":338},{"id":1676864780,"question_id":33,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750919613,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1676864780/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int n = nums.size();\\n        int low = 0;\\n        int high = n - 1;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] == target)\\n                return mid;\\n            if (nums[low] <= nums[mid]) {\\n                if (nums[low] <= target && target <= mid) {\\n                    high = mid - 1;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                if (nums[mid] <= target && target <= high) {\\n                    low = mid + 1;\\n                } else {\\n                    high = mid - 1;\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};","compare_result":"1111111111111111111111111011111101111000011111111010111100111111110001111111111101111110101011111101011111111111011110111011101101111101110111110010110001111101111110001010000110100101110111101110","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":337},{"id":1676860643,"question_id":33,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750919400,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1676860643/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int n = nums.size();\\n        int low = 0;\\n        int high = n - 1;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] == target)\\n                return mid;\\n            if (nums[low] < nums[mid]) {\\n                if (nums[low] <= target && target <= mid) {\\n                    high = mid - 1;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                if (nums[mid] <= target && target <= high) {\\n                    low = mid + 1;\\n                } else {\\n                    high = mid - 1;\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};","compare_result":"1111111101101111111111111011111101111000011111111010111100001111110001111111111100110110101111111101011111111110011100111011101101110101110111100010110001111101111110001010000110100101110111101110","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":336},{"id":1676767107,"question_id":34,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750914408,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1676767107/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"17.5 MB","code":"class Solution {\\npublic:\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        int n = nums.size();\\n        int low = 0;\\n        int high = n - 1;\\n        vector<int> ans = {-1, -1};\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] > target) {\\n                high = mid - 1;\\n            } else if (nums[mid] < target) {\\n                low = mid + 1;\\n            } else {\\n                ans[0] = mid;\\n                high = mid - 1;\\n            }\\n        }\\n        low = 0;\\n        high = n - 1;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] > target) {\\n                high = mid - 1;\\n            } else if (nums[mid] < target) {\\n                low = mid + 1;\\n            } else {\\n                ans[1] = mid;\\n                low = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":335},{"id":1676712048,"question_id":35,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750910980,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1676712048/","is_pending":"Not Pending","title":"Search Insert Position","memory":"13.5 MB","code":"class Solution {\\npublic:\\n    int searchInsert(vector<int>& nums, int target) {\\n        int n = nums.size();\\n        int low = 0;\\n        int high = n - 1;\\n        int ans = n;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (nums[mid] == target) {\\n                return mid;\\n            } else if (nums[mid] > target) {\\n                ans = mid;\\n                high = mid - 1;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":334},{"id":1676679309,"question_id":278,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750908233,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1676679309/","is_pending":"Not Pending","title":"First Bad Version","memory":"7.7 MB","code":"// The API isBadVersion is defined for you.\\n// bool isBadVersion(int version);\\n\\nclass Solution {\\npublic:\\n    int firstBadVersion(int n) {\\n        int low = 0;\\n        int high = n;\\n        int ans = n;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (isBadVersion(mid)) {\\n                ans = mid;\\n                high = mid - 1;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"111111111111111111111111","title_slug":"first-bad-version","has_notes":false,"flag_type":1,"frontend_id":333},{"id":1676678933,"question_id":278,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1750908198,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1676678933/","is_pending":"Not Pending","title":"First Bad Version","memory":"N/A","code":"// The API isBadVersion is defined for you.\\n// bool isBadVersion(int version);\\n\\nclass Solution {\\npublic:\\n    int firstBadVersion(int n) {\\n        int low = 0;\\n        int high = n;\\n        int ans = n+1;\\n        while (low <= high) {\\n            int mid = low + (high - low) / 2;\\n            if (isBadVersion(mid)) {\\n                ans = mid;\\n                high = mid - 1;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"111111111111111111111000","title_slug":"first-bad-version","has_notes":false,"flag_type":1,"frontend_id":332},{"id":1674583712,"question_id":1538,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1750748432,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1674583712/","is_pending":"Not Pending","title":"Maximum Points You Can Obtain from Cards","memory":"46.3 MB","code":"class Solution {\\npublic:\\n    int maxScore(vector<int>& cardPoints, int k) {\\n        int ans = 0;\\n        int cur = 0;\\n        for (int i = 0; i < k; i++) {\\n            cur += cardPoints[i];\\n        }\\n        ans = cur;\\n        for (int i = k - 1; i >= 0; i--) {\\n            cur -= cardPoints[i];\\n            cur += cardPoints[cardPoints.size() - k + i];\\n            ans = max(cur, ans);\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-points-you-can-obtain-from-cards","has_notes":false,"flag_type":1,"frontend_id":331},{"id":1674516967,"question_id":3,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1750745142,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1674516967/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"12.1 MB","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        map<char, int> alpha;\\n        int i = 0, j = 0;\\n        int n = s.size();\\n        int ans = 0;\\n        while (j < n) {\\n            alpha[s[j]]++;\\n            while (alpha[s[j]] > 1) {\\n                alpha[s[i]]--;\\n                i++;\\n            }\\n            ans = max(ans, j - i + 1);\\n            j++;\\n        }\\n        return ans;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":330},{"id":1661333917,"question_id":3747,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1749687838,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1661333917/","is_pending":"Not Pending","title":"Maximum Difference Between Adjacent Elements in a Circular Array","memory":"30.4 MB","code":"class Solution {\\npublic:\\n    int maxAdjacentDistance(vector<int>& nums) {\\n        int mx = -1;\\n        for (int i = 0; i < nums.size() - 1; i++) {\\n            mx = max(mx, abs(nums[i] - nums[i + 1]));\\n        }\\n        mx = max(mx, abs(nums[0] - nums[nums.size() - 1]));\\n        return mx;\\n    }\\n};","compare_resulttitle_slug":"maximum-difference-between-adjacent-elements-in-a-circular-array","has_notes":false,"flag_type":1,"frontend_id":329},{"id":1650799509,"question_id":3201,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0month","timestamp":1748788881,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1650799509/","is_pending":"Not Pending","title":"Distribute Candies Among Children II","memory":"N/A","code":"class Solution {\\npublic:\\n    long long distributeCandies(int n, int limit) {\\n        long long int total = 0;\\n        for (int i = 0; i <= limit; i++) {\\n            for (int j = 0; j <= limit; j++) {\\n                for (int k = 0; k <= limit; k++) {\\n                    if (i + j + k == n) {\\n                        total += 1;\\n                    }\\n                }\\n            }\\n        }\\n        return total;\\n    }\\n};","compare_resulttitle_slug":"distribute-candies-among-children-ii","has_notes":false,"flag_type":1,"frontend_id":328}],"has_next":true,"last_key":""}'
2025-07-04 16:20:39,212 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:39,215 [INFO] __main__.py:245 - Writing shifting-letters/2025-07-03 18.41.10 - Accepted - runtime 6ms - memory 71.6MB.cpp
2025-07-04 16:20:39,216 [INFO] __main__.py:188 - Skipping shifting-letters 2025-07-03 18.39.16 because its status is 'Runtime Error'
2025-07-04 16:20:39,629 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:39,632 [INFO] __main__.py:245 - Writing find-the-k-th-character-in-string-game-i/2025-07-03 17.24.30 - Accepted - runtime 3ms - memory 11.1MB.cpp
2025-07-04 16:20:40,448 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:40,451 [INFO] __main__.py:245 - Writing single-element-in-a-sorted-array/2025-06-28 14.04.28 - Accepted - runtime 0ms - memory 26.1MB.cpp
2025-07-04 16:20:40,900 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:40,902 [INFO] __main__.py:245 - Writing find-minimum-in-rotated-sorted-array-ii/2025-06-28 04.43.38 - Accepted - runtime 0ms - memory 16.1MB.cpp
2025-07-04 16:20:40,903 [INFO] __main__.py:245 - Writing find-minimum-in-rotated-sorted-array-ii/2025-06-28 04.40.47 - Accepted - runtime 0ms - memory 16.2MB.cpp
2025-07-04 16:20:40,903 [INFO] __main__.py:188 - Skipping find-minimum-in-rotated-sorted-array-ii 2025-06-28 04.39.07 because its status is 'Wrong Answer'
2025-07-04 16:20:41,356 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:41,357 [INFO] __main__.py:245 - Writing find-minimum-in-rotated-sorted-array/2025-06-28 04.17.18 - Accepted - runtime 0ms - memory 14.1MB.cpp
2025-07-04 16:20:41,772 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:41,774 [INFO] __main__.py:245 - Writing search-in-rotated-sorted-array-ii/2025-06-27 08.58.11 - Accepted - runtime 0ms - memory 17.9MB.cpp
2025-07-04 16:20:42,991 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:42,993 [INFO] __main__.py:245 - Writing search-in-rotated-sorted-array/2025-06-26 12.36.59 - Accepted - runtime 0ms - memory 15.3MB.cpp
2025-07-04 16:20:42,994 [INFO] __main__.py:188 - Skipping search-in-rotated-sorted-array 2025-06-26 12.33.33 because its status is 'Wrong Answer'
2025-07-04 16:20:42,994 [INFO] __main__.py:188 - Skipping search-in-rotated-sorted-array 2025-06-26 12.30.00 because its status is 'Wrong Answer'
2025-07-04 16:20:43,541 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:43,543 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2025-06-26 11.06.48 - Accepted - runtime 0ms - memory 17.5MB.cpp
2025-07-04 16:20:43,961 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:43,962 [INFO] __main__.py:245 - Writing search-insert-position/2025-06-26 10.09.40 - Accepted - runtime 0ms - memory 13.5MB.cpp
2025-07-04 16:20:45,345 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:45,347 [INFO] __main__.py:245 - Writing first-bad-version/2025-06-26 09.23.53 - Accepted - runtime 2ms - memory 7.7MB.cpp
2025-07-04 16:20:45,347 [INFO] __main__.py:188 - Skipping first-bad-version 2025-06-26 09.23.18 because its status is 'Runtime Error'
2025-07-04 16:20:45,779 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:45,780 [INFO] __main__.py:245 - Writing maximum-points-you-can-obtain-from-cards/2025-06-24 13.00.32 - Accepted - runtime 0ms - memory 46.3MB.cpp
2025-07-04 16:20:46,178 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:46,180 [INFO] __main__.py:245 - Writing longest-substring-without-repeating-characters/2025-06-24 12.05.42 - Accepted - runtime 8ms - memory 12.1MB.cpp
2025-07-04 16:20:46,608 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:46,610 [INFO] __main__.py:245 - Writing maximum-difference-between-adjacent-elements-in-a-circular-array/2025-06-12 06.23.58 - Accepted - runtime 0ms - memory 30.4MB.cpp
2025-07-04 16:20:46,611 [INFO] __main__.py:188 - Skipping distribute-candies-among-children-ii 2025-06-01 20.41.21 because its status is 'Time Limit Exceeded'
2025-07-04 16:20:51,611 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-04 16:20:52,089 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-04 16:20:52,122 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1630955975,"question_id":1293,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1746960251,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1630955975/","is_pending":"Not Pending","title":"Three Consecutive Odds","memory":"18.1 MB","code":"class Solution:\\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\\n        freq = 0\\n        for i in range (len(arr)):\\n            if arr[i]%2==1:\\n                freq+=1\\n                if freq == 3:\\n                    return True\\n            else:\\n                freq = 0\\n        return False","compare_result":"11111111111111111111111111111111111111","title_slug":"three-consecutive-odds","has_notes":false,"flag_type":1,"frontend_id":327},{"id":1627243048,"question_id":3859,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 4\xc2\xa0weeks","timestamp":1746555670,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1627243048/","is_pending":"Not Pending","title":"Maximum Product of Two Digits","memory":"18 MB","code":"class Solution:\\n    def maxProduct(self, n: int) -> int:\\n        digits = []\\n        while n!=0:\\n          digits.append(n%10)\\n          n = n//10\\n        digits.sort()\\n        return digits[len(digits)-1]*digits[len(digits)-2]","compare_resulttitle_slug":"maximum-product-of-two-digits","has_notes":false,"flag_type":1,"frontend_id":326},{"id":1626971206,"question_id":2048,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 4\xc2\xa0weeks","timestamp":1746534589,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1626971206/","is_pending":"Not Pending","title":"Build Array from Permutation","memory":"17.9 MB","code":"class Solution:\\n    def buildArray(self, nums: List[int]) -> List[int]:\\n        return [nums[num] for num in nums]","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"build-array-from-permutation","has_notes":false,"flag_type":1,"frontend_id":325},{"id":1597896048,"question_id":2732,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743892745,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/1597896048/","is_pending":"Not Pending","title":"Counter","memory":"53.5 MB","code":"/**\\n * @param {number} n\\n * @return {Function} counter\\n */\\nvar createCounter = function(n) {\\n    \\n    return function() {\\n        return n++;\\n    };\\n};\\n\\n/** \\n * const counter = createCounter(10)\\n * counter() // 10\\n * counter() // 11\\n * counter() // 12\\n */","compare_result":"11111111111111111111111","title_slug":"counter","has_notes":false,"flag_type":1,"frontend_id":324},{"id":1597895350,"question_id":2809,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743892635,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1597895350/","is_pending":"Not Pending","title":"Create Hello World Function","memory":"53.2 MB","code":"/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \\"Hello World\\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \\"Hello World\\"\\n */","compare_result":"1111111111111111111111111","title_slug":"create-hello-world-function","has_notes":false,"flag_type":1,"frontend_id":323},{"id":1588417244,"question_id":3817,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1743098322,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1588417244/","is_pending":"Not Pending","title":"Maximum Containers on a Ship","memory":"17.7 MB","code":"class Solution:\\n    def maxContainers(self, n: int, w: int, maxWeight: int) -> int:\\n        n = n*n\\n        if w*n <=maxWeight:\\n            return n\\n        else:\\n            return maxWeight//w\\n        ","compare_resulttitle_slug":"maximum-containers-on-a-ship","has_notes":false,"flag_type":1,"frontend_id":322},{"id":1582293432,"question_id":2793,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1742649560,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1582293432/","is_pending":"Not Pending","title":"Count the Number of Complete Components","memory":"18.5 MB","code":"from collections import defaultdict\\n\\n\\nclass Solution:\\n    def countCompleteComponents(self, n, edges):\\n        ans = 0\\n        adjacency_list = defaultdict(list)\\n        for edge in edges:\\n            adjacency_list[edge[0]].append(edge[1])\\n            adjacency_list[edge[1]].append(edge[0])\\n        visited = set()\\n\\n        def dfs(node, component):\\n            component.add(node)\\n            visited.add(node)\\n            for neighbor in adjacency_list[node]:\\n                if neighbor not in visited:\\n                    dfs(neighbor, component)\\n\\n        for i in range(n):\\n            if i not in visited:\\n                component = set()\\n                dfs(i, component)\\n                is_complete = True\\n                for node in component:\\n                    if len(adjacency_list[node]) != len(component) - 1:\\n                        is_complete = False\\n                        break\\n                if is_complete:\\n                    ans += 1\\n        return ans\\n","compare_resulttitle_slug":"count-the-number-of-complete-components","has_notes":false,"flag_type":1,"frontend_id":321},{"id":1580781355,"question_id":3379,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742515132,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1580781355/","is_pending":"Not Pending","title":"Score of a String","memory":"17.7 MB","code":"class Solution:\\n    def scoreOfString(self, s: str) -> int:\\n        ans = 0\\n        for i in range(len(s) - 1):\\n            ans += abs(ord(s[i]) - ord(s[i + 1]))\\n        return ans\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"score-of-a-string","has_notes":false,"flag_type":1,"frontend_id":320},{"id":1578795967,"question_id":3475,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742368276,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/1578795967/","is_pending":"Not Pending","title":"Minimum Operations to Make Binary Array Elements Equal to One I","memory":"21.6 MB","code":"class Solution:\\n    def minOperations(self, nums: list[int]) -> int:\\n        if len(nums) < 3:\\n            if 0 in nums:\\n                return -1\\n            else:\\n                return 0\\n        ans = 0\\n        for i in range(len(nums) - 2):\\n            if nums[i] == 0:\\n                nums[i] = 1\\n                nums[i + 1] ^= 1\\n                nums[i + 2] ^= 1\\n                ans += 1\\n        if nums[-1] and nums[-2]:\\n            return ans\\n        return -1\\n","compare_resulttitle_slug":"minimum-operations-to-make-binary-array-elements-equal-to-one-i","has_notes":false,"flag_type":1,"frontend_id":319},{"id":1578376795,"question_id":2478,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742329848,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/1578376795/","is_pending":"Not Pending","title":"Longest Nice Subarray","memory":"31 MB","code":"class Solution:\\n    def longestNiceSubarray(self, nums: List[int]) -> int:\\n        cur = 0\\n        ans = 0\\n        i = 0\\n        for j in range(len(nums)):\\n            while cur & nums[j]:\\n                cur = cur ^ nums[i]\\n                i += 1\\n            ans = max(ans, j - i + 1)\\n            cur = cur | nums[j]\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-nice-subarray","has_notes":false,"flag_type":1,"frontend_id":318},{"id":1576529971,"question_id":442,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742198515,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1576529971/","is_pending":"Not Pending","title":"Find All Duplicates in an Array","memory":"27 MB","code":"class Solution:\\n    def findDuplicates(self, nums: List[int]) -> List[int]:\\n        ans = []\\n        for i in range(len(nums)):\\n            num = abs(nums[i])\\n            index = num - 1\\n            if nums[index] < 0:\\n                ans.append(num)\\n            nums[index] *= -1\\n        return ans\\n","compare_result":"11111111111111111111111111111","title_slug":"find-all-duplicates-in-an-array","has_notes":false,"flag_type":1,"frontend_id":317},{"id":1575409521,"question_id":211,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742109720,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1575409521/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class WordDictionary:\\n\\n    def __init__(self):\\n        self.words = []\\n\\n    def addWord(self, word: str) -> None:\\n        if word not in self.words:\\n            self.words.append(word)\\n\\n    def search(self, word: str) -> bool:\\n        word = word.replace(\\".\\", \\"\\")\\n        for w in self.words:\\n            if word in w:\\n                return True\\n        return False\\n\\n\\n# Your WordDictionary object will be instantiated and called as such:\\n# obj = WordDictionary()\\n# obj.addWord(word)\\n# param_2 = obj.search(word)\\n","compare_result":"11111100000000110001100001111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1,"frontend_id":316},{"id":1575240150,"question_id":2169,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742097492,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1575240150/","is_pending":"Not Pending","title":"Simple Bank System","memory":"47.7 MB","code":"class Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        n = len(self.balance)\\n        if account1<1 or account1>n or account2<1 or account2>n:\\n            return False\\n        if self.balance[account1-1]<money:\\n            return False\\n        self.balance[account2-1]+=money\\n        self.balance[account1-1]-=money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        n = len(self.balance)\\n        if account<1 or account>n:\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        n = len(self.balance)\\n        if account<1 or account>n:\\n            return False\\n        if self.balance[account-1]<money:\\n            return False\\n        self.balance[account-1]-=money\\n        return True\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)","compare_result":"11111111111111111111111","title_slug":"simple-bank-system","has_notes":false,"flag_type":1,"frontend_id":315},{"id":1574988018,"question_id":1497,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742080087,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1574988018/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"19 MB","code":"class CustomStack:\\n    def __init__(self, maxSize: int):\\n        self.stack = []\\n        self.maxSize = maxSize\\n\\n    def push(self, x: int) -> None:\\n        if len(self.stack) < self.maxSize:\\n            self.stack.append(x)\\n\\n    def pop(self) -> int:\\n        if not self.stack:\\n            return -1\\n        return self.stack.pop()\\n\\n    def increment(self, k: int, val: int) -> None:\\n        for i in range(min(k, len(self.stack))):\\n            self.stack[i] += val\\n\\n\\n# Your CustomStack object will be instantiated and called as such:\\n# obj = CustomStack(maxSize)\\n# obj.push(x)\\n# param_2 = obj.pop()\\n# obj.increment(k,val)","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation","has_notes":false,"flag_type":1,"frontend_id":314},{"id":1574704947,"question_id":3606,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1742056568,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1574704947/","is_pending":"Not Pending","title":"Minimum Element After Replacement With Digit Sum","memory":"17.9 MB","code":"class Solution:\\n    def minElement(self, nums: List[int]) -> int:\\n        ans = float(\'inf\')\\n        for num in nums:\\n            ans = min(ans,sum(int(i) for i in str(num)))\\n        return ans\\n","compare_resulttitle_slug":"minimum-element-after-replacement-with-digit-sum","has_notes":false,"flag_type":1,"frontend_id":313},{"id":1573527441,"question_id":1335,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741959032,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1573527441/","is_pending":"Not Pending","title":"Maximum Candies Allocated to K Children","memory":"N/A","code":"class Solution:\\n    def maximumCandies(self, candies: List[int], k: int) -> int:\\n        total = 0\\n        for candy in candies:\\n            total += candy // k\\n        return total\\n","compare_result":"1110010010011000000000000000000000000000000001000011111100100000100000000000000000000000000000000101","title_slug":"maximum-candies-allocated-to-k-children","has_notes":false,"flag_type":1,"frontend_id":312},{"id":1573510498,"question_id":1561,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741957678,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1573510498/","is_pending":"Not Pending","title":"Rearrange Words in a Sentence","memory":"19.8 MB","code":"class Solution:\\n    def arrangeWords(self, text: str) -> str:\\n        words = text.lower().split()\\n        words.sort(key=len)\\n        return \\" \\".join(words).capitalize()\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rearrange-words-in-a-sentence","has_notes":false,"flag_type":1,"frontend_id":311},{"id":1572258840,"question_id":2724,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741852716,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1572258840/","is_pending":"Not Pending","title":"Convert an Array Into a 2D Array With Conditions","memory":"17.8 MB","code":"class Solution:\\n    def findMatrix(self, nums: List[int]) -> List[List[int]]:\\n        hashmap = {}\\n        for num in nums:\\n            if num not in hashmap:\\n                hashmap[num] = 1\\n            else:\\n                hashmap[num] += 1\\n        ans = []\\n        highest = -1\\n        for key in hashmap:\\n            if hashmap[key] > highest:\\n                highest = hashmap[key]\\n        for i in range(highest):\\n            row = []\\n            for key in hashmap:\\n                if hashmap[key] > 0:\\n                    row.append(key)\\n                    hashmap[key] -= 1\\n            ans.append(row)\\n        return ans\\n","compare_resulttitle_slug":"convert-an-array-into-a-2d-array-with-conditions","has_notes":false,"flag_type":1,"frontend_id":310},{"id":1572248815,"question_id":2388,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741851880,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/1572248815/","is_pending":"Not Pending","title":"Replace Elements in an Array","memory":"70.3 MB","code":"class Solution:\\n    def arrayChange(self, nums: List[int], operations: List[List[int]]) -> List[int]:\\n        hashmap = {}\\n        for i in range(len(nums)):\\n            hashmap[nums[i]]=i\\n        for operation in operations:\\n            nums[hashmap[operation[0]]]=operation[1]\\n            hashmap[operation[1]]=hashmap[operation[0]]\\n        return nums\\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"replace-elements-in-an-array","has_notes":false,"flag_type":1,"frontend_id":309},{"id":1572236491,"question_id":2270,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741850918,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/1572236491/","is_pending":"Not Pending","title":"Find All Lonely Numbers in the Array","memory":"39.9 MB","code":"class Solution:\\n    def findLonely(self, nums: List[int]) -> List[int]:\\n        lst = []\\n        hashmap = {}\\n        for num in nums:\\n            if num not in hashmap:\\n                hashmap[num] = 1\\n            else:\\n                hashmap[num] += 1\\n        for num in nums:\\n            if hashmap[num] == 1 and num - 1 not in hashmap and num + 1 not in hashmap:\\n                lst.append(num)\\n        return lst\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-lonely-numbers-in-the-array","has_notes":false,"flag_type":1,"frontend_id":308}],"has_next":true,"last_key":""}'
2025-07-04 16:20:52,555 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:52,557 [INFO] __main__.py:245 - Writing three-consecutive-odds/2025-05-11 16.44.11 - Accepted - runtime 0ms - memory 18.1MB.py
2025-07-04 16:20:52,979 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:52,980 [INFO] __main__.py:245 - Writing maximum-product-of-two-digits/2025-05-07 00.21.10 - Accepted - runtime 0ms - memory 18MB.py
2025-07-04 16:20:53,385 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:53,387 [INFO] __main__.py:245 - Writing build-array-from-permutation/2025-05-06 18.29.49 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:20:54,165 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:54,167 [INFO] __main__.py:245 - Writing counter/2025-04-06 04.39.05 - Accepted - runtime 35ms - memory 53.5MB.js
2025-07-04 16:20:55,011 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:55,012 [INFO] __main__.py:245 - Writing create-hello-world-function/2025-04-06 04.37.15 - Accepted - runtime 45ms - memory 53.2MB.js
2025-07-04 16:20:55,423 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:55,424 [INFO] __main__.py:245 - Writing maximum-containers-on-a-ship/2025-03-27 23.58.42 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:20:55,869 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:55,871 [INFO] __main__.py:245 - Writing count-the-number-of-complete-components/2025-03-22 19.19.20 - Accepted - runtime 43ms - memory 18.5MB.py
2025-07-04 16:20:56,403 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:56,405 [INFO] __main__.py:245 - Writing score-of-a-string/2025-03-21 05.58.52 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:20:56,805 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:56,807 [INFO] __main__.py:245 - Writing minimum-operations-to-make-binary-array-elements-equal-to-one-i/2025-03-19 13.11.16 - Accepted - runtime 86ms - memory 21.6MB.py
2025-07-04 16:20:57,242 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:57,243 [INFO] __main__.py:245 - Writing longest-nice-subarray/2025-03-19 02.30.48 - Accepted - runtime 88ms - memory 31MB.py
2025-07-04 16:20:57,666 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:57,667 [INFO] __main__.py:245 - Writing find-all-duplicates-in-an-array/2025-03-17 14.01.55 - Accepted - runtime 40ms - memory 27MB.py
2025-07-04 16:20:57,668 [INFO] __main__.py:188 - Skipping design-add-and-search-words-data-structure 2025-03-16 13.22.00 because its status is 'Wrong Answer'
2025-07-04 16:20:58,089 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:58,091 [INFO] __main__.py:245 - Writing simple-bank-system/2025-03-16 09.58.12 - Accepted - runtime 40ms - memory 47.7MB.py
2025-07-04 16:20:58,512 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:58,514 [INFO] __main__.py:245 - Writing design-a-stack-with-increment-operation/2025-03-16 05.08.07 - Accepted - runtime 31ms - memory 19MB.py
2025-07-04 16:20:59,287 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:59,289 [INFO] __main__.py:245 - Writing minimum-element-after-replacement-with-digit-sum/2025-03-15 22.36.08 - Accepted - runtime 7ms - memory 17.9MB.py
2025-07-04 16:20:59,290 [INFO] __main__.py:188 - Skipping maximum-candies-allocated-to-k-children 2025-03-14 19.30.32 because its status is 'Wrong Answer'
2025-07-04 16:20:59,716 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:20:59,717 [INFO] __main__.py:245 - Writing rearrange-words-in-a-sentence/2025-03-14 19.07.58 - Accepted - runtime 7ms - memory 19.8MB.py
2025-07-04 16:21:00,164 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:00,165 [INFO] __main__.py:245 - Writing convert-an-array-into-a-2d-array-with-conditions/2025-03-13 13.58.36 - Accepted - runtime 3ms - memory 17.8MB.py
2025-07-04 16:21:00,584 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:00,586 [INFO] __main__.py:245 - Writing replace-elements-in-an-array/2025-03-13 13.44.40 - Accepted - runtime 64ms - memory 70.3MB.py
2025-07-04 16:21:01,041 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:01,042 [INFO] __main__.py:245 - Writing find-all-lonely-numbers-in-the-array/2025-03-13 13.28.38 - Accepted - runtime 131ms - memory 39.9MB.py
2025-07-04 16:21:06,043 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-04 16:21:06,670 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-04 16:21:06,685 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1572216759,"question_id":2887,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741849473,"status":10,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/1572216759/","is_pending":"Not Pending","title":"Sort Vowels in a String","memory":"20.4 MB","code":"class Solution:\\n    def sortVowels(self, s: str) -> str:\\n        vowels = \\"aeiouAEIOU\\"\\n        v = \\"\\"\\n        for c in s:\\n            if c in vowels:\\n                v += c\\n        v = sorted(v)\\n        i = 0\\n        lst = []\\n        for c in s:\\n            if c in vowels:\\n                lst.append(v[i])\\n                i += 1\\n            else:\\n                lst.append(c)\\n        return \\"\\".join(lst)\\n","compare_resulttitle_slug":"sort-vowels-in-a-string","has_notes":false,"flag_type":1,"frontend_id":307},{"id":1571622769,"question_id":1254,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741799109,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1571622769/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"20.5 MB","code":"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\\n        if not root:\\n            return 0\\n        total = 0\\n        queue = deque([root])\\n        while queue:\\n            total = 0\\n            for i in range(len(queue)):\\n                node = queue.popleft()\\n                total += node.val\\n                if node.left:\\n                    queue.append(node.left)\\n                if node.right:\\n                    queue.append(node.right)\\n        return total","compare_result":"111111111111111111111111111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1,"frontend_id":306},{"id":1571612483,"question_id":2481,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741798560,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1571612483/","is_pending":"Not Pending","title":"Strictly Palindromic Number","memory":"17.6 MB","code":"class Solution:\\n    def isStrictlyPalindromic(self, n: int) -> bool:\\n        return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"strictly-palindromic-number","has_notes":false,"flag_type":1,"frontend_id":305},{"id":1571603693,"question_id":2631,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741798088,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1571603693/","is_pending":"Not Pending","title":"Sort the Students by Their Kth Score","memory":"22.4 MB","code":"class Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x: x[k], reverse=True)\\n","compare_result":"111111111111111111111111111111111","title_slug":"sort-the-students-by-their-kth-score","has_notes":false,"flag_type":1,"frontend_id":304},{"id":1571602013,"question_id":2631,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741797993,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1571602013/","is_pending":"Not Pending","title":"Sort the Students by Their Kth Score","memory":"22.6 MB","code":"class Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        score.sort(key=lambda x: x[k], reverse=True)\\n        return score\\n","compare_result":"111111111111111111111111111111111","title_slug":"sort-the-students-by-their-kth-score","has_notes":false,"flag_type":1,"frontend_id":303},{"id":1571599647,"question_id":2631,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741797869,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1571599647/","is_pending":"Not Pending","title":"Sort the Students by Their Kth Score","memory":"22.8 MB","code":"class Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        kth_score = []\\n        for i in range (len(score)):\\n            kth_score.append([i,score[i][k]])\\n        kth_score.sort(key=lambda x: x[1],reverse=True)\\n        ans = []\\n        for i in range (len(score)):\\n            ans.append(score[kth_score[i][0]])\\n        return ans\\n","compare_result":"111111111111111111111111111111111","title_slug":"sort-the-students-by-their-kth-score","has_notes":false,"flag_type":1,"frontend_id":302},{"id":1570922170,"question_id":2903,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741750905,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1570922170/","is_pending":"Not Pending","title":"Insert Greatest Common Divisors in Linked List","memory":"20.1 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution:\\n    def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        def gcd(a, b):\\n            while b:\\n                a, b = b, a % b\\n            return a\\n        current = head\\n        while current and current.next:\\n            g = gcd(current.val, current.next.val)\\n            new_node = ListNode(g)\\n            new_node.next = current.next\\n            current.next = new_node\\n            current = current.next.next\\n        return head\\n","compare_resulttitle_slug":"insert-greatest-common-divisors-in-linked-list","has_notes":false,"flag_type":1,"frontend_id":301},{"id":1570898847,"question_id":2614,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741749029,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1570898847/","is_pending":"Not Pending","title":"Maximum Count of Positive Integer and Negative Integer","memory":"18 MB","code":"class Solution:\\n    def maximumCount(self, nums: List[int]) -> int:\\n        neg = pos = 0\\n        for num in nums:\\n            if num > 0:\\n                pos += 1\\n            elif num < 0:\\n                neg += 1\\n        return max(pos, neg)\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-count-of-positive-integer-and-negative-integer","has_notes":false,"flag_type":1,"frontend_id":300},{"id":1570501247,"question_id":1460,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741713321,"status":10,"status_display":"Accepted","runtime":"109 ms","url":"/submissions/detail/1570501247/","is_pending":"Not Pending","title":"Number of Substrings Containing All Three Characters","memory":"17.7 MB","code":"class Solution:\\n    def numberOfSubstrings(self, s: str) -> int:\\n        ans = 0\\n        char_count = {\'a\': 0, \'b\': 0, \'c\': 0}\\n        i = 0\\n        for j in range(len(s)):\\n            char_count[s[j]] += 1\\n            while char_count[\'a\'] > 0 and char_count[\'b\'] > 0 and char_count[\'c\'] > 0:\\n                ans += len(s) - j\\n                char_count[s[i]] -= 1\\n                i += 1\\n        return ans\\n","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"number-of-substrings-containing-all-three-characters","has_notes":false,"flag_type":1,"frontend_id":299},{"id":1568625797,"question_id":3790,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741572913,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1568625797/","is_pending":"Not Pending","title":"Fruits Into Baskets II","memory":"17.8 MB","code":"class Solution:\\n    def numOfUnplacedFruits(self, fruits: List[int], baskets: List[int]) -> int:\\n        lst = [0]*len(baskets)\\n        total = 0\\n        for fruit in fruits:\\n            i = 0\\n            for i in range (len(baskets)):\\n                if baskets[i]>=fruit and lst[i]==0:\\n                    total+=1\\n                    lst[i]=1\\n                    break\\n        return len(fruits)-total\\n            ","compare_resulttitle_slug":"fruits-into-baskets-ii","has_notes":false,"flag_type":1,"frontend_id":298},{"id":1567516244,"question_id":3483,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741482954,"status":10,"status_display":"Accepted","runtime":"723 ms","url":"/submissions/detail/1567516244/","is_pending":"Not Pending","title":"Alternating Groups II","memory":"21.8 MB","code":"class Solution:\\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:\\n        total = 0\\n        for i in range(k - 1):\\n            colors.append(colors[i])\\n        left = 0\\n        for right in range(1, len(colors)):\\n            if colors[right] == colors[right - 1]:\\n                left = right\\n            if right - left + 1 >= k:\\n                total += 1\\n        return total\\n","compare_resulttitle_slug":"alternating-groups-ii","has_notes":false,"flag_type":1,"frontend_id":297},{"id":1567115474,"question_id":1036,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741448174,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1567115474/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"17.8 MB","code":"from collections import deque\\n\\n\\nclass Solution:\\n    def orangesRotting(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        m = len(grid[0])\\n        drow = [-1, 0, 1, 0]\\n        dcol = [0, 1, 0, -1]\\n        vis = [[0] * m for _ in range(n)]\\n        queue = deque()\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j] == 2:\\n                    queue.append(((i, j), 0))\\n                    vis[i][j] = 2\\n                elif grid[i][j] == 1:\\n                    vis[i][j] = 0\\n        time = 0\\n        while queue:\\n            (r, c), tm = queue.popleft()\\n            time = max(time, tm)\\n            for i in range(4):\\n                nrow = r + drow[i]\\n                ncol = c + dcol[i]\\n                if (\\n                    0 <= nrow < n\\n                    and 0 <= ncol < m\\n                    and vis[nrow][ncol] != 2\\n                    and grid[nrow][ncol] == 1\\n                ):\\n                    queue.append(((nrow, ncol), tm + 1))\\n                    vis[nrow][ncol] = 2\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j] == 1 and vis[i][j] != 2:\\n                    return -1\\n        return time\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1,"frontend_id":296},{"id":1567007622,"question_id":387,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741439988,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/1567007622/","is_pending":"Not Pending","title":"First Unique Character in a String","memory":"18.1 MB","code":"class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        hashmap = {}\\n        for c in s:\\n            if c not in hashmap:\\n                hashmap[c]=1\\n            else:\\n                hashmap[c]+=1\\n        for i in range (len(s)):\\n            if hashmap[s[i]]==1:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-unique-character-in-a-string","has_notes":false,"flag_type":1,"frontend_id":295},{"id":1566481145,"question_id":2463,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741392834,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1566481145/","is_pending":"Not Pending","title":"Minimum Recolors to Get K Consecutive Black Blocks","memory":"17.7 MB","code":"class Solution:\\n    def minimumRecolors(self, blocks: str, k: int) -> int:\\n        ans = float(\\"inf\\")\\n        cur_white = 0\\n        for i in range(len(blocks)):\\n            if blocks[i] == \\"W\\":\\n                cur_white += 1\\n            if i >= k - 1:\\n                ans = min(cur_white, ans)\\n                if blocks[i - k + 1] == \\"W\\":\\n                    cur_white -= 1\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-recolors-to-get-k-consecutive-black-blocks","has_notes":false,"flag_type":1,"frontend_id":294},{"id":1566480249,"question_id":2463,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741392706,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1566480249/","is_pending":"Not Pending","title":"Minimum Recolors to Get K Consecutive Black Blocks","memory":"N/A","code":"class Solution:\\n    def minimumRecolors(self, blocks: str, k: int) -> int:\\n        ans = float(\'inf\')\\n        cur_white = 0\\n        for i in range (len(blocks)):\\n            if blocks[i]==\'W\':\\n                cur_white+=1\\n            if i>=k-1:\\n                ans = min(cur_white,ans)\\n                if blocks[i-k+1]==\'W\':\\n                    cur_white-=1\\n        return min(ans,cur_white)","compare_result":"11111100111111111111111101111011111101111111111111111110111111111011111111111101110111111111111111011111111111111011010110","title_slug":"minimum-recolors-to-get-k-consecutive-black-blocks","has_notes":false,"flag_type":1,"frontend_id":293},{"id":1566407532,"question_id":733,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741382790,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1566407532/","is_pending":"Not Pending","title":"Flood Fill","memory":"18.4 MB","code":"class Solution:\\n    def floodFill(\\n        self, image: List[List[int]], sr: int, sc: int, color: int\\n    ) -> List[List[int]]:\\n        n = len(image)\\n        m = len(image[0])\\n        visited = [[0] * m for _ in range(n)]\\n        starting_color = image[sr][sc]\\n\\n        def dfs(i, j):\\n            if i < 0 or i >= n or j < 0 or j >= m:\\n                return\\n            if visited[i][j] == 1:\\n                return\\n            visited[i][j] = 1\\n            if image[i][j] == starting_color:\\n                image[i][j] = color\\n                dfs(i + 1, j)\\n                dfs(i - 1, j)\\n                dfs(i, j + 1)\\n                dfs(i, j - 1)\\n\\n        dfs(sr, sc)\\n        return image","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill","has_notes":false,"flag_type":1,"frontend_id":292},{"id":1566347681,"question_id":200,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741376850,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1566347681/","is_pending":"Not Pending","title":"Number of Islands","memory":"20.3 MB","code":"class Solution:\\n    def numIslands(self, grid: List[List[str]]) -> int:\\n        n = len(grid)\\n        m = len(grid[0])\\n        visited = [[0] * m for _ in range(n)]\\n        count = 0\\n\\n        def dfs(i,j):\\n            if i < 0 or i >= n or j < 0 or j >= m:\\n                return\\n            if grid[i][j] == \\"0\\" or visited[i][j] == 1:\\n                return\\n            visited[i][j] = 1\\n            dfs(i + 1, j)\\n            dfs(i - 1, j)\\n            dfs(i, j + 1)\\n            dfs(i, j - 1)\\n\\n        for i in range(n):\\n            for j in range(m):\\n                if visited[i][j] == 0 and grid[i][j] == \'1\':\\n                    count += 1\\n                    dfs(i, j)\\n        return count\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1,"frontend_id":291},{"id":1566216460,"question_id":200,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741368296,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1566216460/","is_pending":"Not Pending","title":"Number of Islands","memory":"N/A","code":"class Solution:\\n    def numIslands(self, grid: List[List[str]]) -> int:\\n        n = len(grid)\\n        visited = [0]*n\\n        count = 0\\n        def dfs(node):\\n            visited[node]=1\\n            for neighbor in range (n):\\n                if grid[node][neighbor]==\'1\' and visited[neighbor]==0:\\n                    dfs(neighbor)\\n        for i in range (n):\\n            if visited[i]==0:\\n                count += 1\\n                dfs(i)\\n        return count","compare_result":"1110110000000000000000000000000000000000000000000","title_slug":"number-of-islands","has_notes":false,"flag_type":1,"frontend_id":290},{"id":1566199735,"question_id":547,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741367385,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1566199735/","is_pending":"Not Pending","title":"Number of Provinces","memory":"18.9 MB","code":"class Solution:\\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\\n        n = len(isConnected)\\n        visited = [0]*n\\n        count = 0\\n        def bfs(node):\\n            queue = deque([node])\\n            visited[node]=1\\n            while queue:\\n                current = queue.popleft()\\n                for neighbor in range(n):\\n                    if isConnected[current][neighbor]==1 and visited[neighbor]==0:\\n                        visited[neighbor]=1\\n                        queue.append(neighbor)\\n        for i in range(n):\\n            if visited[i]==0:\\n                count+=1\\n                bfs(i)\\n        return count\\n\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1,"frontend_id":289},{"id":1566169496,"question_id":547,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741365668,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1566169496/","is_pending":"Not Pending","title":"Number of Provinces","memory":"19.6 MB","code":"class Solution:\\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\\n        n = len(isConnected)\\n        visited = [0]*n\\n        count = 0\\n        def bfs(node):\\n            visited[node]=1\\n            for neighbor in range (n):\\n                if isConnected[node][neighbor]==1 and visited[neighbor]==0:\\n                    bfs(neighbor)\\n        for i in range(n):\\n            if visited[i]==0:\\n                count +=1\\n                bfs(i)\\n        return count\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1,"frontend_id":288}],"has_next":true,"last_key":""}'
2025-07-04 16:21:07,106 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:07,107 [INFO] __main__.py:245 - Writing sort-vowels-in-a-string/2025-03-13 13.04.33 - Accepted - runtime 81ms - memory 20.4MB.py
2025-07-04 16:21:07,546 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:07,548 [INFO] __main__.py:245 - Writing deepest-leaves-sum/2025-03-12 23.05.09 - Accepted - runtime 27ms - memory 20.5MB.py
2025-07-04 16:21:07,978 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:07,980 [INFO] __main__.py:245 - Writing strictly-palindromic-number/2025-03-12 22.56.00 - Accepted - runtime 0ms - memory 17.6MB.py
2025-07-04 16:21:08,388 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:08,389 [INFO] __main__.py:245 - Writing sort-the-students-by-their-kth-score/2025-03-12 22.48.08 - Accepted - runtime 0ms - memory 22.4MB.py
2025-07-04 16:21:08,390 [INFO] __main__.py:245 - Writing sort-the-students-by-their-kth-score/2025-03-12 22.46.33 - Accepted - runtime 0ms - memory 22.6MB.py
2025-07-04 16:21:08,391 [INFO] __main__.py:245 - Writing sort-the-students-by-their-kth-score/2025-03-12 22.44.29 - Accepted - runtime 0ms - memory 22.8MB.py
2025-07-04 16:21:08,805 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:08,807 [INFO] __main__.py:245 - Writing insert-greatest-common-divisors-in-linked-list/2025-03-12 09.41.45 - Accepted - runtime 18ms - memory 20.1MB.py
2025-07-04 16:21:09,469 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:09,471 [INFO] __main__.py:245 - Writing maximum-count-of-positive-integer-and-negative-integer/2025-03-12 09.10.29 - Accepted - runtime 3ms - memory 18MB.py
2025-07-04 16:21:09,945 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:09,948 [INFO] __main__.py:245 - Writing number-of-substrings-containing-all-three-characters/2025-03-11 23.15.21 - Accepted - runtime 109ms - memory 17.7MB.py
2025-07-04 16:21:10,393 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:10,395 [INFO] __main__.py:245 - Writing fruits-into-baskets-ii/2025-03-10 08.15.13 - Accepted - runtime 23ms - memory 17.8MB.py
2025-07-04 16:21:10,883 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:10,888 [INFO] __main__.py:245 - Writing alternating-groups-ii/2025-03-09 07.15.54 - Accepted - runtime 723ms - memory 21.8MB.py
2025-07-04 16:21:11,312 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:11,313 [INFO] __main__.py:245 - Writing rotting-oranges/2025-03-08 21.36.14 - Accepted - runtime 3ms - memory 17.8MB.py
2025-07-04 16:21:12,152 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:12,153 [INFO] __main__.py:245 - Writing first-unique-character-in-a-string/2025-03-08 19.19.48 - Accepted - runtime 75ms - memory 18.1MB.py
2025-07-04 16:21:12,842 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:12,844 [INFO] __main__.py:245 - Writing minimum-recolors-to-get-k-consecutive-black-blocks/2025-03-08 06.13.54 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:21:12,844 [INFO] __main__.py:188 - Skipping minimum-recolors-to-get-k-consecutive-black-blocks 2025-03-08 06.11.46 because its status is 'Wrong Answer'
2025-07-04 16:21:13,370 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:13,372 [INFO] __main__.py:245 - Writing flood-fill/2025-03-08 03.26.30 - Accepted - runtime 0ms - memory 18.4MB.py
2025-07-04 16:21:13,781 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:13,783 [INFO] __main__.py:245 - Writing number-of-islands/2025-03-08 01.47.30 - Accepted - runtime 240ms - memory 20.3MB.py
2025-07-04 16:21:13,783 [INFO] __main__.py:188 - Skipping number-of-islands 2025-03-07 23.24.56 because its status is 'Wrong Answer'
2025-07-04 16:21:14,197 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:14,199 [INFO] __main__.py:245 - Writing number-of-provinces/2025-03-07 23.09.45 - Accepted - runtime 3ms - memory 18.9MB.py
2025-07-04 16:21:14,199 [INFO] __main__.py:245 - Writing number-of-provinces/2025-03-07 22.41.08 - Accepted - runtime 5ms - memory 19.6MB.py
2025-07-04 16:21:19,200 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-04 16:21:19,744 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-04 16:21:19,768 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1565411899,"question_id":2610,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741307274,"status":10,"status_display":"Accepted","runtime":"1700 ms","url":"/submissions/detail/1565411899/","is_pending":"Not Pending","title":"Closest Prime Numbers in Range","memory":"35.2 MB","code":"class Solution:\\n    def closestPrimes(self, left: int, right: int) -> List[int]:\\n        n = right\\n        primes = [True]*(n+1)\\n        primes[0]=primes[1]=False\\n        p = 2\\n        while p*p<=n:\\n            if primes[p]:\\n                for i in range(p*p,n+1,p):\\n                    primes[i]=False\\n            p+=1\\n        ans = [-1,-1]\\n        least = float(\'inf\')\\n        range_prime = [num for num in range(left, right + 1) if primes[num]]\\n        if len(range_prime) < 2:\\n            return [-1, -1]\\n        for i in range (1,len(range_prime)):\\n            new_least = range_prime[i]-range_prime[i-1]\\n            if new_least<least:\\n                ans[0]=range_prime[i-1]\\n                ans[1]=range_prime[i]\\n                least = new_least\\n        return ans\\n                \\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"closest-prime-numbers-in-range","has_notes":false,"flag_type":1,"frontend_id":287},{"id":1565410801,"question_id":2610,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741307140,"status":10,"status_display":"Accepted","runtime":"5503 ms","url":"/submissions/detail/1565410801/","is_pending":"Not Pending","title":"Closest Prime Numbers in Range","memory":"36.1 MB","code":"class Solution:\\n    def closestPrimes(self, left: int, right: int) -> List[int]:\\n        n = int(2e6)\\n        primes = [True]*(n+1)\\n        primes[0]=primes[1]=False\\n        p = 2\\n        while p*p<=n:\\n            if primes[p]:\\n                for i in range(p*p,n+1,p):\\n                    primes[i]=False\\n            p+=1\\n        ans = [-1,-1]\\n        least = float(\'inf\')\\n        range_prime = [num for num in range(left, right + 1) if primes[num]]\\n        for i in range (1,len(range_prime)):\\n            new_least = range_prime[i]-range_prime[i-1]\\n            if new_least<least:\\n                ans[0]=range_prime[i-1]\\n                ans[1]=range_prime[i]\\n                least = new_least\\n        return ans\\n                \\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"closest-prime-numbers-in-range","has_notes":false,"flag_type":1,"frontend_id":286},{"id":1565210098,"question_id":21,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741286277,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1565210098/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"17.8 MB","code":"class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        current1 = list1\\n        current2 = list2\\n        head = ListNode(0)  # A dummy node to simplify the merge logic\\n        ans = head  # This will be the start of the merged list\\n\\n        # Merge both lists as long as both are not empty\\n        while current1 and current2:\\n            if current1.val < current2.val:\\n                head.next = current1\\n                current1 = current1.next\\n            else:\\n                head.next = current2\\n                current2 = current2.next\\n            head = head.next\\n        if current1:\\n            head.next = current1\\n        if current2:\\n            head.next = current2\\n\\n        return ans.next\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1,"frontend_id":285},{"id":1564860043,"question_id":172,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1741264611,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1564860043/","is_pending":"Not Pending","title":"Factorial Trailing Zeroes","memory":"17.7 MB","code":"class Solution:\\n    def trailingZeroes(self, n: int) -> int:\\n        ans = 0\\n        while n > 0:\\n            n //= 5\\n            ans += n\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"factorial-trailing-zeroes","has_notes":false,"flag_type":1,"frontend_id":284},{"id":1564301058,"question_id":3227,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741220313,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1564301058/","is_pending":"Not Pending","title":"Find Missing and Repeated Values","memory":"18.2 MB","code":"class Solution:\\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:\\n        n = len(grid)\\n        st = set()\\n        ans = [0]*2\\n        total = 0\\n        for i in range (n):\\n            for j in range(n):\\n                val = grid[i][j]\\n                if val in st:\\n                    ans[0]=val\\n                else:\\n                    st.add(val)\\n                    total+=val\\n        n=n*n\\n        ans[1]=((n*(n+1))//2 - total)\\n        return ans","compare_resulttitle_slug":"find-missing-and-repeated-values","has_notes":false,"flag_type":1,"frontend_id":283},{"id":1564297747,"question_id":3227,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741219920,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1564297747/","is_pending":"Not Pending","title":"Find Missing and Repeated Values","memory":"18 MB","code":"class Solution:\\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:\\n        n = len(grid)\\n        m = len(grid[0])\\n        lst = [0]*(n*m+1)\\n        ans = [-1]*2\\n        for i in range (n):\\n            for j in range(m):\\n                lst[grid[i][j]]+=1\\n        for i in range (1,len(lst)):\\n            if lst[i]==2:\\n                ans[0]=i\\n            if lst[i]==0:\\n                ans[1]=i\\n        return ans","compare_resulttitle_slug":"find-missing-and-repeated-values","has_notes":false,"flag_type":1,"frontend_id":282},{"id":1563625123,"question_id":1236,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741170692,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1563625123/","is_pending":"Not Pending","title":"N-th Tribonacci Number","memory":"18 MB","code":"class Solution:\\n    def tribonacci(self, n: int) -> int:\\n        dp = [-1]*40\\n        def helper(n):\\n            if n==0 or n==1:\\n                dp[n]=n\\n            if n == 2:\\n                dp[n]=1\\n            if dp[n]==-1:\\n                dp[n]=helper(n-1)+helper(n-2)+helper(n-3)\\n            return dp[n]\\n        return helper(n)\\n","compare_result":"11111111111111111111111111111111111111","title_slug":"n-th-tribonacci-number","has_notes":false,"flag_type":1,"frontend_id":281},{"id":1563522649,"question_id":2649,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741163631,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1563522649/","is_pending":"Not Pending","title":"Count Total Number of Colored Cells","memory":"17.8 MB","code":"class Solution:\\n    def coloredCells(self, n: int) -> int:\\n        n-=1\\n        return (n*n + n)*2 + 1","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-total-number-of-colored-cells","has_notes":false,"flag_type":1,"frontend_id":280},{"id":1563119294,"question_id":2649,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741134070,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1563119294/","is_pending":"Not Pending","title":"Count Total Number of Colored Cells","memory":"18 MB","code":"class Solution:\\n    def coloredCells(self, n: int) -> int:\\n        if n == 1:\\n            return 1\\n        else:\\n            n-=1\\n            return ((n*(n+1))//2)*4 + 1","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-total-number-of-colored-cells","has_notes":false,"flag_type":1,"frontend_id":279},{"id":1563112184,"question_id":2649,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741133278,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/1563112184/","is_pending":"Not Pending","title":"Count Total Number of Colored Cells","memory":"17.9 MB","code":"class Solution:\\n    def coloredCells(self, n: int) -> int:\\n        total = 1\\n        for i in range(1,n):\\n            total +=  4*i\\n        return total","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-total-number-of-colored-cells","has_notes":false,"flag_type":1,"frontend_id":278},{"id":1562525613,"question_id":164,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741089254,"status":10,"status_display":"Accepted","runtime":"130 ms","url":"/submissions/detail/1562525613/","is_pending":"Not Pending","title":"Maximum Gap","memory":"29.4 MB","code":"import heapq\\nclass Solution:\\n    def maximumGap(self, nums: List[int]) -> int:\\n        ans = 0\\n        nums = sorted(nums)\\n        for i in range (1,len(nums)):\\n            comp = abs(nums[i]-nums[i-1])\\n            if comp>ans:\\n                ans = comp\\n        return ans\\n        ","compare_result":"11111111111111111111111111111111111111111111","title_slug":"maximum-gap","has_notes":false,"flag_type":1,"frontend_id":277},{"id":1562488571,"question_id":1889,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741085795,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1562488571/","is_pending":"Not Pending","title":"Check if Number is a Sum of Powers of Three","memory":"18 MB","code":"class Solution:\\n    def checkPowersOfThree(self, n: int) -> bool:\\n        while n > 0:\\n            if n % 3 == 2:\\n                return False\\n            n //= 3\\n        return True\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-number-is-a-sum-of-powers-of-three","has_notes":false,"flag_type":1,"frontend_id":276},{"id":1561873296,"question_id":2271,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1741034526,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1561873296/","is_pending":"Not Pending","title":"Rearrange Array Elements by Sign","memory":"42.2 MB","code":"class Solution:\\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\\n        i=0\\n        j=1\\n        ans = [0]*len(nums)\\n        for num in nums:\\n            if num>0:\\n                ans[i]=num\\n                i+=2\\n        for num in nums:\\n            if num<0:\\n                ans[j]=num\\n                j+=2\\n        return ans\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rearrange-array-elements-by-sign","has_notes":false,"flag_type":1,"frontend_id":275},{"id":1561195410,"question_id":2265,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740988698,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1561195410/","is_pending":"Not Pending","title":"Partition Array According to Given Pivot","memory":"35.6 MB","code":"class Solution:\\n    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:\\n        lst = []\\n        totalpivot = 0\\n        for num in nums:\\n            if num < pivot:\\n                lst.append(num)\\n            if num == pivot:\\n                totalpivot+=1\\n        while totalpivot:\\n            lst.append(pivot)\\n            totalpivot-=1\\n        for num in nums:\\n            if num > pivot:\\n                lst.append(num)\\n        return lst","compare_result":"11111111111111111111111111111111111111111111","title_slug":"partition-array-according-to-given-pivot","has_notes":false,"flag_type":1,"frontend_id":274},{"id":1560310687,"question_id":198,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740915639,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1560310687/","is_pending":"Not Pending","title":"House Robber","memory":"18 MB","code":"class Solution:\\n    def rob(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        lst = [-1]*(n+1)\\n        def helper(n):\\n            if n<0:\\n                return 0\\n            if lst[n]!=-1:\\n                return lst[n]\\n            lst[n] =  max(helper(n-1),nums[n]+helper(n-2))\\n            return lst[n]\\n        return helper(n-1)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber","has_notes":false,"flag_type":1,"frontend_id":273},{"id":1560303504,"question_id":198,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740915049,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1560303504/","is_pending":"Not Pending","title":"House Robber","memory":"N/A","code":"class Solution:\\n    def rob(self, nums: List[int]) -> int:\\n        def helper(n):\\n            if n<0:\\n                return 0\\n            return max(helper(n-1),nums[n]+helper(n-2))\\n        return helper(len(nums)-1)","compare_result":"1111111111111111111111111111111111111111111111111100000000000000000000","title_slug":"house-robber","has_notes":false,"flag_type":1,"frontend_id":272},{"id":1560292172,"question_id":747,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740914151,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1560292172/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"19.1 MB","code":"class Solution:\\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\\n        n = len(cost)\\n        lst = [-1]*(n+1)\\n        def helper(n):\\n            if n <=1:\\n                lst[n]=cost[n]\\n            if lst[n]==-1:\\n                lst[n]= min(helper(n - 1), helper(n - 2)) + cost[n]\\n            return lst[n]\\n        return min(helper(n - 1), helper(n - 2))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":271},{"id":1560290797,"question_id":747,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740914043,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1560290797/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"19.8 MB","code":"class Solution:\\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\\n        n = len(cost)\\n        lst = [-1]*1001\\n        def helper(n):\\n            if n <=1:\\n                lst[n]=cost[n]\\n            if lst[n]==-1:\\n                lst[n]= min(helper(n - 1), helper(n - 2)) + cost[n]\\n            return lst[n]\\n        return min(helper(n - 1), helper(n - 2))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":270},{"id":1560280042,"question_id":747,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740913220,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1560280042/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"19.7 MB","code":"class Solution:\\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\\n        n = len(cost)\\n        lst = [-1]*1001\\n        def helper(n):\\n            if n <=1:\\n                lst[n]=cost[n]\\n            if lst[n]==-1:\\n                lst[n]= min(helper(n - 1), helper(n - 2)) + (cost[n] if n < len(cost) else 0)\\n            return lst[n]\\n        return min(helper(n - 1), helper(n - 2))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":269},{"id":1560231131,"question_id":2707,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740909427,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1560231131/","is_pending":"Not Pending","title":"Merge Two 2D Arrays by Summing Values","memory":"17.8 MB","code":"from typing import List\\n\\nclass Solution:\\n    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:\\n        i, j = 0, 0\\n        ans = []\\n        while i < len(nums1) and j < len(nums2):\\n            if nums1[i][0] < nums2[j][0]:\\n                ans.append(nums1[i])\\n                i += 1\\n            elif nums1[i][0] > nums2[j][0]:\\n                ans.append(nums2[j])\\n                j += 1\\n            else:\\n                ans.append([nums1[i][0], nums1[i][1] + nums2[j][1]])\\n                i += 1\\n                j += 1\\n        while i < len(nums1):\\n            ans.append(nums1[i])\\n            i += 1\\n        while j < len(nums2):\\n            ans.append(nums2[j])\\n            j += 1\\n        return ans\\n","compare_result":"111111111111111111111111111111111111111","title_slug":"merge-two-2d-arrays-by-summing-values","has_notes":false,"flag_type":1,"frontend_id":268}],"has_next":true,"last_key":""}'
2025-07-04 16:21:20,239 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:20,241 [INFO] __main__.py:245 - Writing closest-prime-numbers-in-range/2025-03-07 06.27.54 - Accepted - runtime 1700ms - memory 35.2MB.py
2025-07-04 16:21:20,241 [INFO] __main__.py:245 - Writing closest-prime-numbers-in-range/2025-03-07 06.25.40 - Accepted - runtime 5503ms - memory 36.1MB.py
2025-07-04 16:21:20,714 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:20,715 [INFO] __main__.py:245 - Writing merge-two-sorted-lists/2025-03-07 00.37.57 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:21:21,178 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:21,180 [INFO] __main__.py:245 - Writing factorial-trailing-zeroes/2025-03-06 18.36.51 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:21:21,616 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:21,617 [INFO] __main__.py:245 - Writing find-missing-and-repeated-values/2025-03-06 06.18.33 - Accepted - runtime 3ms - memory 18.2MB.py
2025-07-04 16:21:21,618 [INFO] __main__.py:245 - Writing find-missing-and-repeated-values/2025-03-06 06.12.00 - Accepted - runtime 8ms - memory 18MB.py
2025-07-04 16:21:22,041 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:22,042 [INFO] __main__.py:245 - Writing n-th-tribonacci-number/2025-03-05 16.31.32 - Accepted - runtime 0ms - memory 18MB.py
2025-07-04 16:21:22,555 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:22,557 [INFO] __main__.py:245 - Writing count-total-number-of-colored-cells/2025-03-05 14.33.51 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:21:22,557 [INFO] __main__.py:245 - Writing count-total-number-of-colored-cells/2025-03-05 06.21.10 - Accepted - runtime 0ms - memory 18MB.py
2025-07-04 16:21:22,558 [INFO] __main__.py:245 - Writing count-total-number-of-colored-cells/2025-03-05 06.07.58 - Accepted - runtime 131ms - memory 17.9MB.py
2025-07-04 16:21:23,539 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:23,541 [INFO] __main__.py:245 - Writing maximum-gap/2025-03-04 17.54.14 - Accepted - runtime 130ms - memory 29.4MB.py
2025-07-04 16:21:24,293 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:24,294 [INFO] __main__.py:245 - Writing check-if-number-is-a-sum-of-powers-of-three/2025-03-04 16.56.35 - Accepted - runtime 0ms - memory 18MB.py
2025-07-04 16:21:24,709 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:24,711 [INFO] __main__.py:245 - Writing rearrange-array-elements-by-sign/2025-03-04 02.42.06 - Accepted - runtime 51ms - memory 42.2MB.py
2025-07-04 16:21:25,146 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:25,148 [INFO] __main__.py:245 - Writing partition-array-according-to-given-pivot/2025-03-03 13.58.18 - Accepted - runtime 56ms - memory 35.6MB.py
2025-07-04 16:21:25,919 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:25,920 [INFO] __main__.py:245 - Writing house-robber/2025-03-02 17.40.39 - Accepted - runtime 0ms - memory 18MB.py
2025-07-04 16:21:25,921 [INFO] __main__.py:188 - Skipping house-robber 2025-03-02 17.30.49 because its status is 'Time Limit Exceeded'
2025-07-04 16:21:26,325 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:26,327 [INFO] __main__.py:245 - Writing min-cost-climbing-stairs/2025-03-02 17.15.51 - Accepted - runtime 7ms - memory 19.1MB.py
2025-07-04 16:21:26,327 [INFO] __main__.py:245 - Writing min-cost-climbing-stairs/2025-03-02 17.14.03 - Accepted - runtime 7ms - memory 19.8MB.py
2025-07-04 16:21:26,328 [INFO] __main__.py:245 - Writing min-cost-climbing-stairs/2025-03-02 17.00.20 - Accepted - runtime 7ms - memory 19.7MB.py
2025-07-04 16:21:26,750 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:26,751 [INFO] __main__.py:245 - Writing merge-two-2d-arrays-by-summing-values/2025-03-02 15.57.07 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:21:31,752 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-04 16:21:32,264 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-04 16:21:32,276 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1559673943,"question_id":3778,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740865536,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1559673943/","is_pending":"Not Pending","title":"Transform Array by Parity","memory":"17.9 MB","code":"class Solution:\\n    def transformArray(self, nums: List[int]) -> List[int]:\\n        ans = []\\n        for num in nums:\\n            if num%2==0:\\n                ans.append(0)\\n        for num in nums:\\n            if num%2==1:\\n                ans.append(1)\\n        return ans","compare_resulttitle_slug":"transform-array-by-parity","has_notes":false,"flag_type":1,"frontend_id":267},{"id":1559616451,"question_id":70,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740859859,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1559616451/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"17.6 MB","code":"class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        first = 1\\n        second = 2\\n        if n == 1:\\n            return 1\\n        if   n == 2:\\n            return 2\\n        for i in range (3,n+1):\\n            second,first = second+first,second\\n        return second\\n\\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":266},{"id":1559614406,"question_id":70,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740859678,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1559614406/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"17.9 MB","code":"class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        lst = [-1]*46\\n        def helper(n):\\n            if n == 1:\\n                return 1\\n            if n == 2:\\n                return 2\\n            if lst[n]==-1:\\n                lst[n]=helper(n-1)+helper(n-2)\\n            return lst[n]\\n        return helper(n)\\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":265},{"id":1559593180,"question_id":1013,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740857922,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1559593180/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"17.9 MB","code":"class Solution:\\n    def fib(self, n: int) -> int:\\n        if n == 0:\\n            return 0\\n        if n == 1:\\n            return 1\\n        first = 0\\n        second = 1\\n        for i in range (2,n+1):\\n            temp = second\\n            second = second + first\\n            first = temp\\n        return second","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":264},{"id":1559592812,"question_id":1013,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740857892,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1559592812/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"N/A","code":"class Solution:\\n    def fib(self, n: int) -> int:\\n        first = 0\\n        second = 1\\n        for i in range (2,n+1):\\n            temp = second\\n            second = second + first\\n            first = temp\\n        return second","compare_result":"1110111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":263},{"id":1559569901,"question_id":1013,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740856118,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1559569901/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"17.9 MB","code":"class Solution:\\n    def fib(self, n: int) -> int:\\n        lst = [-1]*31\\n        def helper(n):\\n            if n==0:\\n                lst[n]=0\\n            if n == 1:\\n                lst[n]=1\\n            if lst[n]==-1:\\n                lst[n] = helper(n-1) + helper(n-2)\\n            return lst[n]\\n        return helper(n)","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":262},{"id":1559437736,"question_id":47,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740847953,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1559437736/","is_pending":"Not Pending","title":"Permutations II","memory":"18.2 MB","code":"class Solution:\\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        n = len(nums)\\n        def helper(i):\\n            if i==n-1:\\n                ans.append(nums[:])\\n                return\\n            hashmap = {}\\n            for j in range(i,n):\\n                if nums[j] not in hashmap:\\n                    hashmap[nums[j]]=1\\n                    nums[i],nums[j] = nums[j],nums[i]\\n                    helper(i+1)\\n                    nums[i],nums[j] = nums[j], nums[i]\\n        helper(0)\\n        return ans","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1,"frontend_id":261},{"id":1559435879,"question_id":47,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740847840,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1559435879/","is_pending":"Not Pending","title":"Permutations II","memory":"18.1 MB","code":"class Solution:\\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        n = len(nums)\\n        def helper(i):\\n            if i==n-1:\\n                if nums[:] not in ans:\\n                    ans.append(nums[:])\\n                return\\n            hashmap = {}\\n            for j in range(i,n):\\n                if nums[j] not in hashmap:\\n                    hashmap[nums[j]]=1\\n                    nums[i],nums[j] = nums[j],nums[i]\\n                    helper(i+1)\\n                    nums[i],nums[j] = nums[j], nums[i]\\n        helper(0)\\n        return ans","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1,"frontend_id":260},{"id":1559423605,"question_id":47,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740847099,"status":10,"status_display":"Accepted","runtime":"565 ms","url":"/submissions/detail/1559423605/","is_pending":"Not Pending","title":"Permutations II","memory":"18 MB","code":"class Solution:\\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        n = len(nums)\\n        def helper(i):\\n            if i==n-1:\\n                if nums[:] not in ans:\\n                    ans.append(nums[:])\\n                return\\n            for j in range(i,n):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                helper(i+1)\\n                nums[i],nums[j] = nums[j], nums[i]\\n        helper(0)\\n        return ans","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1,"frontend_id":259},{"id":1559421757,"question_id":2551,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740846982,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1559421757/","is_pending":"Not Pending","title":"Apply Operations to an Array","memory":"18.1 MB","code":"class Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zero_count = 0\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i] = nums[i]*2\\n                nums[i+1]=0\\n        for i in range (len(nums)):\\n            if nums[i]==0:\\n                zero_count+=1\\n        i = 0\\n        for j in range (len(nums)):\\n            if nums[j]!=0:\\n                nums[i]=nums[j]\\n                i+=1\\n        for j in range (i,len(nums)):\\n            nums[j]=0\\n        return nums\\n","compare_result":"111111111111111111111111111111111111","title_slug":"apply-operations-to-an-array","has_notes":false,"flag_type":1,"frontend_id":258},{"id":1559164522,"question_id":46,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740835446,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1559164522/","is_pending":"Not Pending","title":"Permutations","memory":"17.9 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        n = len(nums)\\n        def helper(i):\\n            if i==n-1:\\n                ans.append(nums[:])\\n                return\\n            for j in range(i,n):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                helper(i+1)\\n                nums[i],nums[j] = nums[j], nums[i]\\n        helper(0)\\n        return ans","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":257},{"id":1558136710,"question_id":2308,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740744313,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1558136710/","is_pending":"Not Pending","title":"Divide Array Into Equal Pairs","memory":"17.9 MB","code":"from collections import Counter\\nclass Solution:\\n    def divideArray(self, nums: List[int]) -> bool:\\n        hashmap = Counter(nums)\\n        for freq in hashmap.values():\\n            if freq % 2 != 0:\\n                return False\\n        return True\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"divide-array-into-equal-pairs","has_notes":false,"flag_type":1,"frontend_id":256},{"id":1558133154,"question_id":2308,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740743954,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1558133154/","is_pending":"Not Pending","title":"Divide Array Into Equal Pairs","memory":"N/A","code":"class Solution:\\n    def divideArray(self, nums: List[int]) -> bool:\\n        ans = 0\\n        for num in nums:\\n            ans = ans ^ num\\n        if ans == 0:\\n            return True\\n        return False\\n","compare_result":"11111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111011111101","title_slug":"divide-array-into-equal-pairs","has_notes":false,"flag_type":1,"frontend_id":255},{"id":1558036457,"question_id":451,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months","timestamp":1740735049,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1558036457/","is_pending":"Not Pending","title":"Sort Characters By Frequency","memory":"19.1 MB","code":"import heapq\\n\\n\\nclass Solution:\\n    def frequencySort(self, s: str) -> str:\\n        hashmap = {}\\n        for c in s:\\n            if c not in hashmap:\\n                hashmap[c] = 1\\n            else:\\n                hashmap[c] += 1\\n        heap = []\\n        for key, value in hashmap.items():\\n            heapq.heappush(heap, (-value, key))\\n        ans = \\"\\"\\n        while heap:\\n            value, key = heapq.heappop(heap)\\n            ans += key * (-value)\\n        return ans\\n","compare_result":"111111111111111111111111111111111","title_slug":"sort-characters-by-frequency","has_notes":false,"flag_type":1,"frontend_id":254},{"id":1556945221,"question_id":1951,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740644756,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1556945221/","is_pending":"Not Pending","title":"Find the Winner of the Circular Game","memory":"17.9 MB","code":"class Solution:\\n    def findTheWinner(self, n: int, k: int) -> int:\\n        ans = 0\\n        for i in range(2, n + 1):\\n            ans = (ans + k) % i\\n        return ans+1\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-winner-of-the-circular-game","has_notes":false,"flag_type":1,"frontend_id":253},{"id":1556931970,"question_id":1951,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740643618,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1556931970/","is_pending":"Not Pending","title":"Find the Winner of the Circular Game","memory":"17.7 MB","code":"class Solution:\\n    def findTheWinner(self, n: int, k: int) -> int:\\n        def winner(n, k):\\n            if n == 1:\\n                return 0\\n            return (winner(n - 1, k) + k) % n\\n        return winner(n, k) + 1\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-winner-of-the-circular-game","has_notes":false,"flag_type":1,"frontend_id":252},{"id":1556038136,"question_id":1849,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740571917,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1556038136/","is_pending":"Not Pending","title":"Maximum Absolute Sum of Any Subarray","memory":"28.4 MB","code":"class Solution:\\n    def maxAbsoluteSum(self, nums):\\n        total = maxtotal = mintotal = 0\\n        for num in nums:\\n            total += num\\n            maxtotal = max(maxtotal, total)\\n            mintotal = min(mintotal, total)\\n        return abs(maxtotal - mintotal)\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-absolute-sum-of-any-subarray","has_notes":false,"flag_type":1,"frontend_id":251},{"id":1554556867,"question_id":287,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740459823,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1554556867/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"30.1 MB","code":"class Solution:\\n    def findDuplicate(self, nums: List[int]) -> int:\\n        slow = 0\\n        fast = 0\\n        while True:\\n            slow = nums[slow]\\n            fast = nums[nums[fast]]\\n            if slow == fast:\\n                break\\n        slow2 = 0\\n        while True:\\n            slow = nums[slow]\\n            slow2 = nums[slow2]\\n            if slow == slow2:\\n                break\\n        return slow","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":250},{"id":1554262539,"question_id":287,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740431425,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1554262539/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"29.2 MB","code":"class Solution:\\n    def findDuplicate(self, nums: List[int]) -> int:\\n        lst = [0]*len(nums)\\n        for num in nums:\\n            if lst[num]!=0:\\n                return num\\n            else:\\n                lst[num]+=1\\n        \\n        \\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":249},{"id":1554110449,"question_id":287,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740420462,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1554110449/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"34.1 MB","code":"class Solution:\\n    def findDuplicate(self, nums: List[int]) -> int:\\n        st = set()\\n        for num in nums:\\n            if num in st:\\n                return num\\n            else:\\n                st.add(num)","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":248}],"has_next":true,"last_key":""}'
2025-07-04 16:21:32,699 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:32,701 [INFO] __main__.py:245 - Writing transform-array-by-parity/2025-03-02 03.45.36 - Accepted - runtime 7ms - memory 17.9MB.py
2025-07-04 16:21:33,698 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:33,700 [INFO] __main__.py:245 - Writing climbing-stairs/2025-03-02 02.10.59 - Accepted - runtime 0ms - memory 17.6MB.py
2025-07-04 16:21:33,701 [INFO] __main__.py:245 - Writing climbing-stairs/2025-03-02 02.07.58 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:21:34,138 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:34,142 [INFO] __main__.py:245 - Writing fibonacci-number/2025-03-02 01.38.42 - Accepted - runtime 37ms - memory 17.9MB.py
2025-07-04 16:21:34,143 [INFO] __main__.py:188 - Skipping fibonacci-number 2025-03-02 01.38.12 because its status is 'Wrong Answer'
2025-07-04 16:21:34,143 [INFO] __main__.py:245 - Writing fibonacci-number/2025-03-02 01.08.38 - Accepted - runtime 25ms - memory 17.9MB.py
2025-07-04 16:21:34,570 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:34,571 [INFO] __main__.py:245 - Writing permutations-ii/2025-03-01 22.52.33 - Accepted - runtime 1ms - memory 18.2MB.py
2025-07-04 16:21:34,572 [INFO] __main__.py:245 - Writing permutations-ii/2025-03-01 22.50.40 - Accepted - runtime 16ms - memory 18.1MB.py
2025-07-04 16:21:34,572 [INFO] __main__.py:245 - Writing permutations-ii/2025-03-01 22.38.19 - Accepted - runtime 565ms - memory 18MB.py
2025-07-04 16:21:35,100 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:35,102 [INFO] __main__.py:245 - Writing apply-operations-to-an-array/2025-03-01 22.36.22 - Accepted - runtime 0ms - memory 18.1MB.py
2025-07-04 16:21:35,538 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:35,540 [INFO] __main__.py:245 - Writing permutations/2025-03-01 19.24.06 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:21:36,062 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:36,063 [INFO] __main__.py:245 - Writing divide-array-into-equal-pairs/2025-02-28 18.05.13 - Accepted - runtime 3ms - memory 17.9MB.py
2025-07-04 16:21:36,064 [INFO] __main__.py:188 - Skipping divide-array-into-equal-pairs 2025-02-28 17.59.14 because its status is 'Wrong Answer'
2025-07-04 16:21:36,497 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:36,499 [INFO] __main__.py:245 - Writing sort-characters-by-frequency/2025-02-28 15.30.49 - Accepted - runtime 11ms - memory 19.1MB.py
2025-07-04 16:21:36,921 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:36,922 [INFO] __main__.py:245 - Writing find-the-winner-of-the-circular-game/2025-02-27 14.25.56 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:21:36,923 [INFO] __main__.py:245 - Writing find-the-winner-of-the-circular-game/2025-02-27 14.06.58 - Accepted - runtime 3ms - memory 17.7MB.py
2025-07-04 16:21:37,338 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:37,339 [INFO] __main__.py:245 - Writing maximum-absolute-sum-of-any-subarray/2025-02-26 18.11.57 - Accepted - runtime 43ms - memory 28.4MB.py
2025-07-04 16:21:37,731 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:37,733 [INFO] __main__.py:245 - Writing find-the-duplicate-number/2025-02-25 11.03.43 - Accepted - runtime 21ms - memory 30.1MB.py
2025-07-04 16:21:37,733 [INFO] __main__.py:245 - Writing find-the-duplicate-number/2025-02-25 03.10.25 - Accepted - runtime 8ms - memory 29.2MB.py
2025-07-04 16:21:37,734 [INFO] __main__.py:245 - Writing find-the-duplicate-number/2025-02-25 00.07.42 - Accepted - runtime 22ms - memory 34.1MB.py
2025-07-04 16:21:42,735 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-04 16:21:43,475 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-04 16:21:43,496 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1553629803,"question_id":504,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740386768,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1553629803/","is_pending":"Not Pending","title":"Base 7","memory":"17.7 MB","code":"class Solution:\\n    def convertToBase7(self, num: int) -> str:\\n        if num == 0:\\n            return \\"0\\"\\n        ans = \\"\\"\\n        sign = False\\n        if num<0:\\n            sign = True\\n        num = abs(num)\\n        while num!=0:\\n            rem = num % 7\\n            ans+=str(rem)\\n            num = num // 7\\n        if sign:\\n            ans+=\\"-\\"\\n        return ans[::-1]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"base-7","has_notes":false,"flag_type":1,"frontend_id":247},{"id":1553629245,"question_id":504,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740386725,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1553629245/","is_pending":"Not Pending","title":"Base 7","memory":"N/A","code":"class Solution:\\n    def convertToBase7(self, num: int) -> str:\\n        ans = \\"\\"\\n        sign = False\\n        if num<0:\\n            sign = True\\n        num = abs(num)\\n        while num!=0:\\n            rem = num % 7\\n            ans+=str(rem)\\n            num = num // 7\\n        if sign:\\n            ans+=\\"-\\"\\n        return ans[::-1]","compare_result":"1101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"base-7","has_notes":false,"flag_type":1,"frontend_id":246},{"id":1553501184,"question_id":1951,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740376806,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1553501184/","is_pending":"Not Pending","title":"Find the Winner of the Circular Game","memory":"18 MB","code":"class Solution:\\n    def findTheWinner(self, n: int, k: int) -> int:\\n        arr = [i+1 for i in range (n)]\\n        def helper(arr,start_index):\\n            if len(arr)==1:\\n                return arr[0]\\n            index_to_remove = (start_index + k - 1)%len(arr)\\n            del arr[index_to_remove]\\n            return helper(arr,index_to_remove)\\n        return helper(arr,0)\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-winner-of-the-circular-game","has_notes":false,"flag_type":1,"frontend_id":245},{"id":1552777509,"question_id":795,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740313646,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1552777509/","is_pending":"Not Pending","title":"K-th Symbol in Grammar","memory":"17.8 MB","code":"class Solution:\\n    def kthGrammar(self, n: int, k: int) -> int:\\n        if n == 1:\\n            return 0\\n        mid = 2**(n - 1)//2\\n        if k>mid:\\n            return 1-(self.kthGrammar(n-1,(k-mid)))\\n        else:\\n            return self.kthGrammar(n-1,(k))\\n            \\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"k-th-symbol-in-grammar","has_notes":false,"flag_type":1,"frontend_id":244},{"id":1552756155,"question_id":795,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740311646,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1552756155/","is_pending":"Not Pending","title":"K-th Symbol in Grammar","memory":"N/A","code":"class Solution:\\n    def kthGrammar(self, n: int, k: int) -> int:\\n        ans = \\"0\\"\\n        new_ans = \\"\\"\\n        for i in range (n-1):\\n            for c in ans:\\n                if c==\'0\':\\n                    new_ans+=\\"01\\"\\n                else:\\n                    new_ans+=\\"10\\"\\n            ans=new_ans\\n            new_ans = \\"\\"\\n        return int(ans[k-1])\\n            ","compare_result":"1111111111111110000000000000000000000000000000000000000","title_slug":"k-th-symbol-in-grammar","has_notes":false,"flag_type":1,"frontend_id":243},{"id":1552751625,"question_id":795,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740311223,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1552751625/","is_pending":"Not Pending","title":"K-th Symbol in Grammar","memory":"N/A","code":"class Solution:\\n    def kthGrammar(self, n: int, k: int) -> int:\\n        ans = \\"0\\"\\n        new_ans = \\"\\"\\n        for i in range (n-1):\\n            for c in ans:\\n                if ans[i]==\'0\':\\n                    new_ans+=\\"01\\"\\n                else:\\n                    new_ans+=\\"10\\"\\n            ans=new_ans\\n            new_ans = \\"\\"\\n        return int(ans[k-1])\\n            ","compare_result":"1110011001111000000000000000000000000000000000000000000","title_slug":"k-th-symbol-in-grammar","has_notes":false,"flag_type":1,"frontend_id":242},{"id":1552748086,"question_id":795,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740310909,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1552748086/","is_pending":"Not Pending","title":"K-th Symbol in Grammar","memory":"N/A","code":"class Solution:\\n    def kthGrammar(self, n: int, k: int) -> int:\\n        ans = \\"0\\"\\n        new_ans = \\"\\"\\n        for i in range (n):\\n            for c in ans:\\n                if ans[i]==0:\\n                    new_ans+=\\"01\\"\\n                else:\\n                    new_ans+=\\"10\\"\\n            ans=new_ans\\n            new_ans = \\"\\"\\n        return int(ans[k])\\n            ","compare_result":"1111100110000110000000000000000000000000000000000000000","title_slug":"k-th-symbol-in-grammar","has_notes":false,"flag_type":1,"frontend_id":241},{"id":1552504879,"question_id":215,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740290550,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1552504879/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"28.5 MB","code":"import heapq\\nclass Solution:\\n    def findKthLargest(self, nums: List[int], k: int) -> int:\\n        hashmap = [0]*20005\\n        m = 10000\\n        for num in nums:\\n            hashmap[num+10000]+=1\\n        j = 0\\n        for i in range(20001,-1,-1):\\n            while hashmap[i]!=0:\\n                if j == k - 1:\\n                    return i - m\\n                hashmap[i]-=1\\n                j+=1\\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1,"frontend_id":240},{"id":1551833299,"question_id":27,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740239142,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1551833299/","is_pending":"Not Pending","title":"Remove Element","memory":"17.7 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        total = 0\\n        i = j = 0\\n        while j<len(nums):\\n            if nums[j]!=val:\\n                nums[i]=nums[j]\\n                i+=1\\n                total+=1\\n            j+=1\\n        return total\\n        \\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":239},{"id":1551382775,"question_id":1567,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740202693,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/1551382775/","is_pending":"Not Pending","title":"Maximum Number of Vowels in a Substring of Given Length","memory":"18.3 MB","code":"class Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        ans = 0\\n        current = 0\\n        vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'}\\n        for i in range (len(s)):\\n            if s[i] in vowels:\\n                current+=1\\n            if i>=k-1:\\n                ans = max(current,ans)\\n                if s[i-k+1] in vowels:\\n                    current-=1\\n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-vowels-in-a-substring-of-given-length","has_notes":false,"flag_type":1,"frontend_id":238},{"id":1551380840,"question_id":1567,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740202546,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1551380840/","is_pending":"Not Pending","title":"Maximum Number of Vowels in a Substring of Given Length","memory":"17.9 MB","code":"class Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        ans = 0\\n        current = 0\\n        vowels = \\"aeiou\\"\\n        for i in range (len(s)):\\n            if s[i] in vowels:\\n                current+=1\\n            if i>=k-1:\\n                ans = max(current,ans)\\n                if s[i-k+1] in vowels:\\n                    current-=1\\n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-vowels-in-a-substring-of-given-length","has_notes":false,"flag_type":1,"frontend_id":237},{"id":1551125256,"question_id":2836,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740171174,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1551125256/","is_pending":"Not Pending","title":"Neither Minimum nor Maximum","memory":"17.8 MB","code":"class Solution:\\n    def findNonMinOrMax(self, nums: List[int]) -> int:\\n        highest = max(nums)\\n        lowest = min(nums)\\n        for num in nums:\\n            if num!=highest and num!=lowest:\\n                return num\\n        return -1","compare_resulttitle_slug":"neither-minimum-nor-maximum","has_notes":false,"flag_type":1,"frontend_id":236},{"id":1551123367,"question_id":414,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740170969,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1551123367/","is_pending":"Not Pending","title":"Third Maximum Number","memory":"18.5 MB","code":"class Solution:\\n    def thirdMax(self, nums: List[int]) -> int:\\n        n1 = float(\'-inf\')\\n        for num in nums:\\n            if num>n1:\\n                n1 = num\\n        n2 = float(\'-inf\')\\n        for num in nums:\\n            if num>n2 and num<n1:\\n                n2 = num\\n        n3 = float(\'-inf\')\\n        for num in nums:\\n            if num>n3 and num<n2:\\n                n3 = num\\n        if n3 == float(\'-inf\'):\\n            return n1\\n        return n3","compare_result":"1111111111111111111111111111111111","title_slug":"third-maximum-number","has_notes":false,"flag_type":1,"frontend_id":235},{"id":1550401471,"question_id":1951,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740116991,"status":10,"status_display":"Accepted","runtime":"881 ms","url":"/submissions/detail/1550401471/","is_pending":"Not Pending","title":"Find the Winner of the Circular Game","memory":"18 MB","code":"class Solution:\\n    def findTheWinner(self, n: int, k: int) -> int:\\n        lst = [1] * n\\n        current_pos = 0\\n        for i in range(n - 1):\\n            count = 0\\n            while count < k:\\n                if lst[current_pos] == 1:\\n                    count += 1\\n                if count == k:\\n                    lst[current_pos] = 0\\n                    break\\n                current_pos = (current_pos + 1) % n\\n        for i in range(n):\\n            if lst[i] == 1:\\n                return i + 1\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-winner-of-the-circular-game","has_notes":false,"flag_type":1,"frontend_id":234},{"id":1549635459,"question_id":932,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1740056318,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/1549635459/","is_pending":"Not Pending","title":"Monotonic Array","memory":"28.9 MB","code":"class Solution:\\n    def isMonotonic(self, nums: List[int]) -> bool:\\n        check_dec = 0\\n        check_inc = 0\\n        for i in range (len(nums)-1):\\n            if nums[i]<nums[i+1]:\\n                check_dec += 1\\n            if nums[i]>nums[i+1]:\\n                check_inc += 1\\n        if check_dec == 0 or check_inc == 0:\\n            return True\\n        return False\\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"monotonic-array","has_notes":false,"flag_type":1,"frontend_id":233},{"id":1549211565,"question_id":2107,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1740024884,"status":10,"status_display":"Accepted","runtime":"876 ms","url":"/submissions/detail/1549211565/","is_pending":"Not Pending","title":"Find Unique Binary String","memory":"26.1 MB","code":"class Solution:\\n    def findDifferentBinaryString(self, nums: List[str]) -> str:\\n        n = len(nums[0])\\n        hashmap = {}\\n        for i in range(2**n):\\n            hashmap[format(i, f\'0{n}b\')]=0\\n        for num in nums:\\n            hashmap[num]+=1\\n        for key in hashmap:\\n            if hashmap[key]==0:\\n                return key\\n    \\n\\n\\n        \\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-unique-binary-string","has_notes":false,"flag_type":1,"frontend_id":232},{"id":1548670646,"question_id":3501,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739979911,"status":10,"status_display":"Accepted","runtime":"200 ms","url":"/submissions/detail/1548670646/","is_pending":"Not Pending","title":"Delete Nodes From Linked List Present in Array","memory":"61.8 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def modifiedList(self, nums: List[int], head: Optional[ListNode]) -> Optional[ListNode]:\\n        lst = [0]*100001\\n        for num in nums:\\n            lst[num]+=1\\n        ret_dummy = dummy = ListNode(0)\\n        current = head\\n        while current:\\n            if lst[current.val]==0:\\n                new_node = ListNode(current.val)\\n                dummy.next = new_node\\n                dummy = dummy.next\\n            current = current.next\\n        return ret_dummy.next","compare_resulttitle_slug":"delete-nodes-from-linked-list-present-in-array","has_notes":false,"flag_type":1,"frontend_id":231},{"id":1548670535,"question_id":3501,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739979904,"status":10,"status_display":"Accepted","runtime":"197 ms","url":"/submissions/detail/1548670535/","is_pending":"Not Pending","title":"Delete Nodes From Linked List Present in Array","memory":"61.9 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def modifiedList(self, nums: List[int], head: Optional[ListNode]) -> Optional[ListNode]:\\n        lst = [0]*100001\\n        for num in nums:\\n            lst[num]+=1\\n        ret_dummy = dummy = ListNode(0)\\n        current = head\\n        while current:\\n            if lst[current.val]==0:\\n                new_node = ListNode(current.val)\\n                dummy.next = new_node\\n                dummy = dummy.next\\n            current = current.next\\n        return ret_dummy.next","compare_resulttitle_slug":"delete-nodes-from-linked-list-present-in-array","has_notes":false,"flag_type":1,"frontend_id":230},{"id":1548647291,"question_id":3501,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739978452,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1548647291/","is_pending":"Not Pending","title":"Delete Nodes From Linked List Present in Array","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def modifiedList(self, nums: List[int], head: Optional[ListNode]) -> Optional[ListNode]:\\n        ret_dummy = dummy = ListNode(0)\\n        current = head\\n        while current:\\n            if current.val not in nums:\\n                new_node = ListNode(current.val)\\n                dummy.next = new_node\\n                dummy = dummy.next\\n            current = current.next\\n        return ret_dummy.next","compare_resulttitle_slug":"delete-nodes-from-linked-list-present-in-array","has_notes":false,"flag_type":1,"frontend_id":229},{"id":1548641462,"question_id":203,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739978071,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1548641462/","is_pending":"Not Pending","title":"Remove Linked List Elements","memory":"21 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\\n        ret_dummy = dummy = ListNode(0)\\n        current = head\\n        while current:\\n            if current.val != val:\\n                new_node = ListNode(current.val)\\n                dummy.next = new_node\\n                dummy = dummy.next\\n            current = current.next\\n        return ret_dummy.next\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-linked-list-elements","has_notes":false,"flag_type":1,"frontend_id":228}],"has_next":true,"last_key":""}'
2025-07-04 16:21:43,908 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:43,910 [INFO] __main__.py:245 - Writing base-7/2025-02-24 14.46.08 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:21:43,911 [INFO] __main__.py:188 - Skipping base-7 2025-02-24 14.45.25 because its status is 'Wrong Answer'
2025-07-04 16:21:43,911 [INFO] __main__.py:245 - Writing find-the-winner-of-the-circular-game/2025-02-24 12.00.06 - Accepted - runtime 4ms - memory 18MB.py
2025-07-04 16:21:44,620 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:44,622 [INFO] __main__.py:245 - Writing k-th-symbol-in-grammar/2025-02-23 18.27.26 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:21:44,622 [INFO] __main__.py:188 - Skipping k-th-symbol-in-grammar 2025-02-23 17.54.06 because its status is 'Time Limit Exceeded'
2025-07-04 16:21:44,622 [INFO] __main__.py:188 - Skipping k-th-symbol-in-grammar 2025-02-23 17.47.03 because its status is 'Wrong Answer'
2025-07-04 16:21:44,623 [INFO] __main__.py:188 - Skipping k-th-symbol-in-grammar 2025-02-23 17.41.49 because its status is 'Wrong Answer'
2025-07-04 16:21:45,049 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:45,051 [INFO] __main__.py:245 - Writing kth-largest-element-in-an-array/2025-02-23 12.02.30 - Accepted - runtime 40ms - memory 28.5MB.py
2025-07-04 16:21:45,972 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:45,974 [INFO] __main__.py:245 - Writing remove-element/2025-02-22 21.45.42 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:21:46,390 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:46,391 [INFO] __main__.py:245 - Writing maximum-number-of-vowels-in-a-substring-of-given-length/2025-02-22 11.38.13 - Accepted - runtime 94ms - memory 18.3MB.py
2025-07-04 16:21:46,392 [INFO] __main__.py:245 - Writing maximum-number-of-vowels-in-a-substring-of-given-length/2025-02-22 11.35.46 - Accepted - runtime 83ms - memory 17.9MB.py
2025-07-04 16:21:46,810 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:46,812 [INFO] __main__.py:245 - Writing neither-minimum-nor-maximum/2025-02-22 02.52.54 - Accepted - runtime 11ms - memory 17.8MB.py
2025-07-04 16:21:47,274 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:47,276 [INFO] __main__.py:245 - Writing third-maximum-number/2025-02-22 02.49.29 - Accepted - runtime 0ms - memory 18.5MB.py
2025-07-04 16:21:47,277 [INFO] __main__.py:245 - Writing find-the-winner-of-the-circular-game/2025-02-21 11.49.51 - Accepted - runtime 881ms - memory 18MB.py
2025-07-04 16:21:47,735 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:47,737 [INFO] __main__.py:245 - Writing monotonic-array/2025-02-20 18.58.38 - Accepted - runtime 76ms - memory 28.9MB.py
2025-07-04 16:21:48,170 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:48,172 [INFO] __main__.py:245 - Writing find-unique-binary-string/2025-02-20 10.14.44 - Accepted - runtime 876ms - memory 26.1MB.py
2025-07-04 16:21:48,590 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:48,601 [INFO] __main__.py:245 - Writing delete-nodes-from-linked-list-present-in-array/2025-02-19 21.45.11 - Accepted - runtime 200ms - memory 61.8MB.py
2025-07-04 16:21:48,602 [INFO] __main__.py:245 - Writing delete-nodes-from-linked-list-present-in-array/2025-02-19 21.45.04 - Accepted - runtime 197ms - memory 61.9MB.py
2025-07-04 16:21:48,603 [INFO] __main__.py:188 - Skipping delete-nodes-from-linked-list-present-in-array 2025-02-19 21.20.52 because its status is 'Time Limit Exceeded'
2025-07-04 16:21:49,796 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:49,798 [INFO] __main__.py:245 - Writing remove-linked-list-elements/2025-02-19 21.14.31 - Accepted - runtime 4ms - memory 21MB.py
2025-07-04 16:21:54,799 [DEBUG] leetcode.py:150 - Exporting submissions from 120 to 140
2025-07-04 16:21:55,273 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=120&limit=20 HTTP/1.1" 200 None
2025-07-04 16:21:55,293 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1548400168,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739959934,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1548400168/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"17.7 MB","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = 0\\n        while i < len(s) and s[i] == \' \':\\n            i += 1\\n        if i == len(s):\\n            return 0\\n        sign = 1\\n        if s[i] == \'-\':\\n            sign = -1\\n            i += 1\\n        elif s[i] == \'+\':\\n            i += 1\\n        total = 0\\n        while i < len(s) and \'0\' <= s[i] <= \'9\':\\n            total = total * 10 + (ord(s[i]) - ord(\'0\'))\\n            i += 1\\n        total *= sign\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total < INT_MIN:\\n            return INT_MIN\\n        if total > INT_MAX:\\n            return INT_MAX\\n        return total\\n","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":227},{"id":1548395495,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739959563,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1548395495/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"18 MB","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        if len(s)==0:\\n            return 0\\n        for j in range (len(s)):\\n            if s[j]==\\" \\":\\n                continue\\n            else:\\n                break\\n        i = j\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        elif s[i]==\\"+\\":\\n            sign = 1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        flag = 0\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    flag = 1\\n                    main_number.append(s[i])\\n                else:\\n                    if flag==1:\\n                        main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total * sign < INT_MIN:\\n            return INT_MIN\\n        elif total * sign > INT_MAX:\\n            return INT_MAX\\n        else:\\n            return total * sign","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":226},{"id":1548394374,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739959480,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1548394374/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        for i in range (len(s)):\\n            if s[i]==\\" \\":\\n                continue\\n            else:\\n                break\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        elif s[i]==\\"+\\":\\n            sign = 1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        flag = 0\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    flag = 1\\n                    main_number.append(s[i])\\n                else:\\n                    if flag==1:\\n                        main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total * sign < INT_MIN:\\n            return INT_MIN\\n        elif total * sign > INT_MAX:\\n            return INT_MAX\\n        else:\\n            return total * sign","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":225},{"id":1548391549,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739959252,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1548391549/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = 0\\n        if len(s)==0:\\n            return 0\\n        while s[i]==\\" \\":\\n            i+=1\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        elif s[i]==\\"+\\":\\n            sign = 1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        flag = 0\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    flag = 1\\n                    main_number.append(s[i])\\n                else:\\n                    if flag==1:\\n                        main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total * sign < INT_MIN:\\n            return INT_MIN\\n        elif total * sign > INT_MAX:\\n            return INT_MAX\\n        else:\\n            return total * sign","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":224},{"id":1548388252,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739959000,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1548388252/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = 0\\n        if len(s)==0:\\n            return 0\\n        while s[i]==\\" \\":\\n            i+=1\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        elif s[i]==\\"+\\":\\n            sign = 1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total * sign < INT_MIN:\\n            return INT_MIN\\n        elif total * sign > INT_MAX:\\n            return INT_MAX\\n        else:\\n            return total * sign","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":223},{"id":1548386831,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739958892,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1548386831/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = 0\\n        if len(s)==0:\\n            return 0\\n        while s[i]==\\" \\":\\n            i+=1\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total * sign < INT_MIN:\\n            return INT_MIN\\n        elif total * sign > INT_MAX:\\n            return INT_MAX\\n        else:\\n            return total * sign","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":222},{"id":1548386277,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739958849,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1548386277/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = 0\\n        while s[i]==\\" \\":\\n            i+=1\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        INT_MIN = -2**31\\n        INT_MAX = 2**31 - 1\\n        if total * sign < INT_MIN:\\n            return INT_MIN\\n        elif total * sign > INT_MAX:\\n            return INT_MAX\\n        else:\\n            return total * sign","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":221},{"id":1548384370,"question_id":8,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739958705,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1548384370/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = 0\\n        while s[i]==\\" \\":\\n            i+=1\\n        sign = 0\\n        if s[i]==\\"-\\":\\n            sign = -1\\n            i+=1\\n        else:\\n            sign = 1\\n        numbers=\\"0123456789\\"\\n        main_number = []\\n        while i<len(s):\\n            if s[i] in numbers:\\n                if s[i] != \\"0\\":\\n                    main_number.append(s[i])\\n            else:\\n                break\\n            i+=1\\n        total = 0\\n        for i in range (len(main_number)):\\n            total = total*10 + int(main_number[i])\\n        return total*sign","compare_result":"111111011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":220},{"id":1547272140,"question_id":445,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739874313,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1547272140/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"18.1 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        node1 = None\\n        while l1:\\n            temp = l1.next\\n            l1.next = node1\\n            node1 = l1\\n            l1 = temp\\n        node2= None\\n        while l2:\\n            temp = l2.next\\n            l2.next = node2\\n            node2 = l2\\n            l2 = temp\\n        carry = 0\\n        ans = None\\n        while node1 or node2 or carry:\\n            total = carry\\n            if node1:\\n                total+=node1.val\\n                node1 = node1.next\\n            if node2:\\n                total+=node2.val\\n                node2 = node2.next\\n            new_node = ListNode(total%10)\\n            carry = total//10\\n            new_node.next = ans\\n            ans = new_node\\n        return ans","compare_resulttitle_slug":"add-two-numbers-ii","has_notes":false,"flag_type":1,"frontend_id":219},{"id":1547114445,"question_id":400,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739862584,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1547114445/","is_pending":"Not Pending","title":"Nth Digit","memory":"N/A","code":"class Solution:\\n    def findNthDigit(self, n: int) -> int:\\n        string = \\"\\"\\n        for i in range (1,1000000):\\n            string+=str(i)\\n        return int(string[n-1])","compare_result":"11111111111111111111111111111111111000000000000000000000000000000000000","title_slug":"nth-digit","has_notes":false,"flag_type":1,"frontend_id":218},{"id":1547113987,"question_id":400,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739862551,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1547113987/","is_pending":"Not Pending","title":"Nth Digit","memory":"N/A","code":"class Solution:\\n    def findNthDigit(self, n: int) -> int:\\n        string = \\"\\"\\n        for i in range (1,100001):\\n            string+=str(i)\\n        return int(string[n-1])","compare_result":"11111111111111111111111111111111110000000000000000000000000000000000000","title_slug":"nth-digit","has_notes":false,"flag_type":1,"frontend_id":217},{"id":1547071788,"question_id":148,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739859900,"status":10,"status_display":"Accepted","runtime":"230 ms","url":"/submissions/detail/1547071788/","is_pending":"Not Pending","title":"Sort List","memory":"33.1 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nfrom sortedcontainers import SortedList\\nclass Solution:\\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        lst = SortedList()\\n        current = head\\n        while current:\\n            lst.add(current.val)\\n            current= current.next\\n        current = head\\n        i = 0\\n        while current:\\n            current.val = lst[i]\\n            i+=1\\n            current= current.next\\n        return head","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1,"frontend_id":216},{"id":1546948246,"question_id":142,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739852027,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/1546948246/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"19.9 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        s =  set()\\n        current = head\\n        while current:\\n            if current in s:\\n                return current\\n            s.add(current)\\n            current = current.next\\n        return None\\n","compare_result":"111111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1,"frontend_id":215},{"id":1546937603,"question_id":141,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739851242,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/1546937603/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"20.4 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\\n        s =  set()\\n        current = head\\n        while current:\\n            if current in s:\\n                return True\\n            s.add(current)\\n            current = current.next\\n        return False\\n            ","compare_result":"11111111111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1,"frontend_id":214},{"id":1546930576,"question_id":141,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739850704,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1546930576/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\\n        s =  set()\\n        current = head\\n        while current:\\n            if current.next == None:\\n                return False\\n            if current.next not in s:\\n                s.add(current.next)\\n            else:\\n                return True\\n            ","compare_result":"11111101110111011001000000000","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1,"frontend_id":213},{"id":1546926995,"question_id":141,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739850418,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1546926995/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"19.8 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\\n        current = head\\n        i = 0\\n        while current:\\n            if i>10000:\\n                return True\\n            if current.next == None:\\n                return False\\n            i+=1\\n            current=current.next\\n        return False","compare_result":"11111111111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1,"frontend_id":212},{"id":1546126534,"question_id":2608,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739790482,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1546126534/","is_pending":"Not Pending","title":"Count the Digits That Divide a Number","memory":"17.6 MB","code":"class Solution:\\n    def countDigits(self, num: int) -> int:\\n        total=0\\n        str_num = str(num)\\n        for n in str_num:\\n            if num%int(n)==0:\\n                total+=1\\n        return total","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"count-the-digits-that-divide-a-number","has_notes":false,"flag_type":1,"frontend_id":211},{"id":1546117550,"question_id":507,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739789743,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1546117550/","is_pending":"Not Pending","title":"Perfect Number","memory":"18 MB","code":"class Solution:\\n    def checkPerfectNumber(self, num: int) -> bool:\\n        if num<=1:\\n            return False\\n        total = 1\\n        for i in range(2, int(num ** 0.5) + 1):\\n            if num % i == 0:\\n                total += i\\n                if i != num // i:\\n                    total += num // i\\n        return num == total\\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"perfect-number","has_notes":false,"flag_type":1,"frontend_id":210},{"id":1544874889,"question_id":528,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739694604,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1544874889/","is_pending":"Not Pending","title":"Swapping Nodes in a Linked List","memory":"40.2 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\\n        n = 0\\n        current = head\\n        while current:\\n            n+=1\\n            current = current.next\\n        current = head\\n        for i in range (n):\\n            if i == k - 1:\\n                n1 = current\\n            if i == n-k:\\n                n2 = current\\n            current = current.next\\n        temp = n1.val\\n        n1.val = n2.val\\n        n2.val = temp\\n        return head\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"swapping-nodes-in-a-linked-list","has_notes":false,"flag_type":1,"frontend_id":209},{"id":1543944063,"question_id":3723,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739630431,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1543944063/","is_pending":"Not Pending","title":"Sum of Good Numbers","memory":"18 MB","code":"class Solution:\\n    def sumOfGoodNumbers(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        total = 0\\n        for i in range(n):\\n            if i - k >= 0 and i + k < n:\\n                if nums[i] > nums[i - k] and nums[i] > nums[i + k]:\\n                    total += nums[i]\\n            elif i - k < 0 and i + k >= n:\\n                total += nums[i]\\n            elif i - k >= 0 and i + k >= n:\\n                if nums[i] > nums[i - k]:\\n                    total += nums[i]\\n            elif i - k < 0 and i + k < n:\\n                if nums[i] > nums[i + k]:\\n                    total += nums[i]\\n        return total","compare_resulttitle_slug":"sum-of-good-numbers","has_notes":false,"flag_type":1,"frontend_id":208}],"has_next":true,"last_key":""}'
2025-07-04 16:21:55,727 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:55,728 [INFO] __main__.py:245 - Writing string-to-integer-atoi/2025-02-19 16.12.14 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:21:55,729 [INFO] __main__.py:245 - Writing string-to-integer-atoi/2025-02-19 16.06.03 - Accepted - runtime 5ms - memory 18MB.py
2025-07-04 16:21:55,729 [INFO] __main__.py:188 - Skipping string-to-integer-atoi 2025-02-19 16.04.40 because its status is 'Runtime Error'
2025-07-04 16:21:55,730 [INFO] __main__.py:188 - Skipping string-to-integer-atoi 2025-02-19 16.00.52 because its status is 'Runtime Error'
2025-07-04 16:21:55,730 [INFO] __main__.py:188 - Skipping string-to-integer-atoi 2025-02-19 15.56.40 because its status is 'Wrong Answer'
2025-07-04 16:21:55,730 [INFO] __main__.py:188 - Skipping string-to-integer-atoi 2025-02-19 15.54.52 because its status is 'Wrong Answer'
2025-07-04 16:21:55,730 [INFO] __main__.py:188 - Skipping string-to-integer-atoi 2025-02-19 15.54.09 because its status is 'Runtime Error'
2025-07-04 16:21:55,730 [INFO] __main__.py:188 - Skipping string-to-integer-atoi 2025-02-19 15.51.45 because its status is 'Wrong Answer'
2025-07-04 16:21:56,151 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:56,152 [INFO] __main__.py:245 - Writing add-two-numbers-ii/2025-02-18 16.25.13 - Accepted - runtime 2ms - memory 18.1MB.py
2025-07-04 16:21:56,153 [INFO] __main__.py:188 - Skipping nth-digit 2025-02-18 13.09.44 because its status is 'Runtime Error'
2025-07-04 16:21:56,153 [INFO] __main__.py:188 - Skipping nth-digit 2025-02-18 13.09.11 because its status is 'Runtime Error'
2025-07-04 16:21:56,576 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:56,578 [INFO] __main__.py:245 - Writing sort-list/2025-02-18 12.25.00 - Accepted - runtime 230ms - memory 33.1MB.py
2025-07-04 16:21:57,182 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:57,183 [INFO] __main__.py:245 - Writing linked-list-cycle-ii/2025-02-18 10.13.47 - Accepted - runtime 54ms - memory 19.9MB.py
2025-07-04 16:21:57,617 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:57,619 [INFO] __main__.py:245 - Writing linked-list-cycle/2025-02-18 10.00.42 - Accepted - runtime 58ms - memory 20.4MB.py
2025-07-04 16:21:57,619 [INFO] __main__.py:188 - Skipping linked-list-cycle 2025-02-18 09.51.44 because its status is 'Wrong Answer'
2025-07-04 16:21:57,619 [INFO] __main__.py:245 - Writing linked-list-cycle/2025-02-18 09.46.58 - Accepted - runtime 56ms - memory 19.8MB.py
2025-07-04 16:21:58,201 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:58,203 [INFO] __main__.py:245 - Writing count-the-digits-that-divide-a-number/2025-02-17 17.08.02 - Accepted - runtime 0ms - memory 17.6MB.py
2025-07-04 16:21:58,702 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:58,703 [INFO] __main__.py:245 - Writing perfect-number/2025-02-17 16.55.43 - Accepted - runtime 7ms - memory 18MB.py
2025-07-04 16:21:59,495 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:59,496 [INFO] __main__.py:245 - Writing swapping-nodes-in-a-linked-list/2025-02-16 14.30.04 - Accepted - runtime 83ms - memory 40.2MB.py
2025-07-04 16:21:59,908 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:21:59,910 [INFO] __main__.py:245 - Writing sum-of-good-numbers/2025-02-15 20.40.31 - Accepted - runtime 7ms - memory 18MB.py
2025-07-04 16:22:04,911 [DEBUG] leetcode.py:150 - Exporting submissions from 140 to 160
2025-07-04 16:22:05,379 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=140&limit=20 HTTP/1.1" 200 None
2025-07-04 16:22:05,394 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1543934769,"question_id":3723,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739630186,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1543934769/","is_pending":"Not Pending","title":"Sum of Good Numbers","memory":"N/A","code":"class Solution:\\n    def sumOfGoodNumbers(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        total = 0\\n        for i in range(n):\\n            if i-k>=0 and i+k<=n-1:\\n                if nums[i]>nums[i-k] and nums[i]>nums[i+k]:\\n                    total+=nums[i]\\n            elif i-k<0 and i+k>n-1:\\n                total+=nums[i]\\n            elif i-k>0 and i+k>n-1:\\n                if nums[i]>nums[i-k]:\\n                    total+=nums[i]\\n            elif i-k<0 and i+k<=n-1:\\n                if nums[i]>nums[i+k]:\\n                    total+=nums[i]\\n        return total","compare_resulttitle_slug":"sum-of-good-numbers","has_notes":false,"flag_type":1,"frontend_id":207},{"id":1543740655,"question_id":2216,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739615004,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1543740655/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"49.4 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n = 0\\n        current = head\\n        while current:\\n            n+=1\\n            current= current.next\\n        if n == 1:\\n            return None\\n        n=n//2\\n        current = head\\n        for i in range (n-1):\\n            current = current.next\\n        current.next = current.next.next\\n        return head\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false,"flag_type":1,"frontend_id":206},{"id":1543740182,"question_id":2216,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739614966,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1543740182/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n = 0\\n        current = head\\n        while current:\\n            n+=1\\n            current= current.next\\n        n=n//2\\n        current = head\\n        for i in range (n-1):\\n            current = current.next\\n        current.next = current.next.next\\n        return head\\n","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false,"flag_type":1,"frontend_id":205},{"id":1543692863,"question_id":2,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739611062,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1543692863/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"17.6 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        total = carry = 0\\n        ans = ListNode()\\n        ret_ans = ans\\n        while l1 or l2 or carry:\\n            total = carry\\n            if l1:\\n                total+=l1.val\\n                l1=l1.next\\n            if l2:\\n                total+=l2.val\\n                l2 = l2.next\\n            ans.next = ListNode(total%10)\\n            carry = total//10\\n            ans = ans.next\\n        return ret_ans.next","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"flag_type":1,"frontend_id":204},{"id":1543678872,"question_id":2871,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739609899,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/1543678872/","is_pending":"Not Pending","title":"Double a Number Represented as a Linked List","memory":"20.3 MB","code":"class Solution:\\n    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        number = []\\n        current = head\\n        while current:\\n            number.append(current.val)\\n            current = current.next\\n        number.reverse()\\n        carry = 0\\n        for i in range(len(number)):\\n            number[i] = number[i] * 2 + carry\\n            if number[i] >= 10:\\n                number[i] %= 10\\n                carry = 1\\n            else:\\n                carry = 0\\n        if carry:\\n            number.append(1)\\n        current = head\\n        i = 0\\n        number.reverse()\\n        while current:\\n            current.val = number[i]\\n            i += 1\\n            current = current.next\\n        if i < len(number):\\n            new_node = ListNode(number[i])\\n            current = head\\n            while current and current.next:\\n                current = current.next\\n            current.next = new_node\\n        return head\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"double-a-number-represented-as-a-linked-list","has_notes":false,"flag_type":1,"frontend_id":203},{"id":1543553562,"question_id":2802,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739599866,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1543553562/","is_pending":"Not Pending","title":"Find the Punishment Number of an Integer","memory":"17.8 MB","code":"class Solution:\\n    def punishmentNumber(self, n: int) -> int:\\n        ans = 0\\n        lst = [1, 9, 10, 36, 45, 55, 82, 91, 99, 100, 235, 297, 369, 370, 379, 414, 657, 675, 703, 756, 792, 909,918, 945, 964, 990, 991, 999, 1000]\\n        for num in lst:\\n            if num<=n:\\n                ans+=num*num\\n            else:\\n                break\\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-punishment-number-of-an-integer","has_notes":false,"flag_type":1,"frontend_id":202},{"id":1542579631,"question_id":1477,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739513026,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1542579631/","is_pending":"Not Pending","title":"Product of the Last K Numbers","memory":"31.6 MB","code":"class ProductOfNumbers:\\n\\n    def __init__(self):\\n        self.product=[1]\\n        self.n=1\\n\\n    def add(self, num: int) -> None:\\n        if num==0:\\n            self.product=[1]\\n            self.n=1\\n        else:\\n            self.product.append(self.product[-1]*num)\\n            self.n+=1\\n\\n    def getProduct(self, k: int) -> int:\\n        if self.n<=k:\\n            return 0\\n        else:\\n            return self.product[-1]//self.product[-k-1]\\n# Your ProductOfNumbers object will be instantiated and called as such:\\n# obj = ProductOfNumbers()\\n# obj.add(num)\\n# param_2 = obj.getProduct(k)","compare_result":"111111111111111111111111111111111","title_slug":"product-of-the-last-k-numbers","has_notes":false,"flag_type":1,"frontend_id":201},{"id":1542017675,"question_id":1411,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739467016,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1542017675/","is_pending":"Not Pending","title":"Convert Binary Number in a Linked List to Integer","memory":"17.9 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def getDecimalValue(self, head: Optional[ListNode]) -> int:\\n        ans = 0\\n        length = 0\\n        current = head\\n        while current:\\n            length+=1\\n            current=current.next\\n        current = head\\n        for i in range (length-1,-1,-1):\\n            if current.val == 1:\\n                ans += pow(2,i)\\n            current = current.next\\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"convert-binary-number-in-a-linked-list-to-integer","has_notes":false,"flag_type":1,"frontend_id":200},{"id":1541945626,"question_id":19,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739463622,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1541945626/","is_pending":"Not Pending","title":"Remove Nth Node From End of List","memory":"17.9 MB","code":"class Solution:\\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\\n        length = 0\\n        current = head\\n        while current:\\n            length += 1\\n            current = current.next\\n        if length == n:\\n            return head.next\\n        d = length - n\\n        current = head\\n        for i in range(d - 1):\\n            current = current.next\\n        current.next = current.next.next\\n        \\n        return head\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-nth-node-from-end-of-list","has_notes":false,"flag_type":1,"frontend_id":199},{"id":1541691944,"question_id":1827,"lang":"mysql","lang_name":"MySQL","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739448211,"status":10,"status_display":"Accepted","runtime":"1851 ms","url":"/submissions/detail/1541691944/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"# Write your MySQL query statement below\\nSELECT tweet_id\\nFROM Tweets\\nWHERE LENGTH(content)>15;","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":198},{"id":1541689408,"question_id":1258,"lang":"mysql","lang_name":"MySQL","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739448002,"status":10,"status_display":"Accepted","runtime":"424 ms","url":"/submissions/detail/1541689408/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"# Write your MySQL query statement below\\nSELECT distinct author_id as id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id ASC;","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":197},{"id":1541685362,"question_id":595,"lang":"mysql","lang_name":"MySQL","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739447671,"status":10,"status_display":"Accepted","runtime":"450 ms","url":"/submissions/detail/1541685362/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"# Write your MySQL query statement below\\nSELECT name,population,area\\nFROM World\\nWHERE population >= 25000000\\nor area >= 3000000;","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":196},{"id":1541682623,"question_id":584,"lang":"mysql","lang_name":"MySQL","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739447444,"status":10,"status_display":"Accepted","runtime":"2003 ms","url":"/submissions/detail/1541682623/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"# Write your MySQL query statement below\\nSELECT name\\nFROM Customer\\nWHERE referee_id!=2 OR referee_id IS NULL;","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":195},{"id":1541679198,"question_id":1908,"lang":"mysql","lang_name":"MySQL","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739447158,"status":10,"status_display":"Accepted","runtime":"894 ms","url":"/submissions/detail/1541679198/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"# Write your MySQL query statement below\\nSELECT product_id\\nFROM Products\\nWHERE low_fats=\'Y\' and recyclable=\'Y\';","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":194},{"id":1541496904,"question_id":3332,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739434572,"status":10,"status_display":"Accepted","runtime":"199 ms","url":"/submissions/detail/1541496904/","is_pending":"Not Pending","title":"Minimum Operations to Exceed Threshold Value II","memory":"35.4 MB","code":"class Solution:\\n    def minOperations(self, nums: List[int], k: int) -> int:\\n        heapify(nums)\\n        ans = 0\\n        while nums[0]<k:\\n            heappush(nums, 2*heappop(nums) + heappop(nums))\\n            ans += 1\\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-exceed-threshold-value-ii","has_notes":false,"flag_type":1,"frontend_id":193},{"id":1540819629,"question_id":237,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739383581,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1540819629/","is_pending":"Not Pending","title":"Delete Node in a Linked List","memory":"17.9 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \\"\\"\\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \\"\\"\\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n            \\n        ","compare_result":"11111111111111111111111111111111111111111","title_slug":"delete-node-in-a-linked-list","has_notes":false,"flag_type":1,"frontend_id":192},{"id":1540745807,"question_id":908,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739380020,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1540745807/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"17.7 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        length = 0\\n        current = head\\n        while current:\\n            length+=1\\n            current=current.next\\n        middle= length//2+1\\n        current = head\\n        it = 1\\n        while current:\\n            if it == middle:\\n                return current\\n            it+=1\\n            current=current.next\\n        \\n        ","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list","has_notes":false,"flag_type":1,"frontend_id":191},{"id":1540672366,"question_id":206,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739376283,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1540672366/","is_pending":"Not Pending","title":"Reverse Linked List","memory":"18.6 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        node = None\\n        while head:\\n            temp = head.next\\n            head.next = node\\n            node = head\\n            head = temp\\n        return node","compare_result":"1111111111111111111111111111","title_slug":"reverse-linked-list","has_notes":false,"flag_type":1,"frontend_id":190},{"id":1540241388,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739346726,"status":10,"status_display":"Accepted","runtime":"3118 ms","url":"/submissions/detail/1540241388/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"48 MB","code":"class Solution:\\n    def minimumArea(self, grid: List[List[int]]) -> int:\\n        top, bottom, left, right = (\\n            float(\\"inf\\"),\\n            -float(\\"inf\\"),\\n            float(\\"inf\\"),\\n            -float(\\"inf\\"),\\n        )\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                if grid[i][j] == 1:\\n                    top = min(top, i)\\n                    bottom = max(bottom, i)\\n                    left = min(left, j)\\n                    right = max(right, j)\\n        return (right - left + 1) * (bottom - top + 1)\\n","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":189},{"id":1540055865,"question_id":1469,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739335735,"status":10,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/1540055865/","is_pending":"Not Pending","title":"Minimum Number of Steps to Make Two Strings Anagram","memory":"18.2 MB","code":"class Solution:\\n    def minSteps(self, s: str, t: str) -> int:\\n        total = 0\\n        lst1 = [0]*26\\n        lst2 = [0]*26\\n        for c in s:\\n            lst1[ord(c)-ord(\'a\')]+=1\\n        for c in t:\\n            lst2[ord(c)-ord(\'a\')]+=1\\n        for i in range (26):\\n            total += abs(lst1[i]-lst2[i])\\n        return total//2","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-steps-to-make-two-strings-anagram","has_notes":false,"flag_type":1,"frontend_id":188}],"has_next":true,"last_key":""}'
2025-07-04 16:22:05,395 [INFO] __main__.py:188 - Skipping sum-of-good-numbers 2025-02-15 20.36.26 because its status is 'Wrong Answer'
2025-07-04 16:22:06,103 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:06,104 [INFO] __main__.py:245 - Writing delete-the-middle-node-of-a-linked-list/2025-02-15 16.23.24 - Accepted - runtime 62ms - memory 49.4MB.py
2025-07-04 16:22:06,105 [INFO] __main__.py:188 - Skipping delete-the-middle-node-of-a-linked-list 2025-02-15 16.22.46 because its status is 'Runtime Error'
2025-07-04 16:22:06,521 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:06,522 [INFO] __main__.py:245 - Writing add-two-numbers/2025-02-15 15.17.42 - Accepted - runtime 7ms - memory 17.6MB.py
2025-07-04 16:22:06,911 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:06,913 [INFO] __main__.py:245 - Writing double-a-number-represented-as-a-linked-list/2025-02-15 14.58.19 - Accepted - runtime 88ms - memory 20.3MB.py
2025-07-04 16:22:07,741 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:07,743 [INFO] __main__.py:245 - Writing find-the-punishment-number-of-an-integer/2025-02-15 12.11.06 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:22:08,158 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:08,160 [INFO] __main__.py:245 - Writing product-of-the-last-k-numbers/2025-02-14 12.03.46 - Accepted - runtime 39ms - memory 31.6MB.py
2025-07-04 16:22:08,564 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:08,565 [INFO] __main__.py:245 - Writing convert-binary-number-in-a-linked-list-to-integer/2025-02-13 23.16.56 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:09,057 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:09,058 [INFO] __main__.py:245 - Writing remove-nth-node-from-end-of-list/2025-02-13 22.20.22 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:09,456 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:09,458 [INFO] __main__.py:245 - Writing invalid-tweets/2025-02-13 18.03.31 - Accepted - runtime 1851ms - memory 0.0B.sql
2025-07-04 16:22:09,859 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:09,860 [INFO] __main__.py:245 - Writing article-views-i/2025-02-13 18.00.02 - Accepted - runtime 424ms - memory 0.0B.sql
2025-07-04 16:22:10,256 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:10,258 [INFO] __main__.py:245 - Writing big-countries/2025-02-13 17.54.31 - Accepted - runtime 450ms - memory 0.0B.sql
2025-07-04 16:22:10,734 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:10,735 [INFO] __main__.py:245 - Writing find-customer-referee/2025-02-13 17.50.44 - Accepted - runtime 2003ms - memory 0.0B.sql
2025-07-04 16:22:11,185 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:11,186 [INFO] __main__.py:245 - Writing recyclable-and-low-fat-products/2025-02-13 17.45.58 - Accepted - runtime 894ms - memory 0.0B.sql
2025-07-04 16:22:11,587 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:11,588 [INFO] __main__.py:245 - Writing minimum-operations-to-exceed-threshold-value-ii/2025-02-13 14.16.12 - Accepted - runtime 199ms - memory 35.4MB.py
2025-07-04 16:22:12,010 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:12,011 [INFO] __main__.py:245 - Writing delete-node-in-a-linked-list/2025-02-13 00.06.21 - Accepted - runtime 47ms - memory 17.9MB.py
2025-07-04 16:22:12,419 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:12,421 [INFO] __main__.py:245 - Writing middle-of-the-linked-list/2025-02-12 23.07.00 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:22:12,826 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:12,828 [INFO] __main__.py:245 - Writing reverse-linked-list/2025-02-12 22.04.43 - Accepted - runtime 0ms - memory 18.6MB.py
2025-07-04 16:22:13,214 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:13,216 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-02-12 13.52.06 - Accepted - runtime 3118ms - memory 48MB.py
2025-07-04 16:22:13,860 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:13,861 [INFO] __main__.py:245 - Writing minimum-number-of-steps-to-make-two-strings-anagram/2025-02-12 10.48.55 - Accepted - runtime 116ms - memory 18.2MB.py
2025-07-04 16:22:18,862 [DEBUG] leetcode.py:150 - Exporting submissions from 160 to 180
2025-07-04 16:22:19,561 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=160&limit=20 HTTP/1.1" 200 None
2025-07-04 16:22:19,573 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1540039815,"question_id":2473,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739334764,"status":10,"status_display":"Accepted","runtime":"518 ms","url":"/submissions/detail/1540039815/","is_pending":"Not Pending","title":"Max Sum of a Pair With Equal Sum of Digits","memory":"32.6 MB","code":"from collections import defaultdict\\nclass Solution:\\n    def maximumSum(self, nums: List[int]) -> int:\\n        hashmap = defaultdict(list)\\n        for num in nums:\\n            digit_sum = sum(int(digit) for digit in str(num))\\n            hashmap[digit_sum].append(num)\\n        ans = -1\\n        for key, value in hashmap.items():\\n            if len(value) > 1:\\n                max1, max2 = float(\'-inf\'), float(\'-inf\')\\n                for num in value:\\n                    if num > max1:\\n                        max2 = max1\\n                        max1 = num\\n                    elif num > max2:\\n                        max2 = num\\n                ans = max(ans, max1 + max2)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"max-sum-of-a-pair-with-equal-sum-of-digits","has_notes":false,"flag_type":1,"frontend_id":187},{"id":1540032783,"question_id":2473,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739334323,"status":10,"status_display":"Accepted","runtime":"799 ms","url":"/submissions/detail/1540032783/","is_pending":"Not Pending","title":"Max Sum of a Pair With Equal Sum of Digits","memory":"33.4 MB","code":"from collections import defaultdict\\nfrom sortedcontainers import SortedList\\nclass Solution:\\n    def maximumSum(self, nums: List[int]) -> int:\\n        hashmap = defaultdict(SortedList)\\n        for i in range (len(nums)):\\n            digit_sum = sum(int(digit) for digit in str(nums[i]))\\n            hashmap[digit_sum].add(nums[i])\\n        ans = -1\\n        for key, value in (hashmap.items()):\\n            if len(value) > 1:\\n                ans = max(sum(value[-2:]),ans)\\n        return ans\\n\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"max-sum-of-a-pair-with-equal-sum-of-digits","has_notes":false,"flag_type":1,"frontend_id":186},{"id":1538788664,"question_id":2021,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739244984,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1538788664/","is_pending":"Not Pending","title":"Remove All Occurrences of a Substring","memory":"17.8 MB","code":"class Solution:\\n    def removeOccurrences(self, s: str, part: str) -> str:\\n        stack = []\\n        part_len = len(part)\\n\\n        for char in s:\\n            stack.append(char)\\n            if (\\n                len(stack) >= part_len\\n                and \\"\\".join(stack[len(stack) - part_len : len(stack)]) == part\\n            ):\\n                del stack[len(stack) - part_len : len(stack)]\\n\\n        return \\"\\".join(stack)\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-all-occurrences-of-a-substring","has_notes":false,"flag_type":1,"frontend_id":185},{"id":1538043106,"question_id":389,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739189067,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1538043106/","is_pending":"Not Pending","title":"Find the Difference","memory":"17.9 MB","code":"class Solution:\\n    def findTheDifference(self, s: str, t: str) -> str:\\n        list_s = [0]*26\\n        list_t = [0]*26\\n        for c in s:\\n            list_s[ord(c)-ord(\'a\')]+=1\\n        for c in t:\\n            list_t[ord(c)-ord(\'a\')]+=1\\n        for i in range (26):\\n            if list_s[i]!=list_t[i]:\\n                return chr(ord(\'a\') + i)","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-difference","has_notes":false,"flag_type":1,"frontend_id":184},{"id":1537975328,"question_id":1538,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739183357,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1537975328/","is_pending":"Not Pending","title":"Maximum Points You Can Obtain from Cards","memory":"N/A","code":"class Solution:\\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\\n        left = 0\\n        right = 0\\n        for i in range (k):\\n            left+=cardPoints[i]\\n        for i in range (len(cardPoints)-1,len(cardPoints)-k-1,-1):\\n            right+=cardPoints[i]\\n        return max(left,right)","compare_result":"1111100101000000100001100000010000000000","title_slug":"maximum-points-you-can-obtain-from-cards","has_notes":false,"flag_type":1,"frontend_id":183},{"id":1537961714,"question_id":2212,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739182326,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1537961714/","is_pending":"Not Pending","title":"Removing Minimum and Maximum From Array","memory":"29.1 MB","code":"class Solution:\\n    def minimumDeletions(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        min_index = nums.index(min(nums))\\n        max_index = nums.index(max(nums))\\n        if min_index > max_index:\\n            min_index, max_index = max_index, min_index\\n        left_removals = max_index + 1\\n        right_removals = n - min_index\\n        left_right_removals = (min_index + 1) + (n - max_index)\\n\\n        return min(left_removals, right_removals, left_right_removals)\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"removing-minimum-and-maximum-from-array","has_notes":false,"flag_type":1,"frontend_id":182},{"id":1537958881,"question_id":2212,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739182116,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1537958881/","is_pending":"Not Pending","title":"Removing Minimum and Maximum From Array","memory":"N/A","code":"class Solution:\\n    def minimumDeletions(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        min_index = nums.index(min(nums))\\n        max_index = nums.index(max(nums))\\n        total_left_operations = min(min_index,max_index) + 1 + max(min_index,max_index) - min(min_index,max_index)\\n        total_right_operations = n - min_index + n - max_index + n - max(min_index,max_index)\\n        left_right_operations =  min(min_index,max_index) + 1 + n - max(min_index,max_index)\\n        return min(total_left_operations,total_right_operations,left_right_operations)","compare_result":"11111111110101111101110011011101010110111111111011010111111010","title_slug":"removing-minimum-and-maximum-from-array","has_notes":false,"flag_type":1,"frontend_id":181},{"id":1537802921,"question_id":3447,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739170530,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1537802921/","is_pending":"Not Pending","title":"Clear Digits","memory":"17.6 MB","code":"class Solution:\\n    def clearDigits(self, s: str) -> str:\\n        stack = []\\n        digits = \\"0123456789\\"\\n        for c in s:\\n            if c in digits:\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(c)\\n        return \\"\\".join(stack)\\n            \\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"clear-digits","has_notes":false,"flag_type":1,"frontend_id":180},{"id":1536722659,"question_id":2448,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739086415,"status":10,"status_display":"Accepted","runtime":"87 ms","url":"/submissions/detail/1536722659/","is_pending":"Not Pending","title":"Count Number of Bad Pairs","memory":"38.8 MB","code":"class Solution:\\n    def countBadPairs(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        hashmap = {}\\n        total = 0\\n        for i in range (len(nums)):\\n            if nums[i]-i not in hashmap:\\n                hashmap[nums[i]-i]=1\\n            else:\\n                hashmap[nums[i]-i]+=1\\n        for key in hashmap:\\n            count = hashmap[key]\\n            total += (count * (count - 1)) // 2\\n        return (n * (n - 1)) // 2 - total","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-number-of-bad-pairs","has_notes":false,"flag_type":1,"frontend_id":179},{"id":1535832635,"question_id":53,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1739022439,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1535832635/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"32.9 MB","code":"class Solution:\\n    def maxSubArray(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        total = 0\\n        ans = float(\'-inf\')\\n        for i in range (n):\\n            total+=nums[i]\\n            ans = max(total,ans)\\n            if total<0:\\n                total = 0\\n        return ans\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray","has_notes":false,"flag_type":1,"frontend_id":178},{"id":1534998872,"question_id":2492,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738949529,"status":10,"status_display":"Accepted","runtime":"247 ms","url":"/submissions/detail/1534998872/","is_pending":"Not Pending","title":"Length of the Longest Alphabetical Continuous Substring","memory":"17.9 MB","code":"class Solution:\\n    def longestContinuousSubstring(self, s: str) -> int:\\n        ans = 1\\n        length = 1\\n        for i in range(len(s)-1):\\n            if ord(s[i])+1 == ord(s[i + 1]):\\n                length+=1\\n            else:\\n                ans = max(length,ans)\\n                length = 1\\n        ans = max(length,ans)\\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"length-of-the-longest-alphabetical-continuous-substring","has_notes":false,"flag_type":1,"frontend_id":177},{"id":1534911184,"question_id":2355,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738944753,"status":10,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/1534911184/","is_pending":"Not Pending","title":"Maximum Consecutive Floors Without Special Floors","memory":"31.5 MB","code":"class Solution:\\n    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:\\n        lst = sorted(special)\\n        ans = lst[0]-bottom\\n        for i in range (1,len(lst)):\\n            ans = max(ans,lst[i]-lst[i-1]-1)\\n        ans = max(ans,top-lst[len(lst)-1])\\n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-consecutive-floors-without-special-floors","has_notes":false,"flag_type":1,"frontend_id":176},{"id":1534897559,"question_id":2278,"lang":"cpp","lang_name":"C++","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738943965,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1534897559/","is_pending":"Not Pending","title":"Find Three Consecutive Integers That Sum to a Given Number","memory":"8.5 MB","code":"class Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long int i,j,k;\\n        j = num/3;\\n        i = j-1;\\n        k = j+1;\\n        vector<long long int>v;\\n        if (i+j+k == num){\\n            v.push_back(i);\\n            v.push_back(j);\\n            v.push_back(k);\\n            return v;\\n        }\\n        return v;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-three-consecutive-integers-that-sum-to-a-given-number","has_notes":false,"flag_type":1,"frontend_id":175},{"id":1534892987,"question_id":2278,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738943690,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1534892987/","is_pending":"Not Pending","title":"Find Three Consecutive Integers That Sum to a Given Number","memory":"17.9 MB","code":"class Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        j = num // 3\\n        i = j - 1\\n        k = j + 1\\n        if i+j+k == num:\\n            return [i,j,k]\\n        return []","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-three-consecutive-integers-that-sum-to-a-given-number","has_notes":false,"flag_type":1,"frontend_id":174},{"id":1534644546,"question_id":1844,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738925264,"status":10,"status_display":"Accepted","runtime":"521 ms","url":"/submissions/detail/1534644546/","is_pending":"Not Pending","title":"Maximum Number of Balls in a Box","memory":"18.7 MB","code":"class Solution:\\n    def countBalls(self, lowLimit: int, highLimit: int) -> int:\\n        def sum_of_digits(n):\\n            return sum(int(digit) for digit in str(n))\\n        lst = [0]*100010\\n        for i in range(lowLimit,highLimit+1):\\n            lst[sum_of_digits(i)]+=1\\n        return max(lst)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-balls-in-a-box","has_notes":false,"flag_type":1,"frontend_id":173},{"id":1534630783,"question_id":3434,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738924155,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/1534630783/","is_pending":"Not Pending","title":"Find the Number of Distinct Colors Among the Balls","memory":"68.5 MB","code":"from collections import Counter\\nclass Solution:\\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\\n        total = set()\\n        freq = Counter()\\n        lst = {}\\n        ans = []\\n        for query in queries:\\n            index, value = query\\n            if index in lst:\\n                old_value = lst[index]\\n                freq[old_value] -= 1\\n                if freq[old_value] == 0:\\n                    total.remove(old_value)\\n            lst[index] = value\\n            freq[value] += 1\\n            if freq[value] == 1:\\n                total.add(value)\\n            ans.append(len(total))\\n        return ans\\n","compare_resulttitle_slug":"find-the-number-of-distinct-colors-among-the-balls","has_notes":false,"flag_type":1,"frontend_id":172},{"id":1534624709,"question_id":3434,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738923684,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1534624709/","is_pending":"Not Pending","title":"Find the Number of Distinct Colors Among the Balls","memory":"N/A","code":"from collections import defaultdict\\nclass Solution:\\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\\n        total = set()\\n        freq = defaultdict(int)\\n        lst = [0] * (limit + 1)\\n        ans = []\\n        for query in queries:\\n            index, value = query\\n            if lst[index] != 0:\\n                old_value = lst[index]\\n                freq[old_value] -= 1\\n                if freq[old_value] == 0:\\n                    total.remove(old_value)\\n            lst[index] = value\\n            freq[value] += 1\\n            if freq[value] == 1:\\n                total.add(value)\\n            ans.append(len(total))\\n        return ans\\n","compare_resulttitle_slug":"find-the-number-of-distinct-colors-among-the-balls","has_notes":false,"flag_type":1,"frontend_id":171},{"id":1534616176,"question_id":3434,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738923043,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1534616176/","is_pending":"Not Pending","title":"Find the Number of Distinct Colors Among the Balls","memory":"N/A","code":"class Solution:\\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\\n        total = set()\\n        lst = [0]*(limit+1)\\n        ans = []\\n        for query in queries:\\n            if lst[query[0]]!=0:\\n                total.remove(lst[query[0]])\\n                total.add(query[1])\\n                lst[query[0]]=query[1]\\n            else:\\n                lst[query[0]]=query[1]\\n                total.add(query[1])\\n            ans.append(len(total))\\n        return ans\\n            \\n","compare_result":"11111101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-the-number-of-distinct-colors-among-the-balls","has_notes":false,"flag_type":1,"frontend_id":170},{"id":1534608611,"question_id":3434,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738922493,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1534608611/","is_pending":"Not Pending","title":"Find the Number of Distinct Colors Among the Balls","memory":"N/A","code":"class Solution:\\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\\n        total = set()\\n        lst = [0]*(limit+1)\\n        ans = []\\n        for query in queries:\\n            if lst[query[0]]!=0:\\n                total.remove(lst[query[0]])\\n                total.add(query[1])\\n            else:\\n                lst[query[0]]=query[1]\\n                total.add(query[1])\\n            ans.append(len(total))\\n        return ans\\n            \\n","compare_resulttitle_slug":"find-the-number-of-distinct-colors-among-the-balls","has_notes":false,"flag_type":1,"frontend_id":169},{"id":1533338572,"question_id":1364,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1738829577,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1533338572/","is_pending":"Not Pending","title":"Tuple with Same Product","memory":"46.3 MB","code":"from typing import List\\n\\nclass Solution:\\n    def tupleSameProduct(self, nums: List[int]) -> int:\\n        dict_pairprod = {}\\n        total = 0\\n        \\n        for i in range(len(nums)):\\n            for j in range(i + 1, len(nums)):\\n                product = nums[i] * nums[j]\\n                if product not in dict_pairprod:\\n                    dict_pairprod[product] = 0\\n                dict_pairprod[product] += 1\\n        for key in dict_pairprod:\\n            if dict_pairprod[key] > 1:\\n                total += (dict_pairprod[key] * (dict_pairprod[key] - 1)) * 4\\n        return total\\n","compare_result":"1111111111111111111111111111111111111","title_slug":"tuple-with-same-product","has_notes":false,"flag_type":1,"frontend_id":168}],"has_next":true,"last_key":""}'
2025-07-04 16:22:19,986 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:19,988 [INFO] __main__.py:245 - Writing max-sum-of-a-pair-with-equal-sum-of-digits/2025-02-12 10.32.44 - Accepted - runtime 518ms - memory 32.6MB.py
2025-07-04 16:22:19,989 [INFO] __main__.py:245 - Writing max-sum-of-a-pair-with-equal-sum-of-digits/2025-02-12 10.25.23 - Accepted - runtime 799ms - memory 33.4MB.py
2025-07-04 16:22:20,387 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:20,389 [INFO] __main__.py:245 - Writing remove-all-occurrences-of-a-substring/2025-02-11 09.36.24 - Accepted - runtime 16ms - memory 17.8MB.py
2025-07-04 16:22:20,823 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:20,825 [INFO] __main__.py:245 - Writing find-the-difference/2025-02-10 18.04.27 - Accepted - runtime 3ms - memory 17.9MB.py
2025-07-04 16:22:20,825 [INFO] __main__.py:188 - Skipping maximum-points-you-can-obtain-from-cards 2025-02-10 16.29.17 because its status is 'Wrong Answer'
2025-07-04 16:22:21,252 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:21,253 [INFO] __main__.py:245 - Writing removing-minimum-and-maximum-from-array/2025-02-10 16.12.06 - Accepted - runtime 25ms - memory 29.1MB.py
2025-07-04 16:22:21,254 [INFO] __main__.py:188 - Skipping removing-minimum-and-maximum-from-array 2025-02-10 16.08.36 because its status is 'Wrong Answer'
2025-07-04 16:22:21,689 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:21,691 [INFO] __main__.py:245 - Writing clear-digits/2025-02-10 12.55.30 - Accepted - runtime 1ms - memory 17.6MB.py
2025-07-04 16:22:22,137 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:22,139 [INFO] __main__.py:245 - Writing count-number-of-bad-pairs/2025-02-09 13.33.35 - Accepted - runtime 87ms - memory 38.8MB.py
2025-07-04 16:22:22,577 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:22,579 [INFO] __main__.py:245 - Writing maximum-subarray/2025-02-08 19.47.19 - Accepted - runtime 62ms - memory 32.9MB.py
2025-07-04 16:22:22,968 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:22,970 [INFO] __main__.py:245 - Writing length-of-the-longest-alphabetical-continuous-substring/2025-02-07 23.32.09 - Accepted - runtime 247ms - memory 17.9MB.py
2025-07-04 16:22:23,469 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:23,470 [INFO] __main__.py:245 - Writing maximum-consecutive-floors-without-special-floors/2025-02-07 22.12.33 - Accepted - runtime 124ms - memory 31.5MB.py
2025-07-04 16:22:23,899 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:23,900 [INFO] __main__.py:245 - Writing find-three-consecutive-integers-that-sum-to-a-given-number/2025-02-07 21.59.25 - Accepted - runtime 0ms - memory 8.5MB.cpp
2025-07-04 16:22:23,901 [INFO] __main__.py:245 - Writing find-three-consecutive-integers-that-sum-to-a-given-number/2025-02-07 21.54.50 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:24,311 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:24,313 [INFO] __main__.py:245 - Writing maximum-number-of-balls-in-a-box/2025-02-07 16.47.44 - Accepted - runtime 521ms - memory 18.7MB.py
2025-07-04 16:22:24,730 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:24,731 [INFO] __main__.py:245 - Writing find-the-number-of-distinct-colors-among-the-balls/2025-02-07 16.29.15 - Accepted - runtime 111ms - memory 68.5MB.py
2025-07-04 16:22:24,732 [INFO] __main__.py:188 - Skipping find-the-number-of-distinct-colors-among-the-balls 2025-02-07 16.21.24 because its status is 'Memory Limit Exceeded'
2025-07-04 16:22:24,732 [INFO] __main__.py:188 - Skipping find-the-number-of-distinct-colors-among-the-balls 2025-02-07 16.10.43 because its status is 'Wrong Answer'
2025-07-04 16:22:24,733 [INFO] __main__.py:188 - Skipping find-the-number-of-distinct-colors-among-the-balls 2025-02-07 16.01.33 because its status is 'Runtime Error'
2025-07-04 16:22:25,338 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:25,340 [INFO] __main__.py:245 - Writing tuple-with-same-product/2025-02-06 14.12.57 - Accepted - runtime 392ms - memory 46.3MB.py
2025-07-04 16:22:30,341 [DEBUG] leetcode.py:150 - Exporting submissions from 180 to 200
2025-07-04 16:22:30,853 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=180&limit=20 HTTP/1.1" 200 None
2025-07-04 16:22:30,866 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1533326351,"question_id":1364,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1738828604,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1533326351/","is_pending":"Not Pending","title":"Tuple with Same Product","memory":"N/A","code":"class Solution:\\n    def tupleSameProduct(self, nums: List[int]) -> int:\\n        dict_pairprod = {}\\n        total = 0\\n        for i in range (len(nums)):\\n            for j in range(i+1,len(nums)):\\n                if (i * j) not in dict_pairprod:\\n                    dict_pairprod[i * j] = 0\\n                dict_pairprod[i*j]+=1\\n        for key in dict_pairprod:\\n            if dict_pairprod[key] > 1:\\n                per_total = 8\\n                for i in range (3,dict_pairprod[key]):\\n                    per_total*=2\\n                total+=per_total\\n        return total","compare_result":"1100000000000000000000000000000000000","title_slug":"tuple-with-same-product","has_notes":false,"flag_type":1,"frontend_id":167},{"id":1531859758,"question_id":1915,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1738731299,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1531859758/","is_pending":"Not Pending","title":"Check if One String Swap Can Make Strings Equal","memory":"17.7 MB","code":"class Solution:\\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\\n        lst_s1 = [0]*26\\n        lst_s2 = [0]*26\\n        total_diff = 0\\n        for i in range (len(s1)):\\n            lst_s1[ord(s1[i])-ord(\'a\')]+=1\\n            lst_s2[ord(s2[i])-ord(\'a\')]+=1\\n            if s1[i]!=s2[i]:\\n                total_diff+=1\\n        if lst_s1!=lst_s2 or total_diff>2:\\n            return False\\n        return True\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-one-string-swap-can-make-strings-equal","has_notes":false,"flag_type":1,"frontend_id":166},{"id":1530775878,"question_id":1019,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738656375,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1530775878/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"19.8 MB","code":"class Solution:\\n    def sortedSquares(self, nums: List[int]) -> List[int]:\\n        lst = [0]*10005\\n        ans = []\\n        for i in range (len(nums)):\\n            nums[i]=abs(nums[i])\\n        limit = max(nums)+1\\n        for num in nums:\\n            num = abs(num)\\n            lst[num]+=1\\n        for i in range (limit):\\n            while lst[i]!=0:\\n                ans.append(i*i)\\n                lst[i]-=1\\n        return ans\\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"squares-of-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":165},{"id":1530774357,"question_id":1019,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738656263,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1530774357/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"N/A","code":"class Solution:\\n    def sortedSquares(self, nums: List[int]) -> List[int]:\\n        lst = [0]*10005\\n        ans = []\\n        limit = abs(max(nums))+1\\n        for num in nums:\\n            num = abs(num)\\n            lst[num]+=1\\n        for i in range (limit):\\n            while lst[i]!=0:\\n                ans.append(i*i)\\n                lst[i]-=1\\n        return ans\\n            ","compare_result":"11111111111011011111111101110101110111100111110101011101110100110100111111010110111001000100010111011011100011101110111100110110100111001","title_slug":"squares-of-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":164},{"id":1530772683,"question_id":1019,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738656137,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1530772683/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"N/A","code":"class Solution:\\n    def sortedSquares(self, nums: List[int]) -> List[int]:\\n        lst = [0]*10005\\n        ans = []\\n        limit = max(nums)+1\\n        for num in nums:\\n            num = abs(num)\\n            lst[num]+=1\\n        for i in range (limit):\\n            while lst[i]!=0:\\n                ans.append(i*i)\\n                lst[i]-=1\\n        return ans\\n            ","compare_result":"11111011101011011111111101110101110111100111110101011101110100110100111111010110111001000100010111011011100011101110111100110110100111001","title_slug":"squares-of-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":163},{"id":1530771148,"question_id":1019,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738656024,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1530771148/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"19.4 MB","code":"class Solution:\\n    def sortedSquares(self, nums: List[int]) -> List[int]:\\n        lst = [0]*10005\\n        ans = []\\n        for num in nums:\\n            num = abs(num)\\n            lst[num]+=1\\n        for i in range (10005):\\n            while lst[i]!=0:\\n                ans.append(i*i)\\n                lst[i]-=1\\n        return ans\\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"squares-of-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":162},{"id":1530763571,"question_id":88,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738655467,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1530763571/","is_pending":"Not Pending","title":"Merge Sorted Array","memory":"17.8 MB","code":"class Solution:\\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\\n        merged_list = []\\n        i,j = 0,0\\n        while i<m and j<n:\\n            if nums1[i]<nums2[j]:\\n                merged_list.append(nums1[i])\\n                i+=1\\n            else:\\n                merged_list.append(nums2[j])\\n                j+=1\\n        while i<m:\\n            merged_list.append(nums1[i])\\n            i+=1\\n        while j<n:\\n            merged_list.append(nums2[j])\\n            j+=1\\n        for i in range (m+n):\\n            nums1[i]=merged_list[i]\\n        \\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"merge-sorted-array","has_notes":false,"flag_type":1,"frontend_id":161},{"id":1530759771,"question_id":4,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738655173,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1530759771/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"18 MB","code":"from typing import List\\n\\nclass Solution:\\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\\n        m = len(nums1)\\n        n = len(nums2)\\n        merged = []\\n        i = 0\\n        j = 0\\n        while i < m and j < n:\\n            if nums1[i] < nums2[j]:\\n                merged.append(nums1[i])\\n                i += 1\\n            else:\\n                merged.append(nums2[j])\\n                j += 1\\n        while i < m:\\n            merged.append(nums1[i])\\n            i += 1\\n        while j<n:\\n            merged.append(nums2[j])\\n            j += 1\\n        \\n        o = len(merged)\\n        if o % 2 == 0:\\n            return (merged[o // 2] + merged[o // 2 - 1]) / 2\\n        else:\\n            return merged[o // 2]","compare_resulttitle_slug":"median-of-two-sorted-arrays","has_notes":false,"flag_type":1,"frontend_id":160},{"id":1530513297,"question_id":1927,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738640523,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1530513297/","is_pending":"Not Pending","title":"Maximum Ascending Subarray Sum","memory":"17.9 MB","code":"class Solution:\\n    def maxAscendingSum(self, nums: List[int]) -> int:\\n        max_sum = nums[0]\\n        current_sum = nums[0]\\n        for i in range (len(nums)-1):\\n            if nums[i]<nums[i+1]:\\n                current_sum+=nums[i+1]\\n            else:\\n                max_sum = max(max_sum,current_sum)\\n                current_sum = nums[i+1]\\n            max_sum = max(max_sum,current_sum)\\n        return max_sum","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-ascending-subarray-sum","has_notes":false,"flag_type":1,"frontend_id":159},{"id":1530512892,"question_id":1927,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738640491,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1530512892/","is_pending":"Not Pending","title":"Maximum Ascending Subarray Sum","memory":"N/A","code":"class Solution:\\n    def maxAscendingSum(self, nums: List[int]) -> int:\\n        max_sum = 0\\n        current_sum = nums[0]\\n        for i in range (len(nums)-1):\\n            if nums[i]<nums[i+1]:\\n                current_sum+=nums[i+1]\\n            else:\\n                max_sum = max(max_sum,current_sum)\\n                current_sum = nums[i+1]\\n            max_sum = max(max_sum,current_sum)\\n        return max_sum","compare_result":"11110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100111111","title_slug":"maximum-ascending-subarray-sum","has_notes":false,"flag_type":1,"frontend_id":158},{"id":1529519249,"question_id":3372,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738568836,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1529519249/","is_pending":"Not Pending","title":"Longest Strictly Increasing or Strictly Decreasing Subarray","memory":"17.9 MB","code":"class Solution:\\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:\\n        ans = 0\\n        current_longest = 1\\n        for i in range (len(nums)-1):\\n            if nums[i]<nums[i+1]:\\n                current_longest+=1\\n            else:\\n                ans = max(current_longest,ans)\\n                current_longest = 1\\n        ans = max(current_longest,ans)\\n        current_longest = 1\\n        for i in range (len(nums)-1):\\n            if nums[i]>nums[i+1]:\\n                current_longest+=1\\n            else:\\n                ans = max(current_longest,ans)\\n                current_longest = 1\\n        ans = max(current_longest,ans)\\n        return ans","compare_resulttitle_slug":"longest-strictly-increasing-or-strictly-decreasing-subarray","has_notes":false,"flag_type":1,"frontend_id":157},{"id":1528437534,"question_id":1878,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738484815,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1528437534/","is_pending":"Not Pending","title":"Check if Array Is Sorted and Rotated","memory":"17.6 MB","code":"class Solution:\\n    def check(self, nums: List[int]) -> bool:\\n        n = len(nums)\\n        disjoint = 0\\n        for i in range (n):\\n            if nums[i]>nums[(i+1)%n]:\\n                disjoint+=1\\n        if disjoint>1:\\n            return False\\n        else:\\n            return True","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-array-is-sorted-and-rotated","has_notes":false,"flag_type":1,"frontend_id":156},{"id":1528320560,"question_id":48,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738476575,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1528320560/","is_pending":"Not Pending","title":"Rotate Image","memory":"17.9 MB","code":"class Solution:\\n    def rotate(self, matrix: List[List[int]]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify matrix in-place instead.\\n        \\"\\"\\"\\n        from typing import List\\n\\nclass Solution:\\n    def rotate(self, matrix: List[List[int]]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify matrix in-place instead.\\n        \\"\\"\\"\\n        n = len(matrix)\\n        for i in range(n):\\n            for j in range(i+1, n):\\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\\n        for i in range(n):\\n            matrix[i].reverse()\\n","compare_result":"111111111111111111111","title_slug":"rotate-image","has_notes":false,"flag_type":1,"frontend_id":155},{"id":1528318162,"question_id":48,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738476419,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1528318162/","is_pending":"Not Pending","title":"Rotate Image","memory":"17.8 MB","code":"class Solution:\\n    def rotate(self, matrix: List[List[int]]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify matrix in-place instead.\\n        \\"\\"\\"\\n        n = len(matrix)\\n        lst = [0]*(n*n)\\n        z = 0\\n        for i in range (n):\\n            for j in range (n):\\n                lst[z]=matrix[i][j]\\n                z+=1\\n        j = n - 1\\n        k = 0\\n        for j in range (n-1,-1,-1):\\n            i = 0\\n            while i<n:\\n                matrix[i][j]=lst[k]\\n                i+=1\\n                k+=1","compare_result":"111111111111111111111","title_slug":"rotate-image","has_notes":false,"flag_type":1,"frontend_id":154},{"id":1527880352,"question_id":3094,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738440564,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1527880352/","is_pending":"Not Pending","title":"Minimum Number of Operations to Make Array Empty","memory":"35.3 MB","code":"class Solution:\\n    def minOperations(self, nums: List[int]) -> int:\\n        from collections import Counter\\n        total = 0\\n        freq = Counter(nums)\\n        for count in freq.values():\\n            if count == 1:\\n                return -1\\n        for count in freq.values():\\n            total+=count//3\\n            if count%3!=0:\\n                total+=1\\n        return total","compare_resulttitle_slug":"minimum-number-of-operations-to-make-array-empty","has_notes":false,"flag_type":1,"frontend_id":153},{"id":1527877275,"question_id":3094,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738440303,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1527877275/","is_pending":"Not Pending","title":"Minimum Number of Operations to Make Array Empty","memory":"N/A","code":"class Solution:\\n    def minOperations(self, nums: List[int]) -> int:\\n        from collections import Counter\\n        total = 0\\n        freq = Counter(nums)\\n        for count in freq.values():\\n            if count%2!=0 and count%3!=0:\\n                return -1\\n        for count in freq.values():\\n            while count>=3:\\n                count-=3\\n                total+=1\\n            while count>0:\\n                count-=2\\n                total+=1\\n        return total","compare_resulttitle_slug":"minimum-number-of-operations-to-make-array-empty","has_notes":false,"flag_type":1,"frontend_id":152},{"id":1527853682,"question_id":73,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738438385,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1527853682/","is_pending":"Not Pending","title":"Set Matrix Zeroes","memory":"18.5 MB","code":"class Solution:\\n    def setZeroes(self, matrix: List[List[int]]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify matrix in-place instead.\\n        \\"\\"\\"\\n        zero_idx = []\\n        m = len(matrix)\\n        n = len(matrix[0])\\n        for i in range (0,m):\\n            for j in range (0,n):\\n                if matrix[i][j]==0:\\n                    zero_idx.append([i,j])\\n        for val in zero_idx:\\n            i = 0\\n            j = 0\\n            while i<m:\\n                matrix[i][val[1]]=0\\n                i+=1\\n            while j<n:\\n                matrix[val[0]][j]=0\\n                j+=1\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"set-matrix-zeroes","has_notes":false,"flag_type":1,"frontend_id":151},{"id":1527518429,"question_id":3736,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738421458,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1527518429/","is_pending":"Not Pending","title":"Find Valid Pair of Adjacent Digits in String","memory":"18 MB","code":"class Solution:\\n    def findValidPair(self, s: str) -> str:\\n        lst = [0] * 10\\n        for val in s:\\n            lst[int(val)] += 1\\n        for i in range(len(s) - 1):\\n            if s[i] != s[i + 1]:\\n                if lst[int(s[i])] == int(s[i]) and lst[int(s[i + 1])] == int(s[i + 1]):\\n                    ans = s[i] + s[i + 1]\\n                    return ans\\n        return \\"\\"\\n\\n","compare_resulttitle_slug":"find-valid-pair-of-adjacent-digits-in-string","has_notes":false,"flag_type":1,"frontend_id":150},{"id":1527497146,"question_id":3736,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738420848,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1527497146/","is_pending":"Not Pending","title":"Find Valid Pair of Adjacent Digits in String","memory":"N/A","code":"class Solution:\\n    def findValidPair(self, s: str) -> str:\\n        ans =\\"\\"\\n        n = len(s)\\n        lst = [0]*10\\n        for i in range (len(s)):\\n            lst[int(s[i])]+=1\\n            if lst[int(s[i])]==int(s[i]) and s[i] not in ans:\\n                ans+=s[i]\\n            if len(ans)==2:\\n                return ans\\n        return \\"\\"\\n                \\n            ","compare_resulttitle_slug":"find-valid-pair-of-adjacent-digits-in-string","has_notes":false,"flag_type":1,"frontend_id":149},{"id":1526950981,"question_id":3427,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738376721,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/1526950981/","is_pending":"Not Pending","title":"Special Array II","memory":"46.9 MB","code":"class Solution:\\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\\n        ans = []\\n        hashmap = [0]*len(nums)\\n        for i in range (len(nums)-1):\\n            if nums[i]&1 == nums[i+1]&1:\\n                hashmap[i]+=1\\n        for i in range (1,len(hashmap)):\\n            hashmap[i]=hashmap[i]+hashmap[i-1]\\n        for query in queries:\\n            if query[0] == query[1]:\\n                ans.append(True)\\n                continue\\n            if query[0]==0:\\n                if hashmap[query[1]-1]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n            else:\\n                if hashmap[query[1]-1]-hashmap[query[0]-1]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n        return ans\\n","compare_resulttitle_slug":"special-array-ii","has_notes":false,"flag_type":1,"frontend_id":148}],"has_next":true,"last_key":""}'
2025-07-04 16:22:30,866 [INFO] __main__.py:188 - Skipping tuple-with-same-product 2025-02-06 13.56.44 because its status is 'Wrong Answer'
2025-07-04 16:22:31,353 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:31,355 [INFO] __main__.py:245 - Writing check-if-one-string-swap-can-make-strings-equal/2025-02-05 10.54.59 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:22:31,764 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:31,766 [INFO] __main__.py:245 - Writing squares-of-a-sorted-array/2025-02-04 14.06.15 - Accepted - runtime 19ms - memory 19.8MB.py
2025-07-04 16:22:31,766 [INFO] __main__.py:188 - Skipping squares-of-a-sorted-array 2025-02-04 14.04.23 because its status is 'Wrong Answer'
2025-07-04 16:22:31,767 [INFO] __main__.py:188 - Skipping squares-of-a-sorted-array 2025-02-04 14.02.17 because its status is 'Wrong Answer'
2025-07-04 16:22:31,767 [INFO] __main__.py:245 - Writing squares-of-a-sorted-array/2025-02-04 14.00.24 - Accepted - runtime 36ms - memory 19.4MB.py
2025-07-04 16:22:32,285 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:32,287 [INFO] __main__.py:245 - Writing merge-sorted-array/2025-02-04 13.51.07 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:22:32,808 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:32,810 [INFO] __main__.py:245 - Writing median-of-two-sorted-arrays/2025-02-04 13.46.13 - Accepted - runtime 7ms - memory 18MB.py
2025-07-04 16:22:33,222 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:33,224 [INFO] __main__.py:245 - Writing maximum-ascending-subarray-sum/2025-02-04 09.42.03 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:33,225 [INFO] __main__.py:188 - Skipping maximum-ascending-subarray-sum 2025-02-04 09.41.31 because its status is 'Wrong Answer'
2025-07-04 16:22:33,618 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:33,619 [INFO] __main__.py:245 - Writing longest-strictly-increasing-or-strictly-decreasing-subarray/2025-02-03 13.47.16 - Accepted - runtime 2ms - memory 17.9MB.py
2025-07-04 16:22:34,036 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:34,039 [INFO] __main__.py:245 - Writing check-if-array-is-sorted-and-rotated/2025-02-02 14.26.55 - Accepted - runtime 0ms - memory 17.6MB.py
2025-07-04 16:22:34,506 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:34,507 [INFO] __main__.py:245 - Writing rotate-image/2025-02-02 12.09.35 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:34,508 [INFO] __main__.py:245 - Writing rotate-image/2025-02-02 12.06.59 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:22:34,956 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:34,966 [INFO] __main__.py:245 - Writing minimum-number-of-operations-to-make-array-empty/2025-02-02 02.09.24 - Accepted - runtime 38ms - memory 35.3MB.py
2025-07-04 16:22:34,967 [INFO] __main__.py:188 - Skipping minimum-number-of-operations-to-make-array-empty 2025-02-02 02.05.03 because its status is 'Wrong Answer'
2025-07-04 16:22:35,373 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:35,374 [INFO] __main__.py:245 - Writing set-matrix-zeroes/2025-02-02 01.33.05 - Accepted - runtime 3ms - memory 18.5MB.py
2025-07-04 16:22:35,799 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:35,800 [INFO] __main__.py:245 - Writing find-valid-pair-of-adjacent-digits-in-string/2025-02-01 20.50.58 - Accepted - runtime 7ms - memory 18MB.py
2025-07-04 16:22:35,801 [INFO] __main__.py:188 - Skipping find-valid-pair-of-adjacent-digits-in-string 2025-02-01 20.40.48 because its status is 'Wrong Answer'
2025-07-04 16:22:36,208 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:36,215 [INFO] __main__.py:245 - Writing special-array-ii/2025-02-01 08.25.21 - Accepted - runtime 54ms - memory 46.9MB.py
2025-07-04 16:22:41,216 [DEBUG] leetcode.py:150 - Exporting submissions from 200 to 220
2025-07-04 16:22:41,723 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=200&limit=20 HTTP/1.1" 200 None
2025-07-04 16:22:41,730 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1526947318,"question_id":3427,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738376204,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1526947318/","is_pending":"Not Pending","title":"Special Array II","memory":"N/A","code":"class Solution:\\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\\n        ans = []\\n        hashmap = [0]*len(nums)\\n        for i in range (len(nums)-1):\\n            if nums[i]&1 == nums[i+1]&1:\\n                hashmap[i]+=1\\n        for i in range (1,len(hashmap)):\\n            hashmap[i]=hashmap[i]+hashmap[i-1]\\n        for query in queries:\\n            if query[0] == query[1]:\\n                ans.append(True)\\n                continue\\n            if query[0]==0:\\n                if hashmap[query[1]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n            else:\\n                if hashmap[query[1]]-hashmap[query[0]-1]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n        return ans\\n","compare_resulttitle_slug":"special-array-ii","has_notes":false,"flag_type":1,"frontend_id":147},{"id":1526946544,"question_id":3427,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738376098,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1526946544/","is_pending":"Not Pending","title":"Special Array II","memory":"N/A","code":"class Solution:\\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\\n        ans = []\\n        hashmap = [0]*len(nums)\\n        for i in range (len(nums)-1):\\n            if nums[i]&1 == nums[i+1]&1:\\n                hashmap[i]+=1\\n        for i in range (1,len(hashmap)):\\n            hashmap[i]=hashmap[i]+hashmap[i-1]\\n        for query in queries:\\n            if query[0] == query[1]:\\n                ans.append(True)\\n                continue\\n            if query[0]==0:\\n                if hashmap[query[1]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n            else:\\n                if hashmap[query[1]]-hashmap[query[0]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n        return ans\\n","compare_resulttitle_slug":"special-array-ii","has_notes":false,"flag_type":1,"frontend_id":146},{"id":1526945913,"question_id":3427,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738376002,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1526945913/","is_pending":"Not Pending","title":"Special Array II","memory":"N/A","code":"class Solution:\\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\\n        ans = []\\n        hashmap = [0]*len(nums)\\n        for i in range (len(nums)-1):\\n            if nums[i]&1 == nums[i+1]&1:\\n                hashmap[i]+=1\\n        for i in range (1,len(hashmap)):\\n            hashmap[i]=hashmap[i]+hashmap[i-1]\\n        for query in queries:\\n            if query[0]==0:\\n                if hashmap[query[1]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n            else:\\n                if hashmap[query[1]]-hashmap[query[0]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n        return ans\\n","compare_result":"11111111111111110101101111110111111111111111111111111111101101101100101110100011111110011111101111111111111101111111111100010011111110111111011101111111001110111111111111010111101111111111110111100111110111111101001111101111111101111111111011111101111111011111011101111010111111110111101111101111111111111111111011111000111111111111111111011001111111111111111111111111111111111001011001111111111111111111111101111110111111110011111110111101111111111101111111111111111110111111011111111111110111000110111111111010100100100000110010010000","title_slug":"special-array-ii","has_notes":false,"flag_type":1,"frontend_id":145},{"id":1526944192,"question_id":3427,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738375760,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1526944192/","is_pending":"Not Pending","title":"Special Array II","memory":"N/A","code":"class Solution:\\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\\n        ans = []\\n        hashmap = [0]*len(nums)\\n        for i in range (len(nums)-1):\\n            if nums[i]&1 == nums[i+1]&1:\\n                hashmap[i]+=1\\n        for i in range (1,len(hashmap)):\\n            hashmap[i]=hashmap[i]+hashmap[i-1]\\n        for query in queries:\\n            if hashmap[query[0]]==0:\\n                if hashmap[query[1]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n            else:\\n                if hashmap[query[1]]-hashmap[query[0]]>0:\\n                    ans.append(False)\\n                else:\\n                    ans.append(True)\\n        return ans\\n","compare_result":"11111111111010111110111001011101011011111100111110110011111110011100001111101011111110001111101111111111111101111111111100010011111110111101011101111111001110111111111111010111101111110111110111100111110111111101001111101111111101111111111011111101111111011111011101111010111111110111101111101111111111111111111011111000111111111111111111011001111111111111111111111111111111111001011001111111101111111111111101111110111111110011111110111101111111111101111111111111111110111111011111111111110111000110111111111010100100100000100010010000","title_slug":"special-array-ii","has_notes":false,"flag_type":1,"frontend_id":144},{"id":1526913410,"question_id":3429,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738371212,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1526913410/","is_pending":"Not Pending","title":"Special Array I","memory":"17.8 MB","code":"class Solution:\\n    def isArraySpecial(self, nums: List[int]) -> bool:\\n        n = len(nums)\\n        if n == 1:\\n            return True\\n        for i in range (n-1):\\n            if nums[i]&1==nums[i+1]&1:\\n                return False\\n        return True","compare_resulttitle_slug":"special-array-i","has_notes":false,"flag_type":1,"frontend_id":143},{"id":1526176991,"question_id":1586,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738306351,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1526176991/","is_pending":"Not Pending","title":"Longest Subarray of 1\'s After Deleting One Element","memory":"21.8 MB","code":"class Solution:\\n    def longestSubarray(self, nums: List[int]) -> int:\\n        i = 0\\n        count_zero = 0\\n        max_len = 0\\n        for j in range (len(nums)):\\n            if nums[j]==0:\\n                count_zero+=1\\n            while count_zero>1:\\n                if nums[i]==0:\\n                    count_zero-=1\\n                i+=1\\n            current_len = j - i\\n            if current_len>max_len:\\n                max_len=current_len\\n        return max_len","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"flag_type":1,"frontend_id":142},{"id":1526171746,"question_id":1046,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738305958,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1526171746/","is_pending":"Not Pending","title":"Max Consecutive Ones III","memory":"18.3 MB","code":"class Solution:\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\n        i = 0\\n        max_len = 0\\n        zero_count = 0\\n        for j in range(len(nums)):\\n            if nums[j] == 0:\\n                zero_count += 1\\n            while zero_count > k:\\n                if nums[i] == 0:\\n                    zero_count -= 1\\n                i += 1\\n            current_len = j - i + 1\\n            if current_len > max_len:\\n                max_len = current_len\\n        return max_len","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"max-consecutive-ones-iii","has_notes":false,"flag_type":1,"frontend_id":141},{"id":1526169329,"question_id":1046,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738305785,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1526169329/","is_pending":"Not Pending","title":"Max Consecutive Ones III","memory":"N/A","code":"class Solution:\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\n        ans = 0\\n        longest = 0\\n        countZero = 0\\n        i = 0\\n        for j in range (len(nums)):\\n            if j==len(nums)-1 and countZero<k:\\n                return len(nums)\\n            longest+=1\\n            if nums[j]==0:\\n                countZero+=1\\n            if countZero>k:\\n                ans = max(ans,longest-1)\\n                while countZero!=k:\\n                    longest-=1\\n                    if nums[i]==0:\\n                        countZero-=1\\n                    i+=1\\n        return ans\\n","compare_result":"11111000000111111101111111111111111111111111111110101101111","title_slug":"max-consecutive-ones-iii","has_notes":false,"flag_type":1,"frontend_id":140},{"id":1526168130,"question_id":1046,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738305698,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1526168130/","is_pending":"Not Pending","title":"Max Consecutive Ones III","memory":"N/A","code":"class Solution:\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\n        ans = 0\\n        longest = 0\\n        countZero = 0\\n        i = 0\\n        for j in range (len(nums)):\\n            longest+=1\\n            if nums[j]==0:\\n                countZero+=1\\n            if countZero>k:\\n                ans = max(ans,longest-1)\\n                while countZero!=k:\\n                    longest-=1\\n                    if nums[i]==0:\\n                        countZero-=1\\n                    i+=1\\n        return ans\\n","compare_result":"11110000000111111101111111111111111111101111110000000000111","title_slug":"max-consecutive-ones-iii","has_notes":false,"flag_type":1,"frontend_id":139},{"id":1526151953,"question_id":12,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738304575,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1526151953/","is_pending":"Not Pending","title":"Integer to Roman","memory":"18 MB","code":"class Solution:\\n    def intToRoman(self, num: int) -> str:\\n        symbols = [\\n            (1000, \'M\'),\\n            (900, \'CM\'),\\n            (500, \'D\'),\\n            (400, \'CD\'),\\n            (100, \'C\'),\\n            (90, \'XC\'),\\n            (50, \'L\'),\\n            (40, \'XL\'),\\n            (10, \'X\'),\\n            (9, \'IX\'),\\n            (5, \'V\'),\\n            (4, \'IV\'),\\n            (1, \'I\')\\n        ]\\n        ans = []\\n        for key,value in symbols:\\n            if num == 0:\\n                break\\n            count = num//key\\n            ans.append(value*count)\\n            num-=count*key\\n        return \'\'.join(ans)\\n","compare_resulttitle_slug":"integer-to-roman","has_notes":false,"flag_type":1,"frontend_id":138},{"id":1525500201,"question_id":724,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738250169,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1525500201/","is_pending":"Not Pending","title":"Find Pivot Index","memory":"19.2 MB","code":"class Solution:\\n    def pivotIndex(self, nums: List[int]) -> int:\\n        if len(nums)==1:\\n            return 0\\n        prefix_sum = nums.copy()\\n        postfix_sum = nums.copy()\\n        for i in range (1,len(nums)):\\n            prefix_sum[i]+=prefix_sum[i-1]\\n        for i in range (len(nums)-2,-1,-1):\\n            postfix_sum[i]+=postfix_sum[i+1]\\n        for i in range (len(nums)):\\n            if i == 0:\\n                if postfix_sum[i+1] == 0:\\n                    return i\\n            elif i == len(nums)-1:\\n                if prefix_sum[i-1]==0:\\n                    return i\\n            else:\\n                if prefix_sum[i-1]==postfix_sum[i+1]:\\n                    return i\\n        return -1\\n","compare_resulttitle_slug":"find-pivot-index","has_notes":false,"flag_type":1,"frontend_id":137},{"id":1525498937,"question_id":724,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738250086,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1525498937/","is_pending":"Not Pending","title":"Find Pivot Index","memory":"N/A","code":"class Solution:\\n    def pivotIndex(self, nums: List[int]) -> int:\\n        prefix_sum = nums.copy()\\n        postfix_sum = nums.copy()\\n        for i in range (1,len(nums)):\\n            prefix_sum[i]+=prefix_sum[i-1]\\n        for i in range (len(nums)-2,-1,-1):\\n            postfix_sum[i]+=postfix_sum[i+1]\\n        for i in range (len(nums)):\\n            if i == 0:\\n                if postfix_sum[i+1] == 0:\\n                    return i\\n            elif i == len(nums)-1:\\n                if prefix_sum[i-1]==0:\\n                    return i\\n            else:\\n                if prefix_sum[i-1]==postfix_sum[i+1]:\\n                    return i\\n        return -1\\n","compare_resulttitle_slug":"find-pivot-index","has_notes":false,"flag_type":1,"frontend_id":136},{"id":1524783226,"question_id":136,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738184561,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1524783226/","is_pending":"Not Pending","title":"Single Number","memory":"19.6 MB","code":"class Solution:\\n    def singleNumber(self, nums: List[int]) -> int:\\n        result = 0\\n        for num in nums:\\n            result^=num\\n        return result","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"single-number","has_notes":false,"flag_type":1,"frontend_id":135},{"id":1524568730,"question_id":345,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738170550,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1524568730/","is_pending":"Not Pending","title":"Reverse Vowels of a String","memory":"19.8 MB","code":"class Solution:\\n    def reverseVowels(self, s: str) -> str:\\n        list_s = list(s)\\n        vowels = \\"aeiouAEIOU\\"\\n        lst = []\\n        for i in range(len(s)):\\n            if s[i] in vowels:\\n                lst.append(i)\\n        left = 0\\n        right = len(lst) - 1\\n        while left < right:\\n            list_s[lst[left]], list_s[lst[right]] = list_s[lst[right]], list_s[lst[left]]\\n            left += 1\\n            right -= 1\\n        return \'\'.join(list_s)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-vowels-of-a-string","has_notes":false,"flag_type":1,"frontend_id":134},{"id":1524532893,"question_id":28,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738168725,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1524532893/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.9 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        n = len(haystack)\\n        for i in range (0,n-len(needle)+1):\\n            if needle == haystack[i:i+len(needle)]:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":133},{"id":1524531008,"question_id":28,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738168626,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1524531008/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        if haystack == needle:\\n            return 0\\n        n = len(haystack)\\n        for i in range (0,n-len(needle)):\\n            if needle == haystack[i:i+len(needle)]:\\n                return i\\n        return -1","compare_result":"11111011111111110101111111111110111111111101011111111111111111111111111111111110101","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":132},{"id":1524530244,"question_id":28,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738168588,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1524530244/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        n = len(haystack)\\n        for i in range (0,n-len(needle)):\\n            if needle == haystack[i:i+len(needle)]:\\n                return i\\n        return -1","compare_result":"11110011011011110101111111111110111111111101011111111111111111111111111111111110101","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":131},{"id":1523223023,"question_id":2187,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738067601,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/1523223023/","is_pending":"Not Pending","title":"Vowels of All Substrings","memory":"18 MB","code":"class Solution:\\n    def countVowels(self, word: str) -> int:\\n        vowels = \'aeiou\'\\n        total = 0\\n        for i,c in enumerate(word):\\n            if c in vowels:\\n                total+=(i + 1) * (len(word) - i)\\n        return total","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"vowels-of-all-substrings","has_notes":false,"flag_type":1,"frontend_id":130},{"id":1523220209,"question_id":2187,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738067370,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1523220209/","is_pending":"Not Pending","title":"Vowels of All Substrings","memory":"N/A","code":"class Solution:\\n    def countVowels(self, word: str) -> int:\\n        vowels = \'aeiou\'\\n        total = 0\\n        for c in word:\\n            if c in vowels:\\n                total+=1\\n        return total*len(word)","compare_result":"111010001110000100000000000000000000000000000000001","title_slug":"vowels-of-all-substrings","has_notes":false,"flag_type":1,"frontend_id":129},{"id":1523208337,"question_id":58,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months","timestamp":1738066363,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1523208337/","is_pending":"Not Pending","title":"Length of Last Word","memory":"17.6 MB","code":"class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s=s.rstrip()\\n        n = len(s)\\n        total = 0\\n        for i in range (n-1,-1,-1):\\n            if s[i] == \\" \\":\\n                break\\n            else:\\n                total+=1\\n        return total\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"length-of-last-word","has_notes":false,"flag_type":1,"frontend_id":128}],"has_next":true,"last_key":""}'
2025-07-04 16:22:41,731 [INFO] __main__.py:188 - Skipping special-array-ii 2025-02-01 08.16.44 because its status is 'Wrong Answer'
2025-07-04 16:22:41,731 [INFO] __main__.py:188 - Skipping special-array-ii 2025-02-01 08.14.58 because its status is 'Wrong Answer'
2025-07-04 16:22:41,731 [INFO] __main__.py:188 - Skipping special-array-ii 2025-02-01 08.13.22 because its status is 'Wrong Answer'
2025-07-04 16:22:41,732 [INFO] __main__.py:188 - Skipping special-array-ii 2025-02-01 08.09.20 because its status is 'Wrong Answer'
2025-07-04 16:22:42,526 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:42,528 [INFO] __main__.py:245 - Writing special-array-i/2025-02-01 06.53.32 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:22:43,013 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:43,014 [INFO] __main__.py:245 - Writing longest-subarray-of-1s-after-deleting-one-element/2025-01-31 12.52.31 - Accepted - runtime 39ms - memory 21.8MB.py
2025-07-04 16:22:43,470 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:43,471 [INFO] __main__.py:245 - Writing max-consecutive-ones-iii/2025-01-31 12.45.58 - Accepted - runtime 37ms - memory 18.3MB.py
2025-07-04 16:22:43,472 [INFO] __main__.py:188 - Skipping max-consecutive-ones-iii 2025-01-31 12.43.05 because its status is 'Wrong Answer'
2025-07-04 16:22:43,472 [INFO] __main__.py:188 - Skipping max-consecutive-ones-iii 2025-01-31 12.41.38 because its status is 'Wrong Answer'
2025-07-04 16:22:43,928 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:43,929 [INFO] __main__.py:245 - Writing integer-to-roman/2025-01-31 12.22.55 - Accepted - runtime 9ms - memory 18MB.py
2025-07-04 16:22:44,368 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:44,370 [INFO] __main__.py:245 - Writing find-pivot-index/2025-01-30 21.16.09 - Accepted - runtime 12ms - memory 19.2MB.py
2025-07-04 16:22:44,371 [INFO] __main__.py:188 - Skipping find-pivot-index 2025-01-30 21.14.46 because its status is 'Runtime Error'
2025-07-04 16:22:45,396 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:45,397 [INFO] __main__.py:245 - Writing single-number/2025-01-30 03.02.41 - Accepted - runtime 0ms - memory 19.6MB.py
2025-07-04 16:22:45,830 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:45,832 [INFO] __main__.py:245 - Writing reverse-vowels-of-a-string/2025-01-29 23.09.10 - Accepted - runtime 3ms - memory 19.8MB.py
2025-07-04 16:22:46,268 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:46,270 [INFO] __main__.py:245 - Writing find-the-index-of-the-first-occurrence-in-a-string/2025-01-29 22.38.45 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:46,271 [INFO] __main__.py:188 - Skipping find-the-index-of-the-first-occurrence-in-a-string 2025-01-29 22.37.06 because its status is 'Wrong Answer'
2025-07-04 16:22:46,271 [INFO] __main__.py:188 - Skipping find-the-index-of-the-first-occurrence-in-a-string 2025-01-29 22.36.28 because its status is 'Wrong Answer'
2025-07-04 16:22:46,817 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:46,819 [INFO] __main__.py:245 - Writing vowels-of-all-substrings/2025-01-28 18.33.21 - Accepted - runtime 55ms - memory 18MB.py
2025-07-04 16:22:46,819 [INFO] __main__.py:188 - Skipping vowels-of-all-substrings 2025-01-28 18.29.30 because its status is 'Wrong Answer'
2025-07-04 16:22:47,296 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:47,297 [INFO] __main__.py:245 - Writing length-of-last-word/2025-01-28 18.12.43 - Accepted - runtime 0ms - memory 17.6MB.py
2025-07-04 16:22:52,297 [DEBUG] leetcode.py:150 - Exporting submissions from 220 to 240
2025-07-04 16:22:52,889 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=220&limit=20 HTTP/1.1" 200 None
2025-07-04 16:22:52,904 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1521888824,"question_id":1908,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737964328,"status":10,"status_display":"Accepted","runtime":"455 ms","url":"/submissions/detail/1521888824/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"66 MB","code":"import pandas as pd\\n\\ndef find_products(products: pd.DataFrame) -> pd.DataFrame:\\n    low = products[(products[\'low_fats\']==\'Y\') & (products[\'recyclable\']==\'Y\')]\\n    return low[[\'product_id\']]","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":127},{"id":1521881198,"question_id":595,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737963659,"status":10,"status_display":"Accepted","runtime":"476 ms","url":"/submissions/detail/1521881198/","is_pending":"Not Pending","title":"Big Countries","memory":"68 MB","code":"import pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    big=world[(world[\'area\'] >= 3000000) | (world[\'population\'] >= 25000000)]\\n    return big[[\'name\',\'population\',\'area\']]\\n","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":126},{"id":1521307312,"question_id":139,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737912138,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1521307312/","is_pending":"Not Pending","title":"Word Break","memory":"N/A","code":"class Solution:\\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\\n        hash_table = {}\\n        for word in wordDict:\\n            if word not in hash_table:\\n                hash_table[word]=1\\n            else:\\n                hash_table[word]+=1\\n        for key in hash_table:\\n            if key not in s:\\n                return False\\n            else:\\n                s=s.replace(key,\\"\\")\\n        return True","compare_result":"11111100000100010111010001000001000101111110011","title_slug":"word-break","has_notes":false,"flag_type":1,"frontend_id":125},{"id":1520868090,"question_id":3422,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737877138,"status":10,"status_display":"Accepted","runtime":"5993 ms","url":"/submissions/detail/1520868090/","is_pending":"Not Pending","title":"Find the N-th Value After K Seconds","memory":"18 MB","code":"class Solution:\\n    def valueAfterKSeconds(self, n: int, k: int) -> int:\\n        mod = 1000000007\\n        lst = [1]*n\\n        for i in range (k):\\n            for j in range (1,len(lst)):\\n                lst[j]=(lst[j]%mod+lst[j-1]%mod)%mod\\n        return lst[n-1]","compare_resulttitle_slug":"find-the-n-th-value-after-k-seconds","has_notes":false,"flag_type":1,"frontend_id":124},{"id":1520865591,"question_id":3422,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737876923,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1520865591/","is_pending":"Not Pending","title":"Find the N-th Value After K Seconds","memory":"N/A","code":"class Solution:\\n    def valueAfterKSeconds(self, n: int, k: int) -> int:\\n        lst = [1]*n\\n        for i in range (k):\\n            for j in range (1,len(lst)):\\n                lst[j]=lst[j]+lst[j-1]\\n        return lst[n-1]","compare_resulttitle_slug":"find-the-n-th-value-after-k-seconds","has_notes":false,"flag_type":1,"frontend_id":123},{"id":1520151542,"question_id":1987,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737820950,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1520151542/","is_pending":"Not Pending","title":"Substrings of Size Three with Distinct Characters","memory":"17.9 MB","code":"class Solution:\\n    def countGoodSubstrings(self, s: str) -> int:\\n        total = 0\\n        char_window = []\\n        for i in range (len(s)):\\n            char_window.append(s[i])\\n            if len(char_window) > 3:\\n                char_window.pop(0)\\n            if len(char_window) == 3 and len(set(char_window)) == 3:\\n                total += 1\\n        return total\\n            \\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substrings-of-size-three-with-distinct-characters","has_notes":false,"flag_type":1,"frontend_id":122},{"id":1520055041,"question_id":219,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737813659,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1520055041/","is_pending":"Not Pending","title":"Contains Duplicate II","memory":"26.2 MB","code":"class Solution:\\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\\n        num_set = set()\\n        for i in range(len(nums)):\\n            if nums[i] in num_set:\\n                return True\\n            num_set.add(nums[i])\\n            if len(num_set) > k:\\n                num_set.remove(nums[i - k])\\n        return False\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate-ii","has_notes":false,"flag_type":1,"frontend_id":121},{"id":1519847021,"question_id":2977,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737795851,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1519847021/","is_pending":"Not Pending","title":"Check if a String Is an Acronym of Words","memory":"17.7 MB","code":"class Solution:\\n    def isAcronym(self, words: List[str], s: str) -> bool:\\n        if len(words)!=len(s):\\n            return False\\n        pointer = 0\\n        for word in words:\\n            if word[0]!=s[pointer]:\\n                return False\\n            else:\\n                pointer+=1\\n        return True","compare_resulttitle_slug":"check-if-a-string-is-an-acronym-of-words","has_notes":false,"flag_type":1,"frontend_id":120},{"id":1519208432,"question_id":75,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737735900,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1519208432/","is_pending":"Not Pending","title":"Sort Colors","memory":"17.8 MB","code":"class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        currentPointer = 0\\n        count = [0]*3\\n        for num in nums:\\n            count[num]+=1\\n        for i in range (len(nums)):\\n            while count[currentPointer]==0:\\n                currentPointer+=1\\n            nums[i]=currentPointer\\n            count[currentPointer]-=1\\n        \\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":119},{"id":1519206702,"question_id":75,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737735798,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1519206702/","is_pending":"Not Pending","title":"Sort Colors","memory":"N/A","code":"class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        currentPointer = 0\\n        count = [0]*3\\n        for num in nums:\\n            count[num]+=1\\n        for i in range (len(nums)):\\n            if count[currentPointer]==0:\\n                currentPointer+=1\\n            nums[i]=currentPointer\\n            count[currentPointer]-=1\\n        \\n        ","compare_result":"1111011011001111111111111000000111111111111111111111111111111111111111111111111111111110","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":118},{"id":1519198610,"question_id":169,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737735328,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1519198610/","is_pending":"Not Pending","title":"Majority Element","memory":"19.4 MB","code":"class Solution:\\n    def majorityElement(self, nums: List[int]) -> int:\\n        hash_set = {}\\n        for num in nums:\\n            if num not in hash_set:\\n                hash_set[num]=1\\n            else:\\n                hash_set[num]+=1\\n        for key in hash_set:\\n            if hash_set[key]>(len(nums)//2):\\n                return key\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1518291415,"question_id":268,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737656859,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1518291415/","is_pending":"Not Pending","title":"Missing Number","memory":"18.6 MB","code":"class Solution:\\n    def missingNumber(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        n = (n*(n+1))//2\\n        return n-sum(nums)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"missing-number","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1518281941,"question_id":125,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737656357,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1518281941/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"23.3 MB","code":"class Solution:\\n    def isPalindrome(self, s: str) -> bool:\\n        s = \'\'.join(char.lower() for char in s if char.isalnum())\\n        n = len(s)\\n        i = 0\\n        while(i<(n//2)):\\n            if s[i]!=s[n-i-1]:\\n                return False\\n            i+=1\\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1517762784,"question_id":215,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737620918,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1517762784/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"28.7 MB","code":"class Solution:\\n    def findKthLargest(self, nums: List[int], k: int) -> int:\\n        nums1 = sorted(nums,reverse = True)\\n        return nums1[k-1]","compare_result":"111111111111111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1516586107,"question_id":283,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1737528652,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1516586107/","is_pending":"Not Pending","title":"Move Zeroes","memory":"18.7 MB","code":"class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        n = len(nums)\\n        i = 0\\n        for j in range (n):\\n            if nums[j]!=0:\\n                nums[i]=nums[j]\\n                i+=1\\n        for j in range (i,n):\\n            nums[j]=0\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"move-zeroes","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1515399847,"question_id":151,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737439008,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1515399847/","is_pending":"Not Pending","title":"Reverse Words in a String","memory":"18.1 MB","code":"class Solution:\\n    def reverseWords(self, s: str) -> str:\\n        ans = \\"\\"\\n        s = s.strip()\\n        n = len(s)\\n        current_word = \\"\\"\\n        \\n        for i in range(n-1, -1, -1):\\n            if s[i] == \\" \\":\\n                if current_word:\\n                    ans+=(current_word[::-1]) + \\" \\"\\n                    current_word = \\"\\"\\n            else:\\n                current_word += s[i]\\n        if current_word:\\n            ans+=(current_word[::-1])\\n        return ans\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-words-in-a-string","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1514729016,"question_id":3063,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387870,"status":10,"status_display":"Accepted","runtime":"479 ms","url":"/submissions/detail/1514729016/","is_pending":"Not Pending","title":"Method Chaining","memory":"65.8 MB","code":"import pandas as pd\\n\\ndef findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:\\n    return animals[animals[\'weight\'] > 100].sort_values([\'weight\'],ascending=False)[[\'name\']]","compare_result":"111111111111111111111","title_slug":"method-chaining","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1514728884,"question_id":3073,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387862,"status":10,"status_display":"Accepted","runtime":"320 ms","url":"/submissions/detail/1514728884/","is_pending":"Not Pending","title":"Reshape Data: Melt","memory":"66.7 MB","code":"import pandas as pd\\n\\ndef meltTable(report: pd.DataFrame) -> pd.DataFrame:\\n    report = pd.melt(report, id_vars=[\'product\'], value_vars=[\'quarter_1\', \'quarter_2\', \'quarter_3\', \'quarter_4\'], value_name = \'sales\', var_name = \'quarter\')\\n    return report","compare_result":"111111111111111111111","title_slug":"reshape-data-melt","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1514728754,"question_id":3072,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387854,"status":10,"status_display":"Accepted","runtime":"465 ms","url":"/submissions/detail/1514728754/","is_pending":"Not Pending","title":"Reshape Data: Pivot","memory":"67 MB","code":"import pandas as pd\\n\\ndef pivotTable(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather = weather.pivot(index = \'month\',columns=\'city\',values=\'temperature\')\\n    return weather","compare_result":"111111111111111111111","title_slug":"reshape-data-pivot","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1514728371,"question_id":3064,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387834,"status":10,"status_display":"Accepted","runtime":"337 ms","url":"/submissions/detail/1514728371/","is_pending":"Not Pending","title":"Reshape Data: Concatenate","memory":"66.1 MB","code":"import pandas as pd\\n\\ndef concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:\\n    return pd.concat([df1,df2])","compare_result":"111111111111111111111","title_slug":"reshape-data-concatenate","has_notes":false,"flag_type":1,"frontend_id":108}],"has_next":true,"last_key":""}'
2025-07-04 16:22:52,905 [INFO] __main__.py:245 - Writing recyclable-and-low-fat-products/2025-01-27 13.52.08 - Accepted - runtime 455ms - memory 66MB.pd.py
2025-07-04 16:22:52,906 [INFO] __main__.py:245 - Writing big-countries/2025-01-27 13.40.59 - Accepted - runtime 476ms - memory 68MB.pd.py
2025-07-04 16:22:52,906 [INFO] __main__.py:188 - Skipping word-break 2025-01-26 23.22.18 because its status is 'Wrong Answer'
2025-07-04 16:22:53,351 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:53,353 [INFO] __main__.py:245 - Writing find-the-n-th-value-after-k-seconds/2025-01-26 13.38.58 - Accepted - runtime 5993ms - memory 18MB.py
2025-07-04 16:22:53,353 [INFO] __main__.py:188 - Skipping find-the-n-th-value-after-k-seconds 2025-01-26 13.35.23 because its status is 'Wrong Answer'
2025-07-04 16:22:54,299 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:54,300 [INFO] __main__.py:245 - Writing substrings-of-size-three-with-distinct-characters/2025-01-25 22.02.30 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:22:54,727 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:54,729 [INFO] __main__.py:245 - Writing contains-duplicate-ii/2025-01-25 20.00.59 - Accepted - runtime 28ms - memory 26.2MB.py
2025-07-04 16:22:55,157 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:55,159 [INFO] __main__.py:245 - Writing check-if-a-string-is-an-acronym-of-words/2025-01-25 15.04.11 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:22:55,576 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:55,578 [INFO] __main__.py:245 - Writing sort-colors/2025-01-24 22.25.00 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:22:55,579 [INFO] __main__.py:188 - Skipping sort-colors 2025-01-24 22.23.18 because its status is 'Wrong Answer'
2025-07-04 16:22:56,117 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:56,119 [INFO] __main__.py:245 - Writing majority-element/2025-01-24 22.15.28 - Accepted - runtime 15ms - memory 19.4MB.py
2025-07-04 16:22:56,570 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:56,574 [INFO] __main__.py:245 - Writing missing-number/2025-01-24 00.27.39 - Accepted - runtime 1ms - memory 18.6MB.py
2025-07-04 16:22:56,979 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:56,980 [INFO] __main__.py:245 - Writing valid-palindrome/2025-01-24 00.19.17 - Accepted - runtime 14ms - memory 23.3MB.py
2025-07-04 16:22:56,981 [INFO] __main__.py:245 - Writing kth-largest-element-in-an-array/2025-01-23 14.28.38 - Accepted - runtime 56ms - memory 28.7MB.py
2025-07-04 16:22:57,964 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:57,966 [INFO] __main__.py:245 - Writing move-zeroes/2025-01-22 12.50.52 - Accepted - runtime 3ms - memory 18.7MB.py
2025-07-04 16:22:58,411 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:58,413 [INFO] __main__.py:245 - Writing reverse-words-in-a-string/2025-01-21 11.56.48 - Accepted - runtime 4ms - memory 18.1MB.py
2025-07-04 16:22:58,877 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:58,878 [INFO] __main__.py:245 - Writing method-chaining/2025-01-20 21.44.30 - Accepted - runtime 479ms - memory 65.8MB.pd.py
2025-07-04 16:22:59,329 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:59,331 [INFO] __main__.py:245 - Writing reshape-data-melt/2025-01-20 21.44.22 - Accepted - runtime 320ms - memory 66.7MB.pd.py
2025-07-04 16:22:59,754 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:22:59,755 [INFO] __main__.py:245 - Writing reshape-data-pivot/2025-01-20 21.44.14 - Accepted - runtime 465ms - memory 67MB.pd.py
2025-07-04 16:23:00,216 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:00,218 [INFO] __main__.py:245 - Writing reshape-data-concatenate/2025-01-20 21.43.54 - Accepted - runtime 337ms - memory 66.1MB.pd.py
2025-07-04 16:23:05,219 [DEBUG] leetcode.py:150 - Exporting submissions from 240 to 260
2025-07-04 16:23:05,974 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=240&limit=20 HTTP/1.1" 200 None
2025-07-04 16:23:05,979 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1514728150,"question_id":3070,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387821,"status":10,"status_display":"Accepted","runtime":"457 ms","url":"/submissions/detail/1514728150/","is_pending":"Not Pending","title":"Fill Missing Data","memory":"66.1 MB","code":"import pandas as pd\\n\\ndef fillMissingValues(products: pd.DataFrame) -> pd.DataFrame:\\n    products[\'quantity\']= products[\'quantity\'].fillna(0)\\n    return products","compare_result":"111111111111111111111","title_slug":"fill-missing-data","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1514728029,"question_id":3069,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387814,"status":10,"status_display":"Accepted","runtime":"626 ms","url":"/submissions/detail/1514728029/","is_pending":"Not Pending","title":"Change Data Type","memory":"65.7 MB","code":"import pandas as pd\\n\\ndef changeDatatype(students: pd.DataFrame) -> pd.DataFrame:\\n    students = students.astype({\'grade\':int})\\n    return students","compare_result":"111111111111111111111","title_slug":"change-data-type","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1514727802,"question_id":3068,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387799,"status":10,"status_display":"Accepted","runtime":"702 ms","url":"/submissions/detail/1514727802/","is_pending":"Not Pending","title":"Rename Columns","memory":"65.8 MB","code":"import pandas as pd\\n\\ndef renameColumns(students: pd.DataFrame) -> pd.DataFrame:\\n    students = students.rename(columns={\'id\':\'student_id\', \'first\':\'first_name\',\'last\': \'last_name\', \'age\':\'age_in_years\'})\\n    return students","compare_result":"111111111111111111111","title_slug":"rename-columns","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1514727665,"question_id":3067,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387791,"status":10,"status_display":"Accepted","runtime":"774 ms","url":"/submissions/detail/1514727665/","is_pending":"Not Pending","title":"Modify Columns","memory":"65.7 MB","code":"import pandas as pd\\n\\ndef modifySalaryColumn(employees: pd.DataFrame) -> pd.DataFrame:\\n    employees[\'salary\']=employees.salary*2\\n    return employees","compare_result":"111111111111111111111","title_slug":"modify-columns","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1514727506,"question_id":3075,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387782,"status":10,"status_display":"Accepted","runtime":"560 ms","url":"/submissions/detail/1514727506/","is_pending":"Not Pending","title":"Drop Missing Data","memory":"66.6 MB","code":"import pandas as pd\\n\\ndef dropMissingData(students: pd.DataFrame) -> pd.DataFrame:\\n    return students.dropna(subset = [\'name\'])","compare_result":"111111111111111111111","title_slug":"drop-missing-data","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1514726981,"question_id":3071,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387750,"status":10,"status_display":"Accepted","runtime":"731 ms","url":"/submissions/detail/1514726981/","is_pending":"Not Pending","title":"Drop Duplicate Rows","memory":"66.4 MB","code":"import pandas as pd\\n\\ndef dropDuplicateEmails(customers: pd.DataFrame) -> pd.DataFrame:\\n    return customers.drop_duplicates(subset = [\\"email\\"])","compare_result":"111111111111111111111","title_slug":"drop-duplicate-rows","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1514726775,"question_id":3066,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387739,"status":10,"status_display":"Accepted","runtime":"438 ms","url":"/submissions/detail/1514726775/","is_pending":"Not Pending","title":"Create a New Column","memory":"65.7 MB","code":"import pandas as pd\\n\\ndef createBonusColumn(employees: pd.DataFrame) -> pd.DataFrame:\\n    employees[\'bonus\'] = employees.salary*2\\n    return employees","compare_result":"111111111111111111111","title_slug":"create-a-new-column","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1514726558,"question_id":3074,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387725,"status":10,"status_display":"Accepted","runtime":"430 ms","url":"/submissions/detail/1514726558/","is_pending":"Not Pending","title":"Select Data","memory":"65.9 MB","code":"import pandas as pd\\n\\ndef selectData(students: pd.DataFrame) -> pd.DataFrame:\\n    return students[students[\'student_id\'] == 101][[\'name\', \'age\']]\\n","compare_result":"111111111111111111111","title_slug":"select-data","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1514726403,"question_id":3065,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387715,"status":10,"status_display":"Accepted","runtime":"470 ms","url":"/submissions/detail/1514726403/","is_pending":"Not Pending","title":"Display the First Three Rows","memory":"65.7 MB","code":"import pandas as pd\\n\\ndef selectFirstRows(employees: pd.DataFrame) -> pd.DataFrame:\\n    return employees.head(3)","compare_result":"111111111111111111111","title_slug":"display-the-first-three-rows","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1514726241,"question_id":3076,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387706,"status":10,"status_display":"Accepted","runtime":"461 ms","url":"/submissions/detail/1514726241/","is_pending":"Not Pending","title":"Get the Size of a DataFrame","memory":"65.7 MB","code":"import pandas as pd\\n\\ndef getDataframeSize(players: pd.DataFrame) -> List[int]:\\n    rw,clm = players.shape\\n    return [rw,clm]","compare_result":"111111111111111111111","title_slug":"get-the-size-of-a-dataframe","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1514725872,"question_id":3062,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387685,"status":10,"status_display":"Accepted","runtime":"549 ms","url":"/submissions/detail/1514725872/","is_pending":"Not Pending","title":"Create a DataFrame from List","memory":"64.9 MB","code":"import pandas as pd\\n\\ndef createDataframe(student_data: List[List[int]]) -> pd.DataFrame:\\n    ans = pd.DataFrame(student_data, columns=[\'student_id\', \'age\'])\\n    return ans","compare_result":"111111111111111111111","title_slug":"create-a-dataframe-from-list","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1514722166,"question_id":3073,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387475,"status":10,"status_display":"Accepted","runtime":"400 ms","url":"/submissions/detail/1514722166/","is_pending":"Not Pending","title":"Reshape Data: Melt","memory":"66 MB","code":"import pandas as pd\\n\\ndef meltTable(report: pd.DataFrame) -> pd.DataFrame:\\n    report = pd.melt(report, id_vars=[\'product\'], value_vars=[\'quarter_1\', \'quarter_2\', \'quarter_3\', \'quarter_4\'], value_name = \'sales\', var_name = \'quarter\')\\n    return report","compare_result":"111111111111111111111","title_slug":"reshape-data-melt","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1514716183,"question_id":3063,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737387117,"status":10,"status_display":"Accepted","runtime":"549 ms","url":"/submissions/detail/1514716183/","is_pending":"Not Pending","title":"Method Chaining","memory":"66.3 MB","code":"import pandas as pd\\n\\ndef findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:\\n    return animals[animals[\'weight\'] > 100].sort_values([\'weight\'],ascending=False)[[\'name\']]","compare_result":"111111111111111111111","title_slug":"method-chaining","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1514711030,"question_id":3072,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737386806,"status":10,"status_display":"Accepted","runtime":"400 ms","url":"/submissions/detail/1514711030/","is_pending":"Not Pending","title":"Reshape Data: Pivot","memory":"66.7 MB","code":"import pandas as pd\\n\\ndef pivotTable(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather = weather.pivot(index = \'month\',columns=\'city\',values=\'temperature\')\\n    return weather","compare_result":"111111111111111111111","title_slug":"reshape-data-pivot","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1514707726,"question_id":3064,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737386606,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1514707726/","is_pending":"Not Pending","title":"Reshape Data: Concatenate","memory":"66.3 MB","code":"import pandas as pd\\n\\ndef concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:\\n    return pd.concat([df1,df2])","compare_result":"111111111111111111111","title_slug":"reshape-data-concatenate","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1514703635,"question_id":3070,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737386360,"status":10,"status_display":"Accepted","runtime":"366 ms","url":"/submissions/detail/1514703635/","is_pending":"Not Pending","title":"Fill Missing Data","memory":"65.3 MB","code":"import pandas as pd\\n\\ndef fillMissingValues(products: pd.DataFrame) -> pd.DataFrame:\\n    products[\'quantity\']= products[\'quantity\'].fillna(0)\\n    return products","compare_result":"111111111111111111111","title_slug":"fill-missing-data","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1514700768,"question_id":3069,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737386181,"status":10,"status_display":"Accepted","runtime":"310 ms","url":"/submissions/detail/1514700768/","is_pending":"Not Pending","title":"Change Data Type","memory":"66 MB","code":"import pandas as pd\\n\\ndef changeDatatype(students: pd.DataFrame) -> pd.DataFrame:\\n    students = students.astype({\'grade\':int})\\n    return students","compare_result":"111111111111111111111","title_slug":"change-data-type","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1514698533,"question_id":3068,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737386040,"status":10,"status_display":"Accepted","runtime":"418 ms","url":"/submissions/detail/1514698533/","is_pending":"Not Pending","title":"Rename Columns","memory":"65.9 MB","code":"import pandas as pd\\n\\ndef renameColumns(students: pd.DataFrame) -> pd.DataFrame:\\n    students = students.rename(columns={\'id\':\'student_id\', \'first\':\'first_name\',\'last\': \'last_name\', \'age\':\'age_in_years\'})\\n    return students","compare_result":"111111111111111111111","title_slug":"rename-columns","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1514679755,"question_id":3067,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737384848,"status":10,"status_display":"Accepted","runtime":"387 ms","url":"/submissions/detail/1514679755/","is_pending":"Not Pending","title":"Modify Columns","memory":"65.9 MB","code":"import pandas as pd\\n\\ndef modifySalaryColumn(employees: pd.DataFrame) -> pd.DataFrame:\\n    employees[\'salary\']=employees.salary*2\\n    return employees","compare_result":"111111111111111111111","title_slug":"modify-columns","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1514672930,"question_id":3075,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737384428,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1514672930/","is_pending":"Not Pending","title":"Drop Missing Data","memory":"66.1 MB","code":"import pandas as pd\\n\\ndef dropMissingData(students: pd.DataFrame) -> pd.DataFrame:\\n    return students.dropna(subset = [\'name\'])","compare_result":"111111111111111111111","title_slug":"drop-missing-data","has_notes":false,"flag_type":1,"frontend_id":88}],"has_next":true,"last_key":""}'
2025-07-04 16:23:06,376 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:06,378 [INFO] __main__.py:245 - Writing fill-missing-data/2025-01-20 21.43.41 - Accepted - runtime 457ms - memory 66.1MB.pd.py
2025-07-04 16:23:06,927 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:06,929 [INFO] __main__.py:245 - Writing change-data-type/2025-01-20 21.43.34 - Accepted - runtime 626ms - memory 65.7MB.pd.py
2025-07-04 16:23:07,689 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:07,691 [INFO] __main__.py:245 - Writing rename-columns/2025-01-20 21.43.19 - Accepted - runtime 702ms - memory 65.8MB.pd.py
2025-07-04 16:23:08,099 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:08,100 [INFO] __main__.py:245 - Writing modify-columns/2025-01-20 21.43.11 - Accepted - runtime 774ms - memory 65.7MB.pd.py
2025-07-04 16:23:08,523 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:08,524 [INFO] __main__.py:245 - Writing drop-missing-data/2025-01-20 21.43.02 - Accepted - runtime 560ms - memory 66.6MB.pd.py
2025-07-04 16:23:08,958 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:08,959 [INFO] __main__.py:245 - Writing drop-duplicate-rows/2025-01-20 21.42.30 - Accepted - runtime 731ms - memory 66.4MB.pd.py
2025-07-04 16:23:09,416 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:09,418 [INFO] __main__.py:245 - Writing create-a-new-column/2025-01-20 21.42.19 - Accepted - runtime 438ms - memory 65.7MB.pd.py
2025-07-04 16:23:09,845 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:09,846 [INFO] __main__.py:245 - Writing select-data/2025-01-20 21.42.05 - Accepted - runtime 430ms - memory 65.9MB.pd.py
2025-07-04 16:23:10,294 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:10,296 [INFO] __main__.py:245 - Writing display-the-first-three-rows/2025-01-20 21.41.55 - Accepted - runtime 470ms - memory 65.7MB.pd.py
2025-07-04 16:23:11,052 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:11,054 [INFO] __main__.py:245 - Writing get-the-size-of-a-dataframe/2025-01-20 21.41.46 - Accepted - runtime 461ms - memory 65.7MB.pd.py
2025-07-04 16:23:11,461 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:11,463 [INFO] __main__.py:245 - Writing create-a-dataframe-from-list/2025-01-20 21.41.25 - Accepted - runtime 549ms - memory 64.9MB.pd.py
2025-07-04 16:23:11,463 [INFO] __main__.py:245 - Writing reshape-data-melt/2025-01-20 21.37.55 - Accepted - runtime 400ms - memory 66MB.pd.py
2025-07-04 16:23:11,464 [INFO] __main__.py:245 - Writing method-chaining/2025-01-20 21.31.57 - Accepted - runtime 549ms - memory 66.3MB.pd.py
2025-07-04 16:23:11,464 [INFO] __main__.py:245 - Writing reshape-data-pivot/2025-01-20 21.26.46 - Accepted - runtime 400ms - memory 66.7MB.pd.py
2025-07-04 16:23:11,465 [INFO] __main__.py:245 - Writing reshape-data-concatenate/2025-01-20 21.23.26 - Accepted - runtime 362ms - memory 66.3MB.pd.py
2025-07-04 16:23:11,465 [INFO] __main__.py:245 - Writing fill-missing-data/2025-01-20 21.19.20 - Accepted - runtime 366ms - memory 65.3MB.pd.py
2025-07-04 16:23:11,466 [INFO] __main__.py:245 - Writing change-data-type/2025-01-20 21.16.21 - Accepted - runtime 310ms - memory 66MB.pd.py
2025-07-04 16:23:11,467 [INFO] __main__.py:245 - Writing rename-columns/2025-01-20 21.14.00 - Accepted - runtime 418ms - memory 65.9MB.pd.py
2025-07-04 16:23:11,467 [INFO] __main__.py:245 - Writing modify-columns/2025-01-20 20.54.08 - Accepted - runtime 387ms - memory 65.9MB.pd.py
2025-07-04 16:23:11,468 [INFO] __main__.py:245 - Writing drop-missing-data/2025-01-20 20.47.08 - Accepted - runtime 517ms - memory 66.1MB.pd.py
2025-07-04 16:23:16,468 [DEBUG] leetcode.py:150 - Exporting submissions from 260 to 280
2025-07-04 16:23:16,967 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=260&limit=20 HTTP/1.1" 200 None
2025-07-04 16:23:16,981 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1514443766,"question_id":2685,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737367128,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/1514443766/","is_pending":"Not Pending","title":"First Completely Painted Row or Column","memory":"53.6 MB","code":"class Solution:\\n    def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\\n        hashset = {}\\n        row = len(mat)\\n        column = len(mat[0])\\n        rows = [0]*row\\n        columns = [0]*column\\n        for i in range (row):\\n            for j in range (column):\\n                hashset[mat[i][j]]=[i,j]\\n        for val in range (len(arr)):\\n            i = hashset[arr[val]][0]\\n            j = hashset[arr[val]][1]\\n            rows[i]+=1\\n            columns[j]+=1\\n            if rows[i]==column:\\n                return val\\n            if columns[j]==row:\\n                return val","compare_resulttitle_slug":"first-completely-painted-row-or-column","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1514440432,"question_id":2685,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737366863,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1514440432/","is_pending":"Not Pending","title":"First Completely Painted Row or Column","memory":"N/A","code":"class Solution:\\n    def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\\n        hashset = {}\\n        row = len(mat)\\n        column = len(mat[0])\\n        rows = [0]*row\\n        columns = [0]*column\\n        for i in range (row):\\n            for j in range (column):\\n                hashset[mat[i][j]]=[i,j]\\n        for val in range (len(arr)):\\n            i = hashset[arr[val]][0]\\n            j = hashset[arr[val]][1]\\n            rows[i]+=1\\n            columns[j]+=1\\n            if rows[i]==row:\\n                return val\\n            if columns[j]==column:\\n                return val","compare_resulttitle_slug":"first-completely-painted-row-or-column","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1514311406,"question_id":66,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737356498,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1514311406/","is_pending":"Not Pending","title":"Plus One","memory":"17.9 MB","code":"class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        carry = 1\\n        first_digit = digits[0]\\n        n = len(digits)\\n        for i in range (n-1,-1,-1):\\n            if digits[i] == 9 and carry == 1:\\n                digits[i] = 0\\n                carry = 1\\n            else:\\n                digits[i] +=1\\n                carry = 0\\n                break\\n        if first_digit == 9 and carry == 1:\\n            digits.insert(0,1)\\n        return digits\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"plus-one","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1514310173,"question_id":66,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737356407,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1514310173/","is_pending":"Not Pending","title":"Plus One","memory":"N/A","code":"class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        carry = 0\\n        first_digit = digits[0]\\n        n = len(digits)\\n        for i in range (n-1,-1,-1):\\n            if digits[i] == 9 and carry == 0:\\n                digits[i] = 0\\n                carry = 1\\n            else:\\n                digits[i] +=1\\n                carry = 0\\n                break\\n        if first_digit == 9 and carry == 1:\\n            digits.insert(0,1)\\n        return digits\\n","compare_result":"111111000111111101111111111111111111101111111111110111111111111111111111111111111111111111111111111111111111110","title_slug":"plus-one","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1513380952,"question_id":412,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737277032,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1513380952/","is_pending":"Not Pending","title":"Fizz Buzz","memory":"18.1 MB","code":"class Solution:\\n    def fizzBuzz(self, n: int) -> List[str]:\\n        answer = []\\n        for i in range (1,n+1):\\n            if i%15 ==0:\\n                answer.append(\'FizzBuzz\')\\n            elif i%3==0:\\n                answer.append(\\"Fizz\\")\\n            elif i%5==0:\\n                answer.append(\\"Buzz\\")\\n            else:\\n                answer.append(str(i))\\n        return answer","compare_result":"11111111","title_slug":"fizz-buzz","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1512756842,"question_id":3747,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737221064,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1512756842/","is_pending":"Not Pending","title":"Maximum Difference Between Adjacent Elements in a Circular Array","memory":"17.7 MB","code":"class Solution:\\n    def maxAdjacentDistance(self, nums: List[int]) -> int:\\n        current_max = abs(nums[0]-nums[len(nums)-1])\\n        for i in range (len(nums)-1):\\n            if current_max< abs(nums[i]-nums[i+1]):\\n                current_max= abs(nums[i]-nums[i+1])\\n        return current_max","compare_resulttitle_slug":"maximum-difference-between-adjacent-elements-in-a-circular-array","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1512564653,"question_id":443,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737211864,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1512564653/","is_pending":"Not Pending","title":"String Compression","memory":"18.1 MB","code":"class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        insert_pos = 0\\n        for right in range (len(chars)):\\n            if right+1==len(chars) or chars[right]!=chars[right+1]:\\n                chars[insert_pos]=chars[left]\\n                insert_pos+=1\\n                total =right-left + 1\\n                if total>1:\\n                    for digit in str(total):\\n                        chars[insert_pos]=str(digit)\\n                        insert_pos+=1\\n                left = right + 1\\n        return insert_pos\\n                \\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1512439164,"question_id":540,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737205161,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1512439164/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"24.8 MB","code":"class Solution:\\n    def singleNonDuplicate(self, nums: List[int]) -> int:\\n        left, right = 0, len(nums) - 1\\n        while left < right:\\n            mid = left + (right - left) // 2\\n            if mid % 2 == 1:\\n                mid -= 1\\n            if nums[mid] != nums[mid + 1]:\\n                right = mid\\n            else:\\n                left = mid + 2\\n        return nums[left]\\n","compare_result":"1111111111111111","title_slug":"single-element-in-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1512414620,"question_id":745,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737203053,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1512414620/","is_pending":"Not Pending","title":"Find Smallest Letter Greater Than Target","memory":"19.2 MB","code":"class Solution:\\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\\n        ans = -1\\n        left, right = 0,len(letters)-1\\n        while left <= right:\\n            mid = left + (right-left)//2\\n            if letters[mid]<=target:\\n                left = mid + 1\\n            else:\\n                right = mid -1\\n                ans = letters[mid]\\n        return ans if ans != -1 else letters[0]\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-smallest-letter-greater-than-target","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1512386928,"question_id":35,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737200589,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1512386928/","is_pending":"Not Pending","title":"Search Insert Position","memory":"18.3 MB","code":"class Solution:\\n    def searchInsert(self, nums: List[int], target: int) -> int:\\n        left, right = 0, len(nums) - 1\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] == target:\\n                return mid\\n            elif nums[mid] > target:\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        return left\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1511410114,"question_id":3071,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737111333,"status":10,"status_display":"Accepted","runtime":"504 ms","url":"/submissions/detail/1511410114/","is_pending":"Not Pending","title":"Drop Duplicate Rows","memory":"66.2 MB","code":"import pandas as pd\\n\\ndef dropDuplicateEmails(customers: pd.DataFrame) -> pd.DataFrame:\\n    return customers.drop_duplicates(subset = [\\"email\\"])","compare_result":"111111111111111111111","title_slug":"drop-duplicate-rows","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1511201191,"question_id":2792,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737094126,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1511201191/","is_pending":"Not Pending","title":"Neighboring Bitwise XOR","memory":"22.2 MB","code":"class Solution:\\n    def doesValidArrayExist(self, derived: List[int]) -> bool:\\n        i, j = 0, 0\\n        for bit in derived:\\n            if bit == 1:\\n                if j == 1:\\n                    j = 0\\n                else:\\n                    j = 1\\n        return i == j\\n","compare_resulttitle_slug":"neighboring-bitwise-xor","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1510727743,"question_id":3,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737050179,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1510727743/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"18 MB","code":"class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        alpha_set=set()\\n        i,j = 0,0\\n        length = 0\\n        while j<len(s):\\n            while s[j] in alpha_set:\\n                alpha_set.remove(s[i])\\n                i+=1\\n            alpha_set.add(s[j])\\n            length=max(length,j - i + 1)\\n            j+=1\\n        return length","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1510581744,"question_id":2533,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737042062,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1510581744/","is_pending":"Not Pending","title":"Bitwise XOR of All Pairings","memory":"36.6 MB","code":"class Solution:\\n    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:\\n        ans = 0\\n        if len(nums1) % 2 == 1:\\n            for num in nums2:\\n                ans = ans ^ num\\n        if len(nums2) % 2 == 1:\\n            for num in nums1:\\n                ans = ans ^ num\\n        return ans\\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"bitwise-xor-of-all-pairings","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1510536759,"question_id":2533,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737039169,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1510536759/","is_pending":"Not Pending","title":"Bitwise XOR of All Pairings","memory":"N/A","code":"class Solution:\\n    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums3 = []\\n        if len(nums1)==1 and len(nums2)==1:\\n            return nums1[0]^nums2[0]\\n        for i in range (len(nums1)):\\n            for j in range(len(nums2)):\\n                nums3.append(nums1[i]^nums2[j])\\n        ans = nums3[0]^nums3[1]\\n        for i in range (2,len(nums3)):\\n            ans = ans^nums3[i]\\n        return ans","compare_result":"111111111111111111111111111000000000000000","title_slug":"bitwise-xor-of-all-pairings","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1510484069,"question_id":3066,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1737035765,"status":10,"status_display":"Accepted","runtime":"621 ms","url":"/submissions/detail/1510484069/","is_pending":"Not Pending","title":"Create a New Column","memory":"65.5 MB","code":"import pandas as pd\\n\\ndef createBonusColumn(employees: pd.DataFrame) -> pd.DataFrame:\\n    employees[\'bonus\'] = employees.salary*2\\n    return employees","compare_result":"111111111111111111111","title_slug":"create-a-new-column","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1509421384,"question_id":2509,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1736949634,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1509421384/","is_pending":"Not Pending","title":"Minimize XOR","memory":"17.7 MB","code":"class Solution:\\n    def minimizeXor(self, num1: int, num2: int) -> int:\\n        def set_bits(n):\\n            ans = 0\\n            while n > 0:\\n                ans += 1 & n\\n                n = n >> 1\\n            return ans\\n        count1,count2 = set_bits(num1),set_bits(num2)\\n        i = 0\\n        while count1>count2:\\n            if num1 & (1<<i):\\n                count1-=1\\n                num1 = num1^(1<<i)\\n            i+=1\\n        while count1<count2:\\n            if num1 & (1<<i) == 0:\\n                count1+=1\\n                num1 = num1 | (1<<i)\\n            i+=1\\n        return num1\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-xor","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1508014920,"question_id":209,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736834753,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1508014920/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"28.2 MB","code":"class Solution:\\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\\n        ans = float(\\"inf\\")\\n        left = 0\\n        right = 0\\n        current_sum = 0\\n        while(right<len(nums)):\\n            current_sum +=nums[right]\\n            while current_sum>=target:\\n                if right - left + 1 < ans:\\n                    ans = right - left + 1\\n                current_sum-=nums[left]\\n                left+=1\\n            right+=1\\n        if ans == float(\\"inf\\"):\\n            return 0\\n        else:\\n            return ans","compare_result":"111111111111111111111","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1507981598,"question_id":80,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736832414,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/1507981598/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array II","memory":"18 MB","code":"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        frequency = 1\\n        total = 1\\n        static_i = 0\\n        moving_i = 1\\n        while(moving_i<len(nums)):\\n            if nums[moving_i]== nums[static_i]:\\n                frequency+=1\\n            else:\\n                frequency=1\\n            if frequency<=2:\\n                static_i+=1\\n                nums[static_i]=nums[moving_i]\\n                total+=1\\n            moving_i+=1\\n        return total","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1507965196,"question_id":26,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736831269,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1507965196/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"19.1 MB","code":"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        total = 1\\n        static_i = 0\\n        moving_i = 1\\n        while(moving_i<len(nums)):\\n            if nums[moving_i]!= nums[static_i]:\\n                total+=1\\n                static_i+=1\\n                nums[static_i]=nums[moving_i]\\n            moving_i+=1\\n        return total\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":68}],"has_next":true,"last_key":""}'
2025-07-04 16:23:17,537 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:17,548 [INFO] __main__.py:245 - Writing first-completely-painted-row-or-column/2025-01-20 15.58.48 - Accepted - runtime 131ms - memory 53.6MB.py
2025-07-04 16:23:17,548 [INFO] __main__.py:188 - Skipping first-completely-painted-row-or-column 2025-01-20 15.54.23 because its status is 'Wrong Answer'
2025-07-04 16:23:18,150 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:18,152 [INFO] __main__.py:245 - Writing plus-one/2025-01-20 13.01.38 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:18,152 [INFO] __main__.py:188 - Skipping plus-one 2025-01-20 13.00.07 because its status is 'Wrong Answer'
2025-07-04 16:23:18,604 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:18,605 [INFO] __main__.py:245 - Writing fizz-buzz/2025-01-19 14.57.12 - Accepted - runtime 0ms - memory 18.1MB.py
2025-07-04 16:23:18,606 [INFO] __main__.py:245 - Writing maximum-difference-between-adjacent-elements-in-a-circular-array/2025-01-18 23.24.24 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:23:19,396 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:19,414 [INFO] __main__.py:245 - Writing string-compression/2025-01-18 20.51.04 - Accepted - runtime 0ms - memory 18.1MB.py
2025-07-04 16:23:19,415 [INFO] __main__.py:245 - Writing single-element-in-a-sorted-array/2025-01-18 18.59.21 - Accepted - runtime 0ms - memory 24.8MB.py
2025-07-04 16:23:19,887 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:19,888 [INFO] __main__.py:245 - Writing find-smallest-letter-greater-than-target/2025-01-18 18.24.13 - Accepted - runtime 3ms - memory 19.2MB.py
2025-07-04 16:23:19,889 [INFO] __main__.py:245 - Writing search-insert-position/2025-01-18 17.43.09 - Accepted - runtime 0ms - memory 18.3MB.py
2025-07-04 16:23:19,890 [INFO] __main__.py:245 - Writing drop-duplicate-rows/2025-01-17 16.55.33 - Accepted - runtime 504ms - memory 66.2MB.pd.py
2025-07-04 16:23:20,346 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:20,347 [INFO] __main__.py:245 - Writing neighboring-bitwise-xor/2025-01-17 12.08.46 - Accepted - runtime 60ms - memory 22.2MB.py
2025-07-04 16:23:20,348 [INFO] __main__.py:245 - Writing longest-substring-without-repeating-characters/2025-01-16 23.56.19 - Accepted - runtime 24ms - memory 18MB.py
2025-07-04 16:23:21,531 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:21,532 [INFO] __main__.py:245 - Writing bitwise-xor-of-all-pairings/2025-01-16 21.41.02 - Accepted - runtime 8ms - memory 36.6MB.py
2025-07-04 16:23:21,533 [INFO] __main__.py:188 - Skipping bitwise-xor-of-all-pairings 2025-01-16 20.52.49 because its status is 'Memory Limit Exceeded'
2025-07-04 16:23:21,533 [INFO] __main__.py:245 - Writing create-a-new-column/2025-01-16 19.56.05 - Accepted - runtime 621ms - memory 65.5MB.pd.py
2025-07-04 16:23:21,972 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:21,974 [INFO] __main__.py:245 - Writing minimize-xor/2025-01-15 20.00.34 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:23:22,499 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:22,500 [INFO] __main__.py:245 - Writing minimum-size-subarray-sum/2025-01-14 12.05.53 - Accepted - runtime 11ms - memory 28.2MB.py
2025-07-04 16:23:22,929 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:22,938 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-array-ii/2025-01-14 11.26.54 - Accepted - runtime 64ms - memory 18MB.py
2025-07-04 16:23:23,393 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:23,395 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-array/2025-01-14 11.07.49 - Accepted - runtime 3ms - memory 19.1MB.py
2025-07-04 16:23:28,396 [DEBUG] leetcode.py:150 - Exporting submissions from 280 to 300
2025-07-04 16:23:28,859 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=280&limit=20 HTTP/1.1" 200 None
2025-07-04 16:23:28,874 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1507855901,"question_id":2766,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736821894,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1507855901/","is_pending":"Not Pending","title":"Find the Prefix Common Array of Two Arrays","memory":"18 MB","code":"class Solution:\\n    def findThePrefixCommonArray(self, A: List[int], B: List[int]) -> List[int]:\\n        lst = [0]*51\\n        ans = []\\n        for i in range (len(A)):\\n            lst[A[i]]+=1\\n            lst[B[i]]+=1\\n            count = 0\\n            for c in lst:\\n                if c==2:\\n                    count +=1\\n            ans.append(count)\\n        return ans","compare_resulttitle_slug":"find-the-prefix-common-array-of-two-arrays","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1507280351,"question_id":7,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736776013,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1507280351/","is_pending":"Not Pending","title":"Reverse Integer","memory":"17.7 MB","code":"class Solution:\\n    def reverse(self, x: int) -> int:\\n        max_value = 2**31 - 1\\n        ans = 0\\n        if x<0:\\n            sign = -1\\n            x=abs(x)\\n        else:\\n            sign = 1\\n        while x!=0:\\n            digit = x%10\\n            if ans > (max_value-digit)//10:\\n                return 0\\n            ans = ans*10 + digit\\n            x//=10\\n        return ans*sign\\n                \\n","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1507277899,"question_id":7,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736775844,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1507277899/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution:\\n    def reverse(self, x: int) -> int:\\n        min_value = -2**31\\n        max_value = 2**31 - 1\\n        ans = 0\\n        if x<0:\\n            sign = -1\\n            x=abs(x)\\n        else:\\n            sign = 1\\n        while x!=0:\\n            digit = x%10\\n            if ans > (max_value-digit)*10:\\n                return 0\\n            ans = ans*10 + digit\\n            x//=10\\n        return ans*sign\\n                \\n","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1507109540,"question_id":357,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736761760,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1507109540/","is_pending":"Not Pending","title":"Count Numbers with Unique Digits","memory":"17.7 MB","code":"class Solution:\\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\\n        fact = 9\\n        decrement = 9\\n        if n==0:\\n            return 1\\n        elif n == 1:\\n            return 10\\n        else:\\n            count = 10\\n            for i in range (2,n+1):\\n                fact*=decrement\\n                decrement -=1\\n                count += fact\\n        return count\\n        \\n","compare_result":"111111111","title_slug":"count-numbers-with-unique-digits","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1507108961,"question_id":357,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736761712,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1507108961/","is_pending":"Not Pending","title":"Count Numbers with Unique Digits","memory":"N/A","code":"class Solution:\\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\\n        count = 1\\n        fact = 9\\n        decrement = 9\\n        if n==0:\\n            return 1\\n        elif n == 1:\\n            return 9\\n        else:\\n            count = 10\\n            for i in range (2,n+1):\\n                fact*=decrement\\n                decrement -=1\\n                count += fact\\n        return count\\n        \\n","compare_result":"110111111","title_slug":"count-numbers-with-unique-digits","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1507025524,"question_id":747,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736754650,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1507025524/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"19.7 MB","code":"from typing import List\\n\\n\\nclass Solution:\\n    def __init__(self):\\n        self.dp = [-1] * 1001\\n\\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\\n        n = len(cost)\\n\\n        def solve(n: int) -> int:\\n            if n == 0:\\n                self.dp[0] = cost[0]\\n                return self.dp[0]\\n            elif n == 1:\\n                self.dp[1] = cost[1]\\n                return self.dp[1]\\n            if self.dp[n] != -1:\\n                return self.dp[n]\\n            self.dp[n] = min(solve(n - 1), solve(n - 2)) + (\\n                cost[n] if n < len(cost) else 0\\n            )\\n            return self.dp[n]\\n\\n        return min(solve(n - 1), solve(n - 2))\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1506953187,"question_id":3455,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736749315,"status":10,"status_display":"Accepted","runtime":"311 ms","url":"/submissions/detail/1506953187/","is_pending":"Not Pending","title":"Minimum Length of String After Operations","memory":"18.8 MB","code":"import string\\nclass Solution:\\n    def minimumLength(self, s: str) -> int:\\n        hash_set = {letter: 0 for letter in string.ascii_lowercase}\\n        for c in s:\\n            hash_set[c]+=1\\n            if hash_set[c]==3:\\n                hash_set[c]=1\\n        return sum(hash_set.values())","compare_resulttitle_slug":"minimum-length-of-string-after-operations","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1506477011,"question_id":2221,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736705441,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/1506477011/","is_pending":"Not Pending","title":"Check if a Parentheses String Can Be Valid","memory":"21.9 MB","code":"class Solution:\\n    def canBeValid(self, s: str, locked: str) -> bool:\\n        n = len(s)\\n        if n % 2 == 1:\\n            return False\\n        stack_locked = []\\n        stack_unlocked = []\\n        for i in range(n):\\n            if locked[i] == \'0\':\\n                stack_unlocked.append(i)\\n            elif s[i] == \'(\':\\n                stack_locked.append(i)\\n            else:\\n                if stack_locked:\\n                    stack_locked.pop()\\n                elif stack_unlocked:\\n                    stack_unlocked.pop()\\n                else:\\n                    return False\\n        while stack_locked and stack_unlocked:\\n            if stack_locked[-1] < stack_unlocked[-1]:\\n                stack_locked.pop()\\n                stack_unlocked.pop()\\n            else:\\n                return False\\n        return len(stack_locked) == 0\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-a-parentheses-string-can-be-valid","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1506450164,"question_id":678,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736703922,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1506450164/","is_pending":"Not Pending","title":"Valid Parenthesis String","memory":"17.9 MB","code":"class Solution:\\n    def checkValidString(self, s: str) -> bool:\\n        stack = []\\n        asterisk_stack = []\\n        for i, c in enumerate(s):\\n            if c == \'(\':\\n                stack.append(i)\\n            elif c == \'*\':\\n                asterisk_stack.append(i)\\n            else:\\n                if stack:\\n                    stack.pop()\\n                elif asterisk_stack:\\n                    asterisk_stack.pop()\\n                else:\\n                    return False\\n        while stack and asterisk_stack:\\n            if stack[-1] < asterisk_stack[-1]:\\n                stack.pop()\\n                asterisk_stack.pop()\\n            else:\\n                return False\\n        \\n        return len(stack) == 0\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parenthesis-string","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1506410161,"question_id":20,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736701674,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1506410161/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"17.9 MB","code":"class Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        for c in s:\\n            if c in \\"({[\\":\\n                stack.append(c)\\n            else:\\n                if len(stack)==0:\\n                    return False\\n                else:\\n                    if (c==\')\' and stack[-1]!=\'(\') or \\\\\\n                    (c==\'}\' and stack[-1]!=\'{\') or \\\\\\n                    (c==\']\' and stack[-1]!=\'[\'):\\n                        return False\\n                stack.pop()\\n        if len(stack) == 0:\\n            return True\\n        else:\\n            return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1506405332,"question_id":20,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736701393,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1506405332/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"N/A","code":"class Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        for c in s:\\n            if c in \\"({[\\":\\n                stack.append(c)\\n            else:\\n                if len(stack)==0:\\n                    return False\\n                else:\\n                    if (c==\')\' and stack[-1]!=\'(\') or \\\\\\n                    (c==\'}\' and stack[-1]!=\'{\') or \\\\\\n                    (c==\']\' and stack[-1]!=\'[\'):\\n                        return False\\n                stack.pop()\\n        if len(stack) == 0:\\n            return True","compare_result":"1111110101110110101001111011101111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"valid-parentheses","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1506164991,"question_id":1236,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736685149,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1506164991/","is_pending":"Not Pending","title":"N-th Tribonacci Number","memory":"17.9 MB","code":"class Solution:\\n    lst = [-1] * 38\\n    def tribonacci(self, n: int) -> int:\\n        if self.lst[n] != -1:\\n            return self.lst[n]\\n        if n == 0:\\n            self.lst[n] = 0\\n        elif n == 1 or n == 2:\\n            self.lst[n] = 1\\n        else:\\n            self.lst[n] =self.tribonacci(n - 1) + self.tribonacci(n - 2) + self.tribonacci(n - 3)\\n        return self.lst[n]\\n","compare_result":"11111111111111111111111111111111111111","title_slug":"n-th-tribonacci-number","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1506153918,"question_id":1013,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736684244,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1506153918/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"17.6 MB","code":"class Solution:\\n    lst = [-1]*31\\n    def fib(self, n: int) -> int:\\n        if n==0:\\n            self.lst[n]=0\\n        if n == 1:\\n            self.lst[n]=1\\n        if self.lst[n]==-1:\\n            self.lst[n] = self.fib(n-1) + self.fib(n-2)\\n        return self.lst[n]","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1506127699,"question_id":70,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736682102,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1506127699/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"17.6 MB","code":"class Solution:\\n    lst = [-1]*46\\n    def climbStairs(self, n: int) -> int:\\n        if n == 1:\\n            self.lst[n] = 1\\n        elif n == 2:\\n            self.lst[n] = 2\\n        if self.lst[n] == -1:\\n            self.lst[n] = self.climbStairs(n-1) + self.climbStairs(n-2)\\n        return self.lst[n]\\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1504643789,"question_id":1502,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736566013,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/1504643789/","is_pending":"Not Pending","title":"Construct K Palindrome Strings","memory":"18.2 MB","code":"import string\\nclass Solution:\\n    def canConstruct(self, s: str, k: int) -> bool:\\n        if len(s)<k:\\n            return False\\n        hashmap = {letter: 0 for letter in string.ascii_lowercase}\\n        for c in s:\\n            hashmap[c]+=1\\n        odd_count = 0\\n        for alph in hashmap:\\n            if hashmap[alph]%2==1:\\n                odd_count+=1\\n        if odd_count>k:\\n            return False\\n        return True\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-k-palindrome-strings","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1503722707,"question_id":952,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736487452,"status":10,"status_display":"Accepted","runtime":"443 ms","url":"/submissions/detail/1503722707/","is_pending":"Not Pending","title":"Word Subsets","memory":"21.2 MB","code":"class Solution:\\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\\n        ans = []\\n        char_list = [0]*26\\n        max_freq_list = [0]*26\\n        for word in words2:\\n            for c in word:\\n                char_list[ord(c) - ord(\'a\')]+=1\\n            for i in range (26):\\n                max_freq_list[i]=max(max_freq_list[i],char_list[i])\\n            char_list = [0]*26\\n        for word in words1:\\n            for c in word:\\n                char_list[ord(c)-ord(\'a\')]+=1\\n            flag = True\\n            for i in range (26):\\n                if max_freq_list[i]>char_list[i]:\\n                    flag = False\\n                    break\\n            if flag:\\n                ans.append(word)\\n            char_list = [0]*26\\n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"word-subsets","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1502866737,"question_id":438,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736419805,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1502866737/","is_pending":"Not Pending","title":"Find All Anagrams in a String","memory":"18.6 MB","code":"import string\\nclass Solution:\\n    def findAnagrams(self, s: str, p: str) -> List[int]:\\n        index = []\\n        p_dict = {letter: 0 for letter in string.ascii_lowercase}\\n        s_dict = {letter: 0 for letter in string.ascii_lowercase}\\n        for c in p:\\n            p_dict[c] += 1\\n        \\n        n, n_p = len(s), len(p)\\n        if n < n_p:\\n            return []\\n        for i in range(n_p):\\n            s_dict[s[i]] += 1\\n        if s_dict == p_dict:\\n            index.append(0)\\n\\n        i = 1\\n        j = n_p\\n        while j < n:\\n            s_dict[s[i - 1]] -= 1\\n            s_dict[s[j]] += 1\\n            if s_dict == p_dict:\\n                index.append(i)\\n\\n            i += 1\\n            j += 1\\n        \\n        return index\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-anagrams-in-a-string","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1502750763,"question_id":187,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736411215,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1502750763/","is_pending":"Not Pending","title":"Repeated DNA Sequences","memory":"29.4 MB","code":"class Solution:\\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\\n        if len(s) < 10:\\n            return []\\n        sub_set = set()\\n        ans_set = set()\\n        i = 0\\n        j = 10\\n        while j <= len(s):\\n            sub_string = s[i:j]\\n            if sub_string in sub_set:\\n                ans_set.add(sub_string)\\n            else:\\n                sub_set.add(sub_string)\\n            i += 1\\n            j += 1\\n        return list(ans_set)\\n","compare_result":"1111111111111111111111111111111","title_slug":"repeated-dna-sequences","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1502748326,"question_id":187,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736411030,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1502748326/","is_pending":"Not Pending","title":"Repeated DNA Sequences","memory":"N/A","code":"class Solution:\\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\\n        if len(s)<10:\\n            return []\\n        sub = []\\n        ans = []\\n        i = 0\\n        j = 10\\n        while(j<=len(s)):\\n            sub_string = s[i:j]\\n            if sub_string in sub:\\n                if sub_string not in ans:\\n                    ans.append(sub_string)\\n            else:\\n                sub.append(sub_string)\\n            i+=1\\n            j+=1\\n        return ans","compare_result":"1111111111111111111111111111110","title_slug":"repeated-dna-sequences","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1502617267,"question_id":33,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736402202,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1502617267/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"17.9 MB","code":"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        left,right = 0,len(nums)-1\\n        while left<=right:\\n            mid = left + (right-left)//2\\n            if nums[mid] == target:\\n                return mid\\n            if nums[left]<=nums[mid]:\\n                if nums[left]<=target<=nums[mid]:\\n                    right = mid - 1\\n                else:\\n                    left = mid+1\\n            else:\\n                if nums[mid]<=target<=nums[right]:\\n                    left = mid + 1\\n                else:\\n                    right = mid-1\\n        return -1","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":48}],"has_next":true,"last_key":""}'
2025-07-04 16:23:29,310 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:29,312 [INFO] __main__.py:245 - Writing find-the-prefix-common-array-of-two-arrays/2025-01-14 08.31.34 - Accepted - runtime 23ms - memory 18MB.py
2025-07-04 16:23:29,801 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:29,803 [INFO] __main__.py:245 - Writing reverse-integer/2025-01-13 19.46.53 - Accepted - runtime 39ms - memory 17.7MB.py
2025-07-04 16:23:29,804 [INFO] __main__.py:188 - Skipping reverse-integer 2025-01-13 19.44.04 because its status is 'Wrong Answer'
2025-07-04 16:23:30,402 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:30,404 [INFO] __main__.py:245 - Writing count-numbers-with-unique-digits/2025-01-13 15.49.20 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:23:30,405 [INFO] __main__.py:188 - Skipping count-numbers-with-unique-digits 2025-01-13 15.48.32 because its status is 'Wrong Answer'
2025-07-04 16:23:30,405 [INFO] __main__.py:245 - Writing min-cost-climbing-stairs/2025-01-13 13.50.50 - Accepted - runtime 6ms - memory 19.7MB.py
2025-07-04 16:23:30,793 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:30,794 [INFO] __main__.py:245 - Writing minimum-length-of-string-after-operations/2025-01-13 12.21.55 - Accepted - runtime 311ms - memory 18.8MB.py
2025-07-04 16:23:31,212 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:31,214 [INFO] __main__.py:245 - Writing check-if-a-parentheses-string-can-be-valid/2025-01-13 00.10.41 - Accepted - runtime 67ms - memory 21.9MB.py
2025-07-04 16:23:31,862 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:31,864 [INFO] __main__.py:245 - Writing valid-parenthesis-string/2025-01-12 23.45.22 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:32,297 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:32,299 [INFO] __main__.py:245 - Writing valid-parentheses/2025-01-12 23.07.54 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:32,299 [INFO] __main__.py:188 - Skipping valid-parentheses 2025-01-12 23.03.13 because its status is 'Wrong Answer'
2025-07-04 16:23:32,300 [INFO] __main__.py:245 - Writing n-th-tribonacci-number/2025-01-12 18.32.29 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:32,300 [INFO] __main__.py:245 - Writing fibonacci-number/2025-01-12 18.17.24 - Accepted - runtime 40ms - memory 17.6MB.py
2025-07-04 16:23:32,302 [INFO] __main__.py:245 - Writing climbing-stairs/2025-01-12 17.41.42 - Accepted - runtime 0ms - memory 17.6MB.py
2025-07-04 16:23:32,703 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:32,705 [INFO] __main__.py:245 - Writing construct-k-palindrome-strings/2025-01-11 09.26.53 - Accepted - runtime 48ms - memory 18.2MB.py
2025-07-04 16:23:33,134 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:33,135 [INFO] __main__.py:245 - Writing word-subsets/2025-01-10 11.37.32 - Accepted - runtime 443ms - memory 21.2MB.py
2025-07-04 16:23:33,563 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:33,565 [INFO] __main__.py:245 - Writing find-all-anagrams-in-a-string/2025-01-09 16.50.05 - Accepted - runtime 31ms - memory 18.6MB.py
2025-07-04 16:23:34,010 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:34,011 [INFO] __main__.py:245 - Writing repeated-dna-sequences/2025-01-09 14.26.55 - Accepted - runtime 25ms - memory 29.4MB.py
2025-07-04 16:23:34,012 [INFO] __main__.py:188 - Skipping repeated-dna-sequences 2025-01-09 14.23.50 because its status is 'Time Limit Exceeded'
2025-07-04 16:23:34,012 [INFO] __main__.py:245 - Writing search-in-rotated-sorted-array/2025-01-09 11.56.42 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:39,013 [DEBUG] leetcode.py:150 - Exporting submissions from 300 to 320
2025-07-04 16:23:39,506 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=300&limit=20 HTTP/1.1" 200 None
2025-07-04 16:23:39,510 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1502611424,"question_id":33,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736401842,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1502611424/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        left,right = 0,len(nums)-1\\n        while left<=right:\\n            mid = left + (right-left)//2\\n            if nums[mid] == target:\\n                return mid\\n            if nums[left]<=nums[mid]:\\n                if nums[left]<=target<=nums[mid]:\\n                    right = mid - 1\\n                else:\\n                    left = mid+1\\n            else:\\n                if nums[mid]<=target<=nums[right]:\\n                    low = mid + 1\\n                else:\\n                    high = mid-1\\n        return -1","compare_result":"1111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1502557966,"question_id":374,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736398471,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1502557966/","is_pending":"Not Pending","title":"Guess Number Higher or Lower","memory":"17.7 MB","code":"# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left,right = 0,n\\n        while left<=right:\\n            mid = left + (right-left)//2\\n            if guess(mid) == -1:\\n                right = mid - 1\\n            elif guess(mid) == 1:\\n                left = mid + 1\\n            else:\\n                return mid","compare_result":"1111111111111111111111111","title_slug":"guess-number-higher-or-lower","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1502552942,"question_id":69,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736398155,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1502552942/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"17.9 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left = 0\\n        right = x\\n        while(left<=right):\\n            mid = left + (right-left)//2\\n            if mid*mid == x:\\n                return int(mid)\\n            elif mid*mid<x:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return int(right)\\n        ","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1502546942,"question_id":792,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736397770,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1502546942/","is_pending":"Not Pending","title":"Binary Search","memory":"18.9 MB","code":"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        left = 0\\n        right = len(nums) - 1\\n        while(left<=right):\\n            mid = left + (right-left)//2\\n            if nums[mid]==target:\\n                return mid\\n            elif nums[mid]<target:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"binary-search","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1502531809,"question_id":2292,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736396792,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1502531809/","is_pending":"Not Pending","title":"Counting Words With a Given Prefix","memory":"17.9 MB","code":"class Solution:\\n    def prefixCount(self, words: List[str], pref: str) -> int:\\n        total = 0\\n        for word in words:\\n            if word[:len(pref)]==pref:\\n                total+=1\\n        return total","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"counting-words-with-a-given-prefix","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1501969819,"question_id":34,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736351063,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1501969819/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"19.1 MB","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        left, right = 0, len(nums) - 1\\n        ans = [-1, -1]\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] < target:\\n                left = mid + 1\\n            elif nums[mid] > target:\\n                right = mid - 1\\n            else:\\n                ans[0] = mid\\n                right = mid - 1\\n        left, right = 0, len(nums) - 1\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] < target:\\n                left = mid + 1\\n            elif nums[mid] > target:\\n                right = mid - 1\\n            else:\\n                ans[1] = mid\\n                left = mid + 1\\n        return ans\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1501938064,"question_id":3309,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736349083,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1501938064/","is_pending":"Not Pending","title":"Count Prefix and Suffix Pairs I","memory":"17.8 MB","code":"class Solution:\\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:\\n        def isPrefixAndSuffix(str1, str2):\\n            if str2[:len(str1)] == str1 and str2[-len(str1):] == str1:\\n                return True\\n            return False\\n        total = 0 \\n        for i in range (len(words)):\\n            for j in range(i+1,len(words)):\\n                if isPrefixAndSuffix(words[i],words[j]):\\n                    total += 1\\n        return total\\n            ","compare_resulttitle_slug":"count-prefix-and-suffix-pairs-i","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1501733322,"question_id":3074,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736333974,"status":10,"status_display":"Accepted","runtime":"314 ms","url":"/submissions/detail/1501733322/","is_pending":"Not Pending","title":"Select Data","memory":"66.5 MB","code":"import pandas as pd\\n\\ndef selectData(students: pd.DataFrame) -> pd.DataFrame:\\n    return students[students[\'student_id\'] == 101][[\'name\', \'age\']]\\n","compare_result":"111111111111111111111","title_slug":"select-data","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1501696498,"question_id":34,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736331012,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1501696498/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        if len(nums) == 1 and target == nums[0]:\\n            return [0,0]\\n        left, right = 0, len(nums) - 1\\n        flag = False\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] == target:\\n                flag = True\\n                break\\n            elif nums[mid] > target:\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        if flag == False:\\n            return [-1, -1]\\n        left, right = 0, len(nums) - 1\\n        ans = [-1, -1]\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] >= target:\\n                ans[0] = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        left, right = 0, len(nums) - 1\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] > target:\\n                ans[1] = mid - 1\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        return ans\\n","compare_result":"1111111010111010100111111010111111011111110110111100111110111111111110111111101110001011","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1501694878,"question_id":34,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736330889,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1501694878/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        left, right = 0, len(nums) - 1\\n        flag = False\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] == target:\\n                flag = True\\n                break\\n            elif nums[mid] > target:\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        if flag == False:\\n            return [-1, -1]\\n        left, right = 0, len(nums) - 1\\n        ans = [-1, -1]\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] >= target:\\n                ans[0] = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        left, right = 0, len(nums) - 1\\n        while left <= right:\\n            mid = left + (right - left) // 2\\n            if nums[mid] > target:\\n                ans[1] = mid - 1\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        return ans\\n","compare_result":"1111011010111010100111111010111111011111110110111100111110111111111110111111101110001011","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1501002420,"question_id":74,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736273039,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1501002420/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"18.1 MB","code":"class Solution:\\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\\n        one_d=[]\\n        for numbers in matrix:\\n            for number in numbers:\\n                one_d.append(number)\\n        left = 0\\n        right = len(one_d) -1\\n        while left<=right:\\n            mid = left + (right-left)//2\\n            if one_d[mid] == target:\\n                return True\\n            elif one_d[mid]<target:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1500985370,"question_id":167,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736272179,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1500985370/","is_pending":"Not Pending","title":"Two Sum II - Input Array Is Sorted","memory":"18.6 MB","code":"class Solution:\\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\\n        left = 0\\n        right = len(numbers) - 1\\n        while(left<=right):\\n            if numbers[left]+numbers[right]==target:\\n                return [left+1,right+1]\\n            elif numbers[left]+numbers[right]>target:\\n                right = right -1\\n            else:\\n                left = left + 1","compare_result":"111111111111111111111111","title_slug":"two-sum-ii-input-array-is-sorted","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1500967531,"question_id":49,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736271281,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1500967531/","is_pending":"Not Pending","title":"Group Anagrams","memory":"20.8 MB","code":"class Solution:\\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\\n        hash_map = {}\\n        for word in strs:\\n            key = \'\'.join(sorted(word))\\n            if key not in hash_map:\\n                hash_map[key] = []\\n            hash_map[key].append(word)\\n        return list(hash_map.values())\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1500889946,"question_id":3065,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736267412,"status":10,"status_display":"Accepted","runtime":"637 ms","url":"/submissions/detail/1500889946/","is_pending":"Not Pending","title":"Display the First Three Rows","memory":"65.2 MB","code":"import pandas as pd\\n\\ndef selectFirstRows(employees: pd.DataFrame) -> pd.DataFrame:\\n    return employees.head(3)","compare_result":"111111111111111111111","title_slug":"display-the-first-three-rows","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1500886230,"question_id":3076,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736267222,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1500886230/","is_pending":"Not Pending","title":"Get the Size of a DataFrame","memory":"65.8 MB","code":"import pandas as pd\\n\\ndef getDataframeSize(players: pd.DataFrame) -> List[int]:\\n    shape = players.shape\\n    return list(shape)","compare_result":"111111111111111111111","title_slug":"get-the-size-of-a-dataframe","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1500883419,"question_id":3062,"lang":"pythondata","lang_name":"Pandas","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736267071,"status":10,"status_display":"Accepted","runtime":"515 ms","url":"/submissions/detail/1500883419/","is_pending":"Not Pending","title":"Create a DataFrame from List","memory":"65.3 MB","code":"import pandas as pd\\n\\ndef createDataframe(student_data: List[List[int]]) -> pd.DataFrame:\\n    ans = pd.DataFrame(student_data, columns=[\'student_id\', \'age\'])\\n    return ans","compare_result":"111111111111111111111","title_slug":"create-a-dataframe-from-list","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1500653339,"question_id":1524,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736252498,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1500653339/","is_pending":"Not Pending","title":"String Matching in an Array","memory":"17.7 MB","code":"class Solution:\\n    def stringMatching(self, words: List[str]) -> List[str]:\\n        lst = []\\n        cwords = words\\n        for word1 in words:\\n            for word2 in words:\\n                if word1 in word2 and word1 != word2:\\n                    lst.append(word1)\\n                    break\\n        return lst\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-matching-in-an-array","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1499690262,"question_id":1895,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1736178467,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1499690262/","is_pending":"Not Pending","title":"Minimum Number of Operations to Move All Balls to Each Box","memory":"17.9 MB","code":"class Solution:\\n    def minOperations(self, boxes: str) -> List[int]:\\n        n = len(boxes)\\n        res = [0] * n\\n        prefix_count = 0\\n        prefix_sum = 0\\n        for i in range(n):\\n            res[i] = prefix_count * i - prefix_sum\\n            if boxes[i] == \'1\':\\n                prefix_count += 1\\n                prefix_sum+= i\\n        suffix_count = 0\\n        suffix_sum = 0\\n        for i in range(n - 1, -1, -1):\\n            res[i] += suffix_sum - suffix_count * i\\n            if boxes[i] == \'1\':\\n                suffix_count += 1\\n                suffix_sum += i\\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-operations-to-move-all-balls-to-each-box","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1499203081,"question_id":792,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1736141429,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1499203081/","is_pending":"Not Pending","title":"Binary Search","memory":"18.6 MB","code":"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        left = 0\\n        right = len(nums) - 1\\n        while(left<=right):\\n            mid = left + (right-left)//2\\n            if nums[mid]==target:\\n                return mid\\n            elif nums[mid]<target:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"binary-search","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1498305385,"question_id":217,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736065028,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1498305385/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"31.5 MB","code":"class Solution:\\n    def containsDuplicate(self, nums: List[int]) -> bool:\\n        visited = set()\\n        for num in nums:\\n            if num in visited:\\n                return True\\n            visited.add(num)\\n        return False\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":28}],"has_next":true,"last_key":""}'
2025-07-04 16:23:39,511 [INFO] __main__.py:188 - Skipping search-in-rotated-sorted-array 2025-01-09 11.50.42 because its status is 'Time Limit Exceeded'
2025-07-04 16:23:40,208 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:40,210 [INFO] __main__.py:245 - Writing guess-number-higher-or-lower/2025-01-09 10.54.31 - Accepted - runtime 46ms - memory 17.7MB.py
2025-07-04 16:23:40,628 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:40,630 [INFO] __main__.py:245 - Writing sqrtx/2025-01-09 10.49.15 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:42,075 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:42,076 [INFO] __main__.py:245 - Writing binary-search/2025-01-09 10.42.50 - Accepted - runtime 0ms - memory 18.9MB.py
2025-07-04 16:23:42,490 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:42,492 [INFO] __main__.py:245 - Writing counting-words-with-a-given-prefix/2025-01-09 10.26.32 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:23:42,493 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2025-01-08 21.44.23 - Accepted - runtime 0ms - memory 19.1MB.py
2025-07-04 16:23:42,975 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:42,977 [INFO] __main__.py:245 - Writing count-prefix-and-suffix-pairs-i/2025-01-08 21.11.23 - Accepted - runtime 7ms - memory 17.8MB.py
2025-07-04 16:23:42,978 [INFO] __main__.py:245 - Writing select-data/2025-01-08 16.59.34 - Accepted - runtime 314ms - memory 66.5MB.pd.py
2025-07-04 16:23:42,979 [INFO] __main__.py:188 - Skipping find-first-and-last-position-of-element-in-sorted-array 2025-01-08 16.10.12 because its status is 'Wrong Answer'
2025-07-04 16:23:42,979 [INFO] __main__.py:188 - Skipping find-first-and-last-position-of-element-in-sorted-array 2025-01-08 16.08.09 because its status is 'Wrong Answer'
2025-07-04 16:23:43,417 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:43,419 [INFO] __main__.py:245 - Writing search-a-2d-matrix/2025-01-08 00.03.59 - Accepted - runtime 0ms - memory 18.1MB.py
2025-07-04 16:23:43,844 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:43,845 [INFO] __main__.py:245 - Writing two-sum-ii-input-array-is-sorted/2025-01-07 23.49.39 - Accepted - runtime 4ms - memory 18.6MB.py
2025-07-04 16:23:44,247 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:44,248 [INFO] __main__.py:245 - Writing group-anagrams/2025-01-07 23.34.41 - Accepted - runtime 13ms - memory 20.8MB.py
2025-07-04 16:23:44,249 [INFO] __main__.py:245 - Writing display-the-first-three-rows/2025-01-07 22.30.12 - Accepted - runtime 637ms - memory 65.2MB.pd.py
2025-07-04 16:23:44,250 [INFO] __main__.py:245 - Writing get-the-size-of-a-dataframe/2025-01-07 22.27.02 - Accepted - runtime 794ms - memory 65.8MB.pd.py
2025-07-04 16:23:44,250 [INFO] __main__.py:245 - Writing create-a-dataframe-from-list/2025-01-07 22.24.31 - Accepted - runtime 515ms - memory 65.3MB.pd.py
2025-07-04 16:23:44,723 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:44,724 [INFO] __main__.py:245 - Writing string-matching-in-an-array/2025-01-07 18.21.38 - Accepted - runtime 0ms - memory 17.7MB.py
2025-07-04 16:23:45,144 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:45,146 [INFO] __main__.py:245 - Writing minimum-number-of-operations-to-move-all-balls-to-each-box/2025-01-06 21.47.47 - Accepted - runtime 8ms - memory 17.9MB.py
2025-07-04 16:23:45,146 [INFO] __main__.py:245 - Writing binary-search/2025-01-06 11.30.29 - Accepted - runtime 0ms - memory 18.6MB.py
2025-07-04 16:23:45,698 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:45,699 [INFO] __main__.py:245 - Writing contains-duplicate/2025-01-05 14.17.08 - Accepted - runtime 9ms - memory 31.5MB.py
2025-07-04 16:23:50,700 [DEBUG] leetcode.py:150 - Exporting submissions from 320 to 340
2025-07-04 16:23:51,272 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=320&limit=20 HTTP/1.1" 200 None
2025-07-04 16:23:51,296 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1498301761,"question_id":238,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736064740,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1498301761/","is_pending":"Not Pending","title":"Product of Array Except Self","memory":"23.9 MB","code":"class Solution:\\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\\n        lst = [0]*len(nums)\\n        total_product = 1\\n        total_product_without_zero = 1\\n        total_zero = 0\\n        for i in nums:\\n            total_product = total_product* i\\n            total_product_without_zero*=(i if i!=0 else 1)\\n            total_zero+=(1 if i == 0 else 0)\\n        if total_zero > 1:\\n            return lst\\n        if total_zero == 1:\\n            return [total_product_without_zero if x == 0 else 0 for x in nums]\\n        return [total_product//x for x in nums]\\n        ","compare_result":"111111111111111111111111","title_slug":"product-of-array-except-self","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1498268192,"question_id":2465,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736062176,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/1498268192/","is_pending":"Not Pending","title":"Shifting Letters II","memory":"41.4 MB","code":"class Solution:\\n    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:\\n        l = len(s)\\n        lst = [0] * (l + 1)\\n        for shift in shifts:\\n            start, end, direction = shift\\n            if direction == 1:\\n                lst[start] += 1\\n                lst[end + 1] -= 1\\n            else:\\n                lst[start] -= 1\\n                lst[end + 1] += 1\\n        total = 0\\n        for i in range(l):\\n            total += lst[i]\\n            lst[i] = total\\n        list_s = list(s)\\n        for i in range(l):\\n            shift_needed = (lst[i] % 26 + 26) % 26\\n            list_s[i] = chr((ord(list_s[i]) - ord(\\"a\\") + shift_needed) % 26 + ord(\\"a\\"))\\n\\n        return \\"\\".join(list_s)\\n","compare_result":"111111111111111111111111111111111111111","title_slug":"shifting-letters-ii","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1497762749,"question_id":3684,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736019043,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1497762749/","is_pending":"Not Pending","title":"Substring Matching Pattern","memory":"17.8 MB","code":"class Solution:\\n    def hasMatch(self, s: str, p: str) -> bool:\\n        index = p.index(\'*\')\\n        left = p[:index]\\n        right = p[index+1:]\\n        i = s.find(left)\\n        j = s.rfind(right)\\n        if i != -1 and j!=-1 and i+len(left)<=j:\\n            return True\\n        return False\\n","compare_resulttitle_slug":"substring-matching-pattern","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1497754612,"question_id":128,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736018399,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/1497754612/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"34.1 MB","code":"class Solution:\\n    def longestConsecutive(self, nums: List[int]) -> int:\\n        ans = 0\\n        nums_set = set(nums)\\n        for num in nums_set:\\n            if num-1 not in nums_set:\\n                current_total = 1\\n                while (num+current_total) in nums_set:\\n                    current_total +=1\\n                ans = max(ans, current_total) \\n        return ans \\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-consecutive-sequence","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1497753692,"question_id":128,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736018327,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1497753692/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"N/A","code":"class Solution:\\n    def longestConsecutive(self, nums: List[int]) -> int:\\n        ans = 0\\n        nums_set = set(nums)\\n        for num in nums_set:\\n            if num-1 not in nums_set:\\n                current_total = 1\\n                while (num+current_total) in nums_set:\\n                    current_total +=1\\n            ans = max(ans, current_total) \\n        return ans \\n        ","compare_result":"111110000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-consecutive-sequence","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1497753287,"question_id":128,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736018296,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1497753287/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"N/A","code":"class Solution:\\n    def longestConsecutive(self, nums: List[int]) -> int:\\n        ans = -1\\n        nums_set = set(nums)\\n        for num in nums_set:\\n            if num-1 not in nums_set:\\n                current_total = 1\\n                while (num+current_total) in nums_set:\\n                    current_total +=1\\n            ans = max(ans, current_total) \\n        return ans \\n        ","compare_result":"110110000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-consecutive-sequence","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1497735240,"question_id":1537,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736016937,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1497735240/","is_pending":"Not Pending","title":"Maximum Score After Splitting a String","memory":"17.7 MB","code":"class Solution:\\n    def maxScore(self, s: str) -> int:\\n        lst = [0] * len(s)\\n        for i, c in enumerate(s):\\n            if c == \\"1\\":\\n                lst[i] = 1\\n        n = len(lst)\\n        for i in range(1, n):\\n            lst[i] += lst[i - 1]\\n        ans = -1\\n        zero_count = 0\\n        for i in range (len(s)-1):\\n            if s[i] == \\"0\\":\\n                zero_count += 1\\n            if i == 0:\\n                ans = max(ans, zero_count + lst[n - 1] - lst[i])\\n            else:\\n                ans = max(ans, zero_count + lst[n - 1] - lst[i - 1])\\n\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-after-splitting-a-string","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1497731075,"question_id":1537,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736016644,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1497731075/","is_pending":"Not Pending","title":"Maximum Score After Splitting a String","memory":"N/A","code":"class Solution:\\n    def maxScore(self, s: str) -> int:\\n        lst = [0] * len(s)\\n        for i, c in enumerate(s):\\n            if c == \\"1\\":\\n                lst[i] = 1\\n        n = len(lst)\\n        for i in range(1, n):\\n            lst[i] += lst[i - 1]\\n        ans = -1\\n        zero_count = 0\\n        for i, c in enumerate(s):\\n            if c == \\"0\\":\\n                zero_count += 1\\n            if i == 0:\\n                ans = max(ans, zero_count + lst[n - 1] - lst[i])\\n            else:\\n                ans = max(ans, zero_count + lst[n - 1] - lst[i - 1])\\n\\n        return ans\\n","compare_result":"11111110110111111111001111101111111111111111111111011111111111111111110111111111111111111111111111110111","title_slug":"maximum-score-after-splitting-a-string","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1497693525,"question_id":347,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736014300,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1497693525/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"21 MB","code":"class Solution:\\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\\n        frequency = {}\\n        ans = []\\n        for num in nums:\\n            if num in frequency:\\n                frequency[num] += 1\\n            else:\\n                frequency[num] = 1\\n        sorted_frequency = dict(sorted(frequency.items(), key=lambda item: item[1], reverse=True))\\n        for i in range(k):\\n            ans.append(list(sorted_frequency.keys())[i])\\n        \\n        return ans\\n","compare_result":"111111111111111111111","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1497554553,"question_id":242,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736006442,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1497554553/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.8 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        first_word = [0] * 26\\n        second_word = [0] * 26\\n        for c in s:\\n            first_word[ord(c) - ord(\'a\')] += 1\\n        for c in t:\\n            second_word[ord(c) - ord(\'a\')] += 1\\n        for i in range(26):\\n            if first_word[i] != second_word[i]:\\n                return False\\n        return True\\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1497416849,"question_id":3684,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736002281,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1497416849/","is_pending":"Not Pending","title":"Substring Matching Pattern","memory":"N/A","code":"class Solution:\\n    def hasMatch(self, s: str, p: str) -> bool:\\n        index = p.index(\'*\')\\n        left = p[:index]\\n        right = p[index+1:]\\n        if s.startswith(left) and s.endswith(right):\\n            return True\\n        if left in s:\\n            start = s.find(left) + len(left)\\n            if s[start:].endswith(right):\\n                return True\\n        \\n        return False\\n","compare_result":"111111111111111111111111111111010111111111111111111111111011110111110111011110011111111011111111111111111111111111111111110111110111111110111111111111111011101111111111111111111110011111011111111111111111111111110111111111111111111111111111011111111111111111111111111101111101110111111111111111111101111111111111111011111111111110111110111111111101111111111111111111111111111111111111111111111110111111111111011111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111101111110111111111111111111111111111111111111111111111111111111111111111111101011111111111111111111111111111111111111111111111111111111111111111111111111111111110111111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011111111011111111111111111111111111111111111111111111111111111111110111111111101111111101","title_slug":"substring-matching-pattern","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1497410658,"question_id":3684,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736002123,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1497410658/","is_pending":"Not Pending","title":"Substring Matching Pattern","memory":"N/A","code":"class Solution:\\n    def hasMatch(self, s: str, p: str) -> bool:\\n        index = p.index(\'*\')\\n        left = p[:index]\\n        right = p[index+1:]\\n        if s.find(left) == -1:\\n            return False\\n        start = s.find(left)\\n        if s[start + len(left):].endswith(right):\\n            return True\\n        \\n        return False\\n\\n","compare_resulttitle_slug":"substring-matching-pattern","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1497406041,"question_id":3684,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1736002007,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1497406041/","is_pending":"Not Pending","title":"Substring Matching Pattern","memory":"N/A","code":"class Solution:\\n    def hasMatch(self, s: str, p: str) -> bool:\\n        index = p.index(\\"*\\")\\n        left = p[:index]\\n        right = p[index + 1 :]\\n        for i in range(len(s) - len(left) - len(right) + 1):\\n            if s[i : i + len(left)] == left and s[i + len(left) :].startswith(right):\\n                return True\\n\\n        return False\\n","compare_resulttitle_slug":"substring-matching-pattern","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1496908462,"question_id":2059,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735963383,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/1496908462/","is_pending":"Not Pending","title":"Unique Length-3 Palindromic Subsequences","memory":"18.1 MB","code":"class Solution:\\n    def countPalindromicSubsequence(self, s: str) -> int:\\n        total = 0\\n        set_of_s = set(s)\\n        for c in set_of_s:\\n            left = s.find(c)\\n            right = s.rfind(c)\\n            total += len(set(s[left+1:right])) \\n        return total","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-length-3-palindromic-subsequences","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1496565974,"question_id":2691,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735927767,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1496565974/","is_pending":"Not Pending","title":"Count Vowel Strings in Ranges","memory":"50.2 MB","code":"class Solution:\\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\\n        vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} \\n        hash_map = [0] * len(words)\\n        ans = []\\n        for i,word in enumerate(words):\\n            if word[0] in vowels and word[len(word)-1] in vowels:\\n                hash_map[i]=1\\n        l = len(hash_map)\\n        for i in range (1,l):\\n            hash_map[i]=hash_map[i]+hash_map[i-1]\\n        for query in queries:\\n            if query[0]==0:\\n                ans.append(hash_map[query[1]])\\n            else:\\n                ans.append(hash_map[query[1]]-hash_map[query[0]-1])\\n        return ans\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-vowel-strings-in-ranges","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1496559794,"question_id":2691,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735927439,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1496559794/","is_pending":"Not Pending","title":"Count Vowel Strings in Ranges","memory":"62 MB","code":"class Solution:\\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\\n        vowels = [\'a\',\'e\',\'i\',\'o\',\'u\']\\n        hash_map = {}\\n        ans = []\\n        for i,word in enumerate(words):\\n            if word[0] in vowels and word[len(word)-1] in vowels:\\n                hash_map[i]=1\\n            else:\\n                hash_map[i]=0\\n        l = len(hash_map)\\n        for i in range (1,l):\\n            hash_map[i]=hash_map[i]+hash_map[i-1]\\n        for query in queries:\\n            if query[0]==0:\\n                ans.append(hash_map[query[1]])\\n            else:\\n                ans.append(hash_map[query[1]]-hash_map[query[0]-1])\\n        return ans\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-vowel-strings-in-ranges","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1496456804,"question_id":1585,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735922049,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1496456804/","is_pending":"Not Pending","title":"The kth Factor of n","memory":"17.8 MB","code":"class Solution:\\n    def kthFactor(self, n: int, k: int) -> int:\\n        factor = 0 \\n        for i in range(1, int(sqrt(n) + 1)):\\n            if n % i == 0:\\n                factor += 1\\n            if factor == k:\\n                return i\\n        for j in range(int(sqrt(n) + 1), 0, -1):\\n            if n % j == 0 and n // j != i:\\n                factor += 1\\n            if factor == k:\\n                return n // j\\n\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-kth-factor-of-n","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1496453061,"question_id":1585,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735921846,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1496453061/","is_pending":"Not Pending","title":"The kth Factor of n","memory":"N/A","code":"class Solution:\\n    def kthFactor(self, n: int, k: int) -> int:\\n        factor = 0 \\n        for i in range(1, int(sqrt(n) + 1)):\\n            if n % i == 0:\\n                k-=1\\n            if k==0:\\n                return i\\n\\n        for i in range(int(sqrt(n) + 1), 0, -1):\\n            if n % i == 0 and n // i != i:\\n                k-=1\\n            if k==0:\\n                return n // i\\n\\n        return -1","compare_result":"11111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111","title_slug":"the-kth-factor-of-n","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1496394591,"question_id":1585,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735918518,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1496394591/","is_pending":"Not Pending","title":"The kth Factor of n","memory":"18 MB","code":"class Solution:\\n    def kthFactor(self, n: int, k: int) -> int:\\n        lst = []\\n        lst.append(0)\\n        for i in range(1, n + 1):\\n            if n % i == 0:\\n                lst.append(i)\\n        if k >= len(lst):\\n            return -1\\n        else:\\n            return lst[k]\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-kth-factor-of-n","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1496372755,"question_id":9,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735917138,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1496372755/","is_pending":"Not Pending","title":"Palindrome Number","memory":"17.7 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        total = 0\\n        num = x\\n        if x<0:\\n            return False\\n        else:\\n            while x!=0:\\n                rem = x%10\\n                total = total*10+rem\\n                x//=10\\n        return total == num","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":8}],"has_next":true,"last_key":""}'
2025-07-04 16:23:51,700 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:51,702 [INFO] __main__.py:245 - Writing product-of-array-except-self/2025-01-05 14.12.20 - Accepted - runtime 11ms - memory 23.9MB.py
2025-07-04 16:23:52,127 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:52,129 [INFO] __main__.py:245 - Writing shifting-letters-ii/2025-01-05 13.29.36 - Accepted - runtime 66ms - memory 41.4MB.py
2025-07-04 16:23:52,538 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:52,539 [INFO] __main__.py:245 - Writing substring-matching-pattern/2025-01-05 01.30.43 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:23:52,983 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:52,984 [INFO] __main__.py:245 - Writing longest-consecutive-sequence/2025-01-05 01.19.59 - Accepted - runtime 53ms - memory 34.1MB.py
2025-07-04 16:23:52,985 [INFO] __main__.py:188 - Skipping longest-consecutive-sequence 2025-01-05 01.18.47 because its status is 'Runtime Error'
2025-07-04 16:23:52,985 [INFO] __main__.py:188 - Skipping longest-consecutive-sequence 2025-01-05 01.18.16 because its status is 'Wrong Answer'
2025-07-04 16:23:53,491 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:53,493 [INFO] __main__.py:245 - Writing maximum-score-after-splitting-a-string/2025-01-05 00.55.37 - Accepted - runtime 3ms - memory 17.7MB.py
2025-07-04 16:23:53,493 [INFO] __main__.py:188 - Skipping maximum-score-after-splitting-a-string 2025-01-05 00.50.44 because its status is 'Wrong Answer'
2025-07-04 16:23:53,907 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:53,908 [INFO] __main__.py:245 - Writing top-k-frequent-elements/2025-01-05 00.11.40 - Accepted - runtime 25ms - memory 21MB.py
2025-07-04 16:23:54,379 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:54,381 [INFO] __main__.py:245 - Writing valid-anagram/2025-01-04 22.00.42 - Accepted - runtime 11ms - memory 17.8MB.py
2025-07-04 16:23:54,382 [INFO] __main__.py:188 - Skipping substring-matching-pattern 2025-01-04 20.51.21 because its status is 'Wrong Answer'
2025-07-04 16:23:54,382 [INFO] __main__.py:188 - Skipping substring-matching-pattern 2025-01-04 20.48.43 because its status is 'Wrong Answer'
2025-07-04 16:23:54,382 [INFO] __main__.py:188 - Skipping substring-matching-pattern 2025-01-04 20.46.47 because its status is 'Wrong Answer'
2025-07-04 16:23:54,852 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:54,853 [INFO] __main__.py:245 - Writing unique-length-3-palindromic-subsequences/2025-01-04 10.03.03 - Accepted - runtime 77ms - memory 18.1MB.py
2025-07-04 16:23:55,606 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:55,608 [INFO] __main__.py:245 - Writing count-vowel-strings-in-ranges/2025-01-04 00.09.27 - Accepted - runtime 24ms - memory 50.2MB.py
2025-07-04 16:23:55,608 [INFO] __main__.py:245 - Writing count-vowel-strings-in-ranges/2025-01-04 00.03.59 - Accepted - runtime 45ms - memory 62MB.py
2025-07-04 16:23:56,024 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:56,026 [INFO] __main__.py:245 - Writing the-kth-factor-of-n/2025-01-03 22.34.09 - Accepted - runtime 0ms - memory 17.8MB.py
2025-07-04 16:23:56,026 [INFO] __main__.py:188 - Skipping the-kth-factor-of-n 2025-01-03 22.30.46 because its status is 'Wrong Answer'
2025-07-04 16:23:56,027 [INFO] __main__.py:245 - Writing the-kth-factor-of-n/2025-01-03 21.35.18 - Accepted - runtime 4ms - memory 18MB.py
2025-07-04 16:23:56,454 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:23:56,456 [INFO] __main__.py:245 - Writing palindrome-number/2025-01-03 21.12.18 - Accepted - runtime 8ms - memory 17.7MB.py
2025-07-04 16:24:01,457 [DEBUG] leetcode.py:150 - Exporting submissions from 340 to 360
2025-07-04 16:24:01,932 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=340&limit=20 HTTP/1.1" 200 None
2025-07-04 16:24:01,943 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1496312804,"question_id":2358,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735913352,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1496312804/","is_pending":"Not Pending","title":"Number of Ways to Split Array","memory":"32.2 MB","code":"class Solution:\\n    def waysToSplitArray(self, nums: List[int]) -> int:\\n        total = 0\\n        total_sum = sum(nums)\\n        left_sum = 0\\n        l = len(nums)\\n        for i in range(l - 1):\\n            left_sum += nums[i]\\n            if left_sum >= total_sum - left_sum:\\n                total = total + 1\\n        return total\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-split-array","has_notes":false,"flag_type":1,"frontend_id":7},{"id":1496311741,"question_id":2358,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735913284,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1496311741/","is_pending":"Not Pending","title":"Number of Ways to Split Array","memory":"N/A","code":"class Solution:\\n    def waysToSplitArray(self, nums: List[int]) -> int:\\n        total = 0\\n        total_sum = sum(nums)\\n        left_sum = 0\\n        l = len(nums)\\n        for i in range (l-1):\\n            left_sum += nums[i]\\n            if left_sum> total_sum-left_sum:\\n                total = total + 1\\n        return total\\n","compare_result":"11111101111010000100001111111111111111111111111111111111111111111111111111111111111111111111110000011","title_slug":"number-of-ways-to-split-array","has_notes":false,"flag_type":1,"frontend_id":6},{"id":1495935857,"question_id":204,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735885958,"status":10,"status_display":"Accepted","runtime":"1219 ms","url":"/submissions/detail/1495935857/","is_pending":"Not Pending","title":"Count Primes","memory":"56.4 MB","code":"class Solution:\\n    def countPrimes(self, n: int) -> int:\\n        if n<= 2:\\n            return 0\\n        is_prime = [True]* n\\n        is_prime[0] = is_prime[1] = False\\n        for i in range (2,math.isqrt(n)+1):\\n            if is_prime[i]:\\n                for j in range (i*i,n,i):\\n                    is_prime[j]=False\\n        return sum(is_prime)\\n\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-primes","has_notes":false,"flag_type":1,"frontend_id":5},{"id":1494975449,"question_id":50,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735813097,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1494975449/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"17.9 MB","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        res = 1.0\\n        num = n\\n        if n<0:\\n            n= -n\\n        while n != 0:\\n            if n % 2 == 1:\\n                res *= x\\n                n -= 1\\n            else:\\n                x *= x\\n                n //= 2\\n        if num < 0:\\n            return 1.0 / res\\n        else:\\n            return res\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":4},{"id":1494964246,"question_id":36,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735812253,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1494964246/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"18 MB","code":"from typing import List\\n\\nclass Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        rows = [set() for _ in range(9)]\\n        columns = [set() for _ in range(9)]\\n        boxes = [set() for _ in range(9)]\\n        for i in range(9):\\n            for j in range(9):\\n                val = board[i][j]\\n                if val == \'.\':\\n                    continue\\n                if val in rows[i]:\\n                    return False\\n                rows[i].add(val)\\n                if val in columns[j]:\\n                    return False\\n                columns[j].add(val)\\n                index = (i // 3) * 3 + j // 3\\n                if val in boxes[index]:\\n                    return False\\n                boxes[index].add(val)\\n        return True\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":3},{"id":1494059013,"question_id":69,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735733574,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1494059013/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"18 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        left = 0\\n        right = x\\n        while(left<=right):\\n            mid = left + (right-left)//2\\n            if mid*mid == x:\\n                return int(mid)\\n            elif mid*mid<x:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return int(right)\\n        ","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":2},{"id":1493361692,"question_id":1,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1735651994,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1493361692/","is_pending":"Not Pending","title":"Two Sum","memory":"18.8 MB","code":"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        hashmap = {}\\n        for index, num in enumerate(nums):\\n            if target - num in hashmap:\\n                return [index,hashmap[target-num]]\\n            hashmap[num] = index","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-04 16:24:02,363 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:24:02,366 [INFO] __main__.py:245 - Writing number-of-ways-to-split-array/2025-01-03 20.09.12 - Accepted - runtime 41ms - memory 32.2MB.py
2025-07-04 16:24:02,367 [INFO] __main__.py:188 - Skipping number-of-ways-to-split-array 2025-01-03 20.08.04 because its status is 'Wrong Answer'
2025-07-04 16:24:02,840 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:24:02,842 [INFO] __main__.py:245 - Writing count-primes/2025-01-03 12.32.38 - Accepted - runtime 1219ms - memory 56.4MB.py
2025-07-04 16:24:03,243 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:24:03,245 [INFO] __main__.py:245 - Writing powx-n/2025-01-02 16.18.17 - Accepted - runtime 0ms - memory 17.9MB.py
2025-07-04 16:24:03,652 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:24:03,654 [INFO] __main__.py:245 - Writing valid-sudoku/2025-01-02 16.04.13 - Accepted - runtime 4ms - memory 18MB.py
2025-07-04 16:24:03,654 [INFO] __main__.py:245 - Writing sqrtx/2025-01-01 18.12.54 - Accepted - runtime 0ms - memory 18MB.py
2025-07-04 16:24:04,078 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-04 16:24:04,080 [INFO] __main__.py:245 - Writing two-sum/2024-12-31 19.33.14 - Accepted - runtime 0ms - memory 18.8MB.py
